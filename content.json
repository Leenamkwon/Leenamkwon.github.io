{"pages":[{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"깃 입문하기 | git & github","text":"깃을 사용하는 이유","link":"/2020/03/G_%EA%B9%83%EC%9E%85%EB%AC%B8/"},{"title":"타입 변환과 단축 평가 | javaScript","text":"","link":"/2020/02/coercion/"},{"title":"제어문 | javaScript","text":"제어문(Control flow statement)은 주어진 조건에 따라 코드 블록을 실행(조건문)하거나 반복 실행(반복문)할 때 사용한다. 일반적으로 코드는 위에서 아래 방향으로 순차적으로 실행된다. 제어문을 사용하면 코드의 실행 흐름을 인위적으로 제어할 수 있다. 하지만 코드의 실행 순서가 변경된다는 것은 단순하게 위에서 아래로 순차적으로 진행하는 직관적인 코드의 흐름을 혼란스럽게 만든다. 따라서 제어문은 코드의 흐름을 이해하기 어렵게 만들어 가독성을 해치는 단점이 있다. 가독성이 좋지 않은 코드는 오류를 발생시키는 원인이 된다. 나중에 살펴볼 forEach, map, filter, reduce와 같은 고차 함수를 사용한 함수형 프로그래밍 기법에서는 제어문의 사용을 억제하여 복잡성을 해결하려고 노력한다. 2보 전진을 위해서는 먼저 첫발을 내디뎌야 한다. 제어문을 바르게 이해하는 것은 코딩 스킬에 많은 영향을 준다. 특히 for 문은 매우 중요하므로 확실히 이해하도록 하자. 1.블록문블록문(Block statement/Compound statement)는 0개 이상의 문을 중괄호로 묶은 것으로 코드 블록 또는 블록이라고 부르기도 한다. 자바스크립트는 블록문을 하나의 실행 단위로 취급한다. 블록문은 단독으로 사용할 수도 있으나 일반적으로 제어문이나 함수를 정의할 때 사용하는 것이 일반적이다. 아래는 블록문이 사용되는 다양한 예제이다. 문의 끝에는 세미 콜론(;)을 붙이는 것이 일반적이지만 블록문의 끝에는 세미콜론을 붙이지 않는다는 것에 주의하기 바란다. 123456789101112131415161718// 블록문{ var foo = 10; console.log(foo);}// 제어문var x = 0;while (x &lt; 10) { x++;}console.log(x); // 10// 함수 선언문function sum(a, b) { return a + b;}console.log(sum(1, 2)); // 3 2.조건문조건문(conditional statement)은 주어진 조건식(conditional expression)의 평가 결과에 따라 코드 블럭(블록문)의 실행을 결정한다. 조건식은 불리언 값으로 평가될 수 있는 표현식이다. 자바스크립트는 2가지의 조건문 if…else 문과 switch 문을 제공한다. 2.1. if…else 문if…else 문은 주어진 조건식(불리언 값으로 평가될 수 있는 표현식)의 평가 결과, 즉 논리적 참 또는 거짓에 따라 실행할 코드 블록을 결정한다. 조건식의 평가 결과가 참(true)일 경우, if 문 다음의 코드 블록이 실행되고 거짓(false)일 경우, else 문 다음의 코드 블록이 실행된다. 12345if (조건식) { // 조건식이 참이면 이 코드 블록이 실행된다.} else { // 조건식이 거짓이면 이 코드 블록이 실행된다.} if 문의 조건식은 불리언 값으로 평가되어야 한다. 만약 if 문의 조건식이 불리언 값이 아닌 값으로 평가되면 자바스크립트 엔진에 의해 암묵적으로 데이터 타입이 불리언 값으로 강제 변환되어 실행할 코드 블록을 결정한다. 이에 대해서는 “8.2. 암묵적 타입 변환”에서 살펴볼 것이다. 조건식을 추가하여 조건에 따라 실행될 코드 블록을 늘리고 싶으면 else if 문을 사용한다. 1234567if (조건식1) { // 조건식1이 참이면 이 코드 블록이 실행된다.} else if (조건식2) { // 조건식2이 참이면 이 코드 블록이 실행된다.} else { // 조건식1과 조건식2가 모두 거짓이면 이 코드 블록이 실행된다.} else if 문과 else 문은 옵션이다. 즉, 사용할 수도 있고 사용하지 않을 수도 있다. if 문과 else 문은 2번 이상 사용할 수 없지만 else if 문은 여러 번 사용할 수 있다. 1234567891011121314151617181920212223242526var num = 2;var kind;// if 문if (num &gt; 0) { kind = '양수'; // 음수를 구별할 수 없다}console.log(kind); // 양수// if…else 문if (num &gt; 0) { kind = '양수';} else { kind = '음수'; // 0은 음수가 아니다.}console.log(kind); // 양수// if…else if 문if (num &gt; 0) { kind = '양수';} else if (num &lt; 0) { kind = '음수';} else { kind = '영';}console.log(kind); // 양수 만약 코드 블록 내의 문이 하나뿐이라면 중괄호를 생략할 수 있다. 12345678var num = 2;var kind;if (num &gt; 0) kind = '양수';else if (num &lt; 0) kind = '음수';else kind = '영';console.log(kind); // 양수 대부분의 if…else 문은 삼항 조건 연산자(“7.4. 삼항 조건 연산자” 참고)로 바꿔 쓸 수 있다. 아래 예제를 살펴보자. 1234567891011// x가 짝수이면 문자열 '짝수'를 반환하고 홀수이면 문자열 '홀수'를 반환한다.var x = 2;var result;if (x % 2) { // 2 % 2는 0이다. 이때 0은 false로 암묵적 강제 변환된다. result = '홀수';} else { result = '짝수';}console.log(result); // 짝수 위 예제는 아래와 같이 삼항 조건 연산자로 바꿔 쓸 수 있다. 1234567// x가 짝수이면 문자열 '짝수'를 반환하고 홀수이면 문자열 '홀수'를 반환한다.var x = 2;// 0은 false로 취급된다.var result = x % 2 ? '홀수' : '짝수';console.log(result); // 짝수 위 예제는 두가지 경우의 수(‘홀수’ 또는 ‘짝수’)를 갖는 경우이다. 만약 세가지 경우의 수(양수, 음수, 영)를 갖는 경우는 아래와 같이 바꿔 쓸 수 있다. 123456var num = 2;// 0은 false로 취급된다.var kind = num ? (num &gt; 0 ? '양수' : '음수') : '영';console.log(kind); // 양수 num &gt; 0 ? ‘양수’ : ‘음수’는 표현식이다. 즉, 삼항 연산자는 값으로 평가되는 표현식을 만든다. 하지만 if…else 문은 표현식이 아닌 문이다. 따라서 삼항 조건 연산자 표현식은 값처럼 사용할 수 있기 때문에 변수에 할당할 수 있다. 하지만 if…else 문은 값처럼 사용할 수 없기 때문에 변수에 할당할 수 없다는 차이가 있다. 2.2. switch 문switch 문은 주어진 표현식을 평가하여 그 값과 일치하는 표현식을 갖는 case 문으로 실행 순서를 이동시킨다. case 문은 상황(case)을 의미하는 표현식을 지정하고 콜론으로 마친다. 그리고 그 뒤에 실행할 문들을 위치시킨다. switch 문의 표현식과 일치하는 표현식을 갖는 case 문이 없다면 실행 순서는 default 문으로 이동한다. default 옵션으로 사용할 수도 있고 사용하지 않을 수도 있다. 12345678910switch (표현식) { case 표현식1: switch 문의 표현식과 표현식1이 일치하면 실행될 문; break; case 표현식2: switch 문의 표현식과 표현식2가 일치하면 실행될 문; break; default: switch 문의 표현식과 일치하는 표현식을 갖는 case 문이 없을 때 실행될 문;} if…else 문의 조건식은 반드시 불리언 값으로 평가되지만 switch 문의 표현식은 불리언 값보다는 문자열, 숫자 값인 경우가 많다. if…else 문은 논리적 참, 거짓으로 실행할 코드 블록을 결정한다. switch 문은 논리적 참, 거짓보다는 다양한 상황(case)에 따라 실행할 코드 블록을 결정할 때 사용한다. 아래 예제를 살펴보자. switch 문의 표현식, 즉 변수 month의 평가 결과인 숫자 값 11과 일치하는 case 문으로 실행 순서가 이동한다. 12345678910111213141516171819202122232425262728293031323334// 월을 영어로 변환한다. (11 → 'November')var month = 11;var monthName;switch (month) { case 1: monthName = 'January'; case 2: monthName = 'February'; case 3: monthName = 'March'; case 4: monthName = 'April'; case 5: monthName = 'May'; case 6: monthName = 'June'; case 7: monthName = 'July'; case 8: monthName = 'August'; case 9: monthName = 'September'; case 10: monthName = 'October'; case 11: monthName = 'November'; case 12: monthName = 'December'; default: monthName = 'Invalid month';}console.log(monthName); // Invalid month 3. 반목문반복문(Loop statement)은 주어진 조건식의 평가 결과가 참인 경우 코드 블럭을 실행한다. 그 후 조건식을 다시 검사하여 여전히 참인 경우 코드 블록을 다시 실행한다. 이는 조건식이 거짓일 때까지 반복된다. 자바스크립트는 3가지의 반복문 for 문, while 문, do…while 문을 제공한다. 그 외에도 for..in 문, ES6에서 새롭게 도입된 for…of 문이 있다. for..in 문과 for…of 문에 대해서는 나중에 살펴보기로 하자. 3.1 for 문for 문은 조건식이 거짓으로 판별될 때까지 코드 블록을 반복 실행한다. 가장 일반적으로 사용되는 반복문의 형태는 아래와 같다. 변수 선언문의 변수 이름은 반복을 의미하는 iteration의 i를 사용하는 것이 일반적이다. 1234567for (변수 선언문 또는 할당문; 조건식; 증감식) { 조건식이 참인 경우 반복 실행될 문;}for (var i = 0; i &lt; 2; i++) { console.log(i);} 위 예제의 for 문은 변수 i가 0으로 초기화된 상태에서 시작하여 i가 2보다 작을 때까지 코드 블록을 2번 반복 실행한다. for 문의 실행 순서를 따라가며 어떻게 동작하는지 살펴보자. for 문을 실행하면 가장 먼저 변수 선언문 var i = 0이 실행된다. 변수 선언문은 단 한번만 실행된다. 변수 선언문의 실행이 종료되면 조건식으로 실행 순서가 이동한다. 현재 변수 i는 0이므로 조건식의 평가 결과는 true다. 조건식의 평가 결과가 true이므로 실행 순서가 코드 블록으로 이동하여 실행된다. 증감문으로 실행 순서가 이동하는 것이 아니라 코드 블록으로 실행 순서가 이동하는 것에 주의하자. 코드 블록의 실행이 종료하면 증감식으로 실행 순서가 이동한다. 증감식 i++가 실행되어 i는 1이 된다. 증감식 실행이 종료되면 다시 조건식으로 실행 순서가 이동한다. 변수 선언문으로 실행 순서가 이동하는 것이 아니라 조건식으로 실행 순서가 이동하는 것에 주의하자. 변수 선언문은 단 한번만 실행된다. 현재 변수 i는 1이므로 조건식의 평가 결과는 true다. 조건식의 평가 결과가 true이므로 실행 순서가 코드 블록으로 이동하여 실행된다. 코드 블록의 실행이 종료하면 증감식으로 실행 순서가 이동한다. 증감식 i++가 실행되어 i는 2가 된다. 증감식 실행이 종료되면 다시 조건식으로 실행 순서가 이동한다. 현재 변수 i는 2이므로 조건식의 평가 결과는 false다. 조건식의 평가 결과가 false이므로 for 문의 실행이 종료된다. 아래 예제는 위 예제를 역으로 반복하는 for 문이다. 변수 i가 1으로 초기화된 상태에서 시작하여 i가 0보다 같거나 커질 때까지 코드 블록을 2번 반복 실행한다. for 문 내에 for 문을 중첩해 사용할 수 있다. 아래는 두 개의 주사위를 던졌을 때, 두 눈의 합이 6이 되는 모든 경우의 수를 출력하는 예제다. 12345for (var i = 1; i &lt;= 6; i++) { for (var j = 1; j &lt;= 6; j++) { if (i + j === 6) console.log(`[${i}, ${j}]`); }} 출력 결과는 아래와 같다. 12345[1, 5][2, 4][3, 3][4, 2][5, 1] 3.2. while 문while 문은 주어진 조건식의 평가 결과가 참이면 코드 블록을 계속해서 반복 실행한다. 조건문의 평가 결과가 거짓이 되면 실행을 종료한다. 만약 조건식의 평가 결과가 불리언 값이 아니면 불리언 값으로 강제 변환되어 논리적 참, 거짓을 구별한다. 1234567var count = 0;// count가 3보다 작을 때까지 코드 블록을 계속 반복 실행한다.while (count &lt; 3) { console.log(count); count++;} // 0 1 2 조건식의 평가 결과가 언제나 참이면 무한루프가 된다. 무한루프를 탈출하기 위해서는 코드 블럭 내에 if문으로 탈출 조건을 만들고 break 문으로 코드 블럭을 탈출한다. 123456789var count = 0;// 무한루프while (true) { console.log(count); count++; // count가 3이면 코드 블록을 탈출한다. if (count === 3) break;} // 0 1 2 4. break 문switch 문과 while 문에서 살펴보았듯이 break 문은 코드 블록을 탈출한다. 좀 더 정확히 표현하자면 코드 블록을 탈출하는 것이 아니라 레이블 문, 반복문(for, for…in, for…of, while, do…while) 또는 switch 문의 코드 블록을 탈출한다. 레이블 문, 반복문, switch 문의 코드 블록 이외에 break 문을 사용하면 SyntaxError(문법 에러)가 발생한다. 123if (true) { break; // Uncaught SyntaxError: Illegal break statement} 5. continue 문continue 문은 반복문의 코드 블록 실행을 현 지점에서 중단하고 반복문의 증감식으로 이동한다. break 문처럼 반복문을 탈출하지는 않는다.아래는 문자열에서 특정 문자의 개수를 카운트하는 예제이다. 12345678910111213141516var string = 'Hello World.';var search = 'l';var count = 0;// 문자열은 유사배열이므로 for 문으로 순회할 수 있다.for (var i = 0; i &lt; string.length; i++) { // 'l'이 아니면 현 지점에서 실행을 중단하고 반복문의 증감식으로 이동한다. if (string[i] !== search) continue; count++; // continue 문이 실행되면 이 문은 실행되지 않는다.}console.log(count); // 3// 참고로 String.prototype.match 메소드를 사용해도 같은 동작을 한다.const regexp = new RegExp(search, 'g');console.log(string.match(regexp).length); // 3 위 예제의 for 문은 아래와 동일하게 동작한다. 1234for (var i = 0; i &lt; string.length; i++) { // 'l'이면 카운트를 증가시킨다. if (string[i] === search) count++;} 위와 같이 if 문 내에서 실행해야 할 코드가 한 줄이라면 continue 문을 사용했을 때보다 간편하며 가독성도 좋다. 하지만 if 문 내에서 실행해야 할 코드가 길다면 들여쓰기가 한 단계 더 깊어지므로 continue 문을 사용하는 것이 가독성이 더 좋다. 123456789101112131415161718192021// continue 문을 사용하지 않으면 if 문 내에 코드를 작성해야 한다.for (var i = 0; i &lt; string.length; i++) { // 'l'이면 카운트를 증가시킨다. if (string[i] === search) { count++; // code // code // code }}// continue 문을 사용면 if 문 밖에 코드를 작성할 수 있다.for (var i = 0; i &lt; string.length; i++) { // 'l'이 아니면 카운트를 증가시키지 않는다. if (string[i] !== search) continue; count++; // code // code // code}","link":"/2020/02/control-flow-statement/"},{"title":"함수 | javaScript","text":"1. 함수란?함수는 자바스크립트에서 가장 중요한 핵심 개념입니다. 다른 자바스크립트의 핵심 개념인 스코프, 실행 컨텍스트, 클로저, 생성자 함수에 의한 객체 생성, 메소드, this, 프로토타입, 모듈화 등이 모두 함수와 깊은 관련이 있습니다. 따라서 함수는 자바스크립트를 정확히 이해하고 넘어 가야하는 핵심 중의 핵심이라고 할 수 있습니다. 프로그래밍 언어의 함수도 수학의 함수와 같은 개념입니다. 함수 f(x,y) = x + y를 자바스크립트의 함수로 표현해 봅시다. 12345function add(x, y) { return x + y;}add(2, 5) // 7 프로그래밍 언어의 함수는 일련의 과정을 문(statement)들로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것입니다. 함수 내부로 입력을 전달받는 변수를 매개변수(parameter), 입력을 (argument), 출력을 반환값(return value)이라 한다. 또한 함수는 값이며 여러 개 존재할 수 있으므로 특정 함수를 구별하기 위해 식별자인 함수 이름을 사용할 수 있다. 함수는 함수 정의를 통해 생성한다. 123function add(x, y) { return x + y;} 함수 정의만으로 함수가 실행되지 않는다. 인수를 매개변수를 통해 함수에 전달해야하다. 이를 함수 호출이라 한다. 함수를 호출하면 코드 블록에 담긴 무늘이 일괄적으로 실행되고 실행 결과, 반환값을 반환한다. 12345// 함수 호출var result = add(2, 5);// 함수 add에 인수 2, 5를 전달하면서 호출하면 반환값 7을 반환한다.console.log(result); //7 2. 함수의 사용 이유함수는 필요할 떄 여러 번 호출할 수 있다. 함수는 몇 번이든 호출할 수 있으므로 코드의 재사용이라는 측면에서 매우 유용하다. 함수를 사용하지 않고 같은 코드를 중복해서 여러 번 작성하면 그 코드를 수정해야 할 떄 중복된 횟수만큼 코드를 수정해야 한다. 코드의 중복을 억제하고 재사용성을 높이는 함수는 유지보수의 편의성을 높이고 실수를 줄여 코드의 신뢰성을 높이는 효과가 있다. 함수는 객체 타입의 값이다. 따라서 이름(식별자)을 붙일 수 있다.함수 이름은 변수 이름과 마찬가지로 함수 자신의 역할을 잘 설명해야 한다. 3. 함수 리터럴1234// 변수에 함수 리터럴을 할당var add = function add(x, y) { return x + y;}; 함수 리터럴의 구성 요소에 대한 설명은 아래와 같다. 함수 이름 함수 이름은 식별자이다. 따라서 식별자 네이밍 규칙을 준수해야 한다. 함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자이다. 함수 이름은 생략할 수 있다. 함수 이름이 있는 함수를 기명함수, 이름이 없는 함수를 익명함수라 한다. 매개변수 목록 0개 이상의 매개변수를 소괄호로 감싸고 쉼표로 구분한다. 매개변수에는 함수호출문의 인수가 순서대로 할당된다. 매개변수는 함수 몸체 내에서 변수와 동일하게 취급된다. 따라서 매개변수도 변수와 마찬가지로 식별자 네이밍 규칙을 준수해야 한다. 함수 몸체 함수가 호출되었을 떄 일괄적으로 실행될 문들을 하나의 실행 단위로 정의한 코드 블록이다. 함수 몸체는 함수 호출에 의해 실행된다. 리터럴은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용하여 값을 생성하는 표기 방식을 말한다. 따라서 함수 리터럴도 평가되어 값을 생성하며 이 값은 객체다. 즉, 함수는 객체다. 함수는 객체이지만 일반 객체와는 다르다. 일반 객체는 호출할 수 없지만 함수는 호출할 수 있다. 그리고 일반 객체에는 없는 함수 객체만의 고유한 프로퍼티를 갖는다. 4. 함수 정의함수를 정의 하는 방법은 4가지가 있다. 함수 선언문 123function add(x, y) { return x + y;} 함수 표현식 123var add = function(x, y) { return x + y;} Function 생성자 함수 1var add = new Function('x', 'y', 'return x + y'); 화살표 함수:ES6 1var add = (x, y) =&gt; x + y; 각각의 함수 정의 방식은 함수를 정의한다는 면에서는 동일하다. 단 미묘하지만 중요한 차이가 있다. 변수 선언과 함수 정의 함수 선언문이 평가되면 식별자가 암묵적으로 생성되고 함수 객체가 할당된다. 따라서 ECMAScript 사양에서도 변수는 선언, 함수는 정의라고 표현하고 있다.4.1. 함수 선언문함수 선언문을 사용하여 함수를 정의하는 방식은 아래와 같다. 12345678910// 함수 선언문function add(x, y) { return x + y;}//함수 참조console.dir(add); // f add(x, y)//함수 호출consle.log(add(2, 5)); // 7 함수 선언문은 함수 리터럴과 형태가 동일하다. 함수 리터럴은 함수 이름을 생략할 수 있으나 함수 선언문은 함수 이름을 생략할 수 없다. 123456// 함수 선언문은 함수 이름을 생략할 수 없다.function (x, y) { return x + y;}// syntaxError: Function statements require a function name; 함수 선언문은 표현식이 아닌 문이다. 즉 함수 선언문을 실행하면 완료값 undefined를 출력한다.함수 선언문이 만약 표현식인 문이라면 완료 값 undefined 대신 표현식이 평가되어 생성된 함수가 출력되어야 한다. 표현식인 문과 표현식이 아닌 문에서 살펴보았듯이 표현식이 아닌 문은 변수에 할당할 수 없다. 함수 선언문도 표현식이 아닌 문이므로 변수에 할당할 수 없다. 12345678// 함수 선언문은 표현식이 아닌 문이므로 변수에 할당할 수 없다.// 하지만 함수 선언문이 변수에 할당되는 것 처럼 보인다.var add = function add(x, y) { return x + y;}// 함수 호출console.log(add(2, 5)); // 7 함수 리터럴을 변수에 할당하거나 피연산자로 사용하면 함수 리터럴 표현식으로 해석한다. 123456789// 이름이 있는 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석한다.// 함수 선언문은 함수 이름을 생략할 수 없다.function foo() { console.log('foo'); }foo(); // foo// 함수 리터럴을 피연산자로 사용하면 함수 선언문이 아니라 함수 리터럴 표현식로 해석한다.// 함수 리터럴은 함수 이름을 생략할 수 있다.(function bar() { console.log('bar'); });bar(); // ReferenceError: bar is not defined 함수 리터럴”에서 “함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자다”라고 했다. 이는 함수 몸체 외부에서는 함수 이름으로 함수를 참조할 수 없으므로 함수 몸체 외부에서는 함수 이름으로 함수를 호출할 수 없다는 의미이다. 즉, 함수를 가리키는 식별자가 없다는 것과 마찬가지다. 따라서 위 예제의 bar 함수는 호출할 수 없다. 하지만 위 예제에서 함수 선언문으로 정의된 함수는 foo라는 이름으로 호출할 수 있었다. foo는 함수 몸체 내부에서만 유효한 식별자인 함수 이름이므로 foo로 함수를 호출할 수 없어야 한다. foo라는 이름으로 함수를 호출하려면 foo는 함수 이름이 아니라 함수 객체를 할당한 식별자이어야 한다. 그런데 위 예제에는 식별자 foo를 선언한 적도 없고 할당한 적도 없다. foo는 도대체 무엇인가? 결론부터 말하자면 foo는 생성된 함수 객체를 할당하고 있는 자바스크립트 엔진이 암묵적으로 생성한 식별자이다. 함수 선언문은 실행되어 함수 객체를 생성한다. 이떄 함수 이름은 함수 몸체 내부에서만 유효한 식별자 이므로 생성된 함수 객체를 가리키는 식별자가 필요하다. 함수 객체를 가리키는 식별자가 없으면 생성된 함수 객체를 호출할 수 없고 아무도 참조하고 있지 않는 함수 객체는 가비지 컬렉터에 의해 메모리에서 해제된다. 이를 위해 자바스크립트 엔진은 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고 생성된 함수 객체를 할당한다. 12345var add = function add(x, y) { return x + y;};console.log(add(2, 5)); // 7 함수는 함수 이름으로 호출하는 것이 아니라 함수 객체를 가리키는 식별자로 호출한다.즉, 함수 선언문 방식으로 생성된 함수를 호출한 것은 함수 이름 add이 아니라 자바스크립트 엔진이 암묵적으로 생성한 식별자 add인 것이다.함수의 이름을 그대로 똑같이 식별자에 복사를 하는 것이다. 함수는 함수 이름으로 호출하는 것이 아니라 함수 객체를 가리키는 식별자로 호출한다. 함수 선언문 방식으로 생성된 함수를 호출한 것은 함수 이름 add이 아니라 자바스크립트 엔진이 암묵적으로 생성한 식별자 add인 것이다. 함수 이름과 변수 이름이 일치하므로 함수 이름으로 호출되는 듯 보이지만 사실은 식별자로 호출된 것이다. 4.2. 함수 표현식 자바스크립트의 함수는 일급 객체이다. 함수가 일급 객체라는 것은 함수를 값처럼 자유롭게 사용할 수 있다는 의미다. 함수는 일급 객체이므로 함수 리터럴로 생성한 함수 객체를 변수에 할당할 수 있다. 이러한 함수 정의 방식을 함수 표현식(Function expression)이라 한다. 123456// 함수 표현식var add = function(x, y) { return x + y;};console.log(add(2, 5)); // 7 함수 리터럴의 함수 이름은 생략할 수 있다. 이러한 함수를 익명 함수(anonymous function)이라 한다. 함수 표현식의 함수 리터럴은 함수 이름을 생략하는 것이 일반적이다. 함수 선언문에서 살펴본 바와 같이, 함수를 호출할 때는 함수 이름이 아니라 함수 객체를 가리키는 식별자를 사용하여야 한다. 함수 이름은 함수 몸체 내부에서만 유효한 식별자이므로 함수 이름으로 함수를 호출할 수 없다. 1234567891011// 기명 함수 표현식var add = function foo (x, y) { return x + y;};// 함수 객체를 가리키는 식별자로 호출console.log(add(2, 5)); // 7// 함수 이름으로 호출하면 ReferenceError가 발생한다.// 함수 이름은 함수 몸체 내부에서만 유효한 식별자이다.console.log(foo(2, 5)); // ReferenceError: foo is not defined 자바스크립트 엔진은 함수 선언문의 함수 이름으로 식별자를 암묵적 생성하고 생성된 함수 객체를 할당하므로 함수 표현식과 유사하게 동작하는 것처럼 보인다. **함수 선언문은 “표현식이 아닌 문”이고 함수 표현식은 “표현식인 문”이다. 4.3 함수 생성 시점과 함수 호이스팅아래 예제를 살펴보자. 1234567891011121314151617// 함수 참조console.dir(add); // ƒ add(x, y)console.dir(sub); // undefined// 함수 호출console.log(add(2, 5)); // 7console.log(sub(2, 5)); // TypeError: sub is not a function// 함수 선언문function add(x, y) { return x + y;}// 함수 표현식var sub = function (x, y) { return x - y;}; 함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다. 그러나 함수 표현식으로 정의한 함수는 함수 표현식 이전에 호출할 수 없다. 이는 함수 선언문으로 정의한 함수와 함수 표현식으로 정의한 함수의 생성 시점이 다르기 때문이다. 모든 선언문이 그러하듯 함수 선언문도 다른 코드가 한줄씩 순차적으로 실행되는 시점, 즉 런타임 이전에 자바스크립트 엔진에 의해 먼저 실행된다. 다시 말해, 함수 선언문으로 함수를 정의하면 런타임 이전에 함수 객체가 먼저 생성된다. 그리고 자바스크립트 엔진은 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고 생성된 함수 객체를 할당한다. 즉, 코드가 한줄씩 순차적으로 실행되기 시자하는 런타임에는 이미 함수 객체가 생성되어 있고 함수 이름과 동일한 식별자에 할당까지 완료된 상태다.따라서 함수 선어문 이전에 함수를 참조할 수 있으며 호출할 수도 있다. 이런 자바스크립트 고유의 특징을 함수 호이스팅이라 한다. 함수 호이스팅과 변수 호이스팅은 미묘한 차이가 있으므로 주의하기 바란다. var 키워드로 사용한 변수 선언문과 함수 선언문은 모두 런타임 이전에 자바스크립트 엔진에 의해 먼저 실행되어 식별자를 생성한다는 점에서 동일하다. 하지만 var 키워드로 선언된 변수는 undefined로 초기화되고, 함수 선언문을 통해 암묵적으로 생성된 식별자는 함수 객체로 초기화된다. 따라서 var 키워드로 사용한 변수 선언문 이전에 변수를 참조하면 변수 호이스팅에 의해 undefined로 평가되지만 함수 선언문으로 정의한 함수를 함수 선언문 이전에 호출하면 함수 호이스팅에 의해 호출이 가능하다. 변수 선언은 런타임 이전에 실행되어 undefined로 초기화되지만, 변수 할당문의 값은 할당문이 실행되는 시점, 즉 런타임에 평가되므로 함수 표현식의 함수 리터럴도 할당문이 실행되는 시점에 평가되어 함수 객체가 된다. 따라서 함수 표현식으로 함수를 정의하면 함수 호이스팅이 발생하는 것이 아니라 변수 호이스팅이 발생한다.함수 표현식 이전에 함수를 참조하면 undefined으로 평가된다. 따라서 이때 함수를 호출하면 undefined를 호출하는 것과 마찬가지이므로 타입 에러(TypeError)가 발생한다. 따라서 함수 표현식으로 정의한 함수는 반드시 함수 표현식 이후에 참조 또는 호출하여야 한다. 4.4 Function 생성자 함수자바스크립트가 기본 제공하는 빌트인 함수인 Function 생성자 함수에 매개변수 목록과 함수 몸체를 문자열로 전달하면서 new 연산자와 함께 호출하면 함수 객체를 생성하여 반환한다. (사실 new 연산자 없이 호출하여도 결과는 동일하다.) Function 생성자 함수로 지금까지 살펴본 add 함수를 생성해 봅시다. 123var add = new Function('x', 'y', 'return x + y');console.log(add(2, 5)); // 7 Function 생성자 함수로 함수를 생성하는 방식은 일반적이지 않으며 바람직하지도 않다. 123var add = new Function('x', 'y', 'return x + y');console.log(add(2, 5)); // 7 4.5. 화살표 함수ES6에서 새롭게 도입된 화살표 함수(Arrow function)는 function 키워드 대신 화살표(=&gt;, Fat arrow)를 사용하여 보다 간략한 방법으로 함수를 선언할 수 있다. 화살표 함수는 항상 익명 함수로 정의한다. 1234// 화살표 함수const add = (x, y) =&gt; x + y;console.log(add(2, 5)); // 7 화살표 함수는 생성자 함수로 사용할 수 없으며 기존의 함수와 this 바인딩 방식이 다르고, prototype 프로퍼티가 없으며 arguments 객체를 생성하지 않는다. 5. 함수 호출함수는 함수를 가리키는 식별자와 한 쌍의 소괄호인 함수 호출 연산자로 호출한다.함수 호출 연산자 내에는 0개 이상의 인수(argument)를 쉼표로 구분하여 나열한다. 함수를 호출하면 현재의 실행 흐름을 중단하고 호출된 함수로 컨트롤을 넘긴다. 5.1. 매개변수와 인수함수의 실행을 위해 필요한 값을 함수 외부에서 함수 내부로 전달할 필요가 있는 경우, 매개변수(parameter, 인자)를 통해 인수(argument)를 전달한다. 인수는 값으로 평가될 수 있는 표현식이어야 하며 인수는 함수를 호출할 때 지정하며 개수와 타입에 제한이 없다. 12345678// 함수 선언문function add(x, y) { return x + y;}// 함수 호출// 인수 1과 2는 매개변수 x와 y에 순서대로 할당되고 함수 몸체의 문들이 실행된다.var result = add(1, 2); 매개변수는 함수를 정의할 때 선언하며 함수 몸체 내부에서 변수와 동일하게 취급된다. 즉, 함수가 호출되면 함수 몸체 내에서 암묵적으로 매개변수가 생성되고 일반 변수와 마찬가지로 undefined로 초기화된 이후 인수가 순서대로 할당된다. 함수가 호출될 때마다 매개변수는 이와 같은 단계를 거친다. 매개변수는 함수 몸체 내부에서만 참조할 수 있고 함수 몸체 외부에서는 참조할 수 없다.즉, 매개변수의 스코프(유효 범위)는 함수 내부이다. 123456789function add(x, y) { console.log(x, y); // 2 5 return x + y;}add(2, 5);// 함수 add의 매개변수 x, y는 함수 몸체 내부에서만 참조할 수 있다.console.log(x, y); // ReferenceError: x is not defined; 함수는 매개변수의 개수와 인수의 개수를 체크하지 않는다. 즉, 함수를 호출할 때 매개변수의 개수만큼 인수를 전달하는 것이 일반적이지만 그렇지 않은 경우에도 에러가 발생하지는 않는다. 인수가 부족하여 인수가 할당되지 않은 매개변수의 값은 undefined이다. 12345function add(x, y) { return x + y;}console.log(add(2)); // NaN 위 예제의 매개변수 x에는 인수 2가 전달되지만, 매개변수 y에는 전달할 인수가 없다. 따라서 매개변수 y는 undefined가 초기화된 상태 그대로이다. 따라서 함수 몸체의 문 x + y는 2 + undefined와 같으므로 NaN이 반환된다. 인수가 매개변수보다 더 많은 경우, 초과되는 인수는 무시된다. 12345function add(x, y) { return x + y;}console.log(add(2, 5, 10)); // 7 사실 초과된 인수가 그냥 버려지는 것은 아니다. 모든 인수는 암묵적으로 arguments 객체의 프로퍼티로 보관된다. 12345678function add(x, y) { console.log(arguments); // Arguments(3) [2, 5, 10, callee: ƒ, Symbol(Symbol.iterator): ƒ] return x + y;}add(2, 5, 10); arguments 객체는 매개변수 개수를 확정할 수 없는 가변 인자 함수를 구현할 때 유용하게 사용된다. 5.2. 인수 확인아래 예제를 살펴보자. 123function add(x, y) { return x + y;} 위 함수를 정의한 개발자의 의도는 아마도 2개의 숫자 타입 인수를 전달받아 그 합계를 반환하려는 것으로 추측된다. 하지만 코드상으로는 어떤 타입의 인수를 전달하여야 하는지, 어떤 타입의 값을 반환해야 하는지 명확하지 않다. 따라서 위 함수는 아래와 같이 호출될 수 있다. 123456function add(x, y) { return x + y;}console.log(add(2)); // NaNconsole.log(add('a', 'b')); // 'ab' 위 코드는 자바스크립트 문법상 어떠한 문제도 없으므로 자바스크립트 엔진은 아무런 이의 제기없이 위 코드를 실행할 것이다. 이러한 상황이 발생한 이유는 아래와 같다. 자바스크립트 함수는 매개변수와 인수의 개수가 일치하는지 확인하지 않는다. 자바스크립트 함수는 매개변수의 타입을 사전에 지정할 수 없다. 따라서 자바스크립트의 경우, 함수를 정의할 때 적절한 인수가 전달되었는지 확인이 필요하다. 12345678910function add(x, y) { if (typeof x !== 'number' || typeof y !== 'number') { throw new TypeError('매개변수에 숫자 타입이 아닌 값이 할당되었습니다.'); } return x + y;}console.log(add(2)); // TypeError: 매개변수에 숫자 타입이 아닌 값이 할당되었습니다.console.log(add('a', 'b')); // TypeError: 매개변수에 숫자 타입이 아닌 값이 할당되었습니다. 5.3. 매개변수의 최대 개수ECMAScript 사양에서는 매개변수의 최대 개수에 명시적으로 제한하고 있지 않다.매개변수는 순서에 의미가 있다. 따라서 매개변수가 많아지면 함수를 호출할 때 전달해야 할 인수의 순서를 고려해야 한다. 이는 함수의 사용 방법을 어렵게 만들고 실수를 발생시킬 가능성을 높인다.따라서 매개변수는 최대 3개 이상을 넘지 않는 것을 권장한다. 객체를 인수로 사용하는 경우, 프로퍼티 키만 정확히 지정하면 매개변수의 순서를 신경쓰지 않아도 된다. 또한 명시적으로 값의 의미를 설명하는 프로퍼티 키를 사용하게 되므로 코드의 가독성도 좋아지고 실수도 줄어드는 효과가 있다.하지만 주의할 것은 함수 외부에서 함수 내부로 전달한 객체를 함수 내부에서 변경하면 함수 외부의 객체가 변경되는 부수 효과(side-effect)가 발생한다는 것이다. 5.4. 반환문함수는 return 키워드와 반환값으로 이루어진 반환문을 사용하여 실행 결과를 함수 외부로 반환(return)할 수 있다. 12345678function multiply(x, y) { return x * y; // 값의 반환}// 함수는 반환값으로 평가된다.var result = multiply(3, 5);console.log(result); // 15 multiply 함수는 두개의 인수를 전달받아서 곱한 결과값을 반환한다. 반환값은 return 키워드를 사용해 반환한다. 함수는 return 키워드를 사용해 자바스크립트에서 사용 가능한 모든 값을 반환할 수 있다. “5.3. 표현식”에서 살펴보았듯이 함수 호출은 표현식이다. 이때 함수 호출 표현식은 return 키워드가 반환한 값, 즉 반환값으로 평가된다. 반환문은 두가지 역할을 한다. 첫번째, 반환문은 함수의 실행을 중단하고 함수 몸체를 빠져나간다. 따라서 반환문 이후에 다른 문이 존재하면 그 문은 실행되지 않고 무시된다. 1234567function multiply(x, y) { return x * y; // 반환문 // 반환문 이후에 다른 문이 존재하면 그 문은 실행되지 않고 무시된다. console.log('실행되지 않는다.');}console.log(multiply(3, 5)); // 15 두번째, 반환문은 return 키워드 뒤에 지정한 값을 반환한다. return 키워드 뒤에 반환값을 명시적으로 지정하지 않으면 undefined가 반환된다. 123456function foo () { // return 키워드 뒤에 반환값을 명시적으로 지정하지 않으면 undefined가 반환된다. return;}console.log(foo()); // undefined 함수는 반환문을 생략할 수 있다. 이때 함수는 함수 몸체의 마지막 문까지 실행한 후 암묵적으로 undefined를 반환한다. 12345function foo () { // 반환문을 생략하면 암묵적으로 undefined가 반환된다.}console.log(foo()); // undefined return 키워드와 반환값 사이에 줄바꿈이 있으면 의도치 않은 결과가 발생할 수 있다. 1234567function multiply(x, y) { // return 키워드와 반환값 사이에 줄바꿈이 있으면 return // 세미콜론 자동 삽입 기능(ASI)에 의해 세미콜론이 추가된다. x * y; // 무시된다.}console.log(multiply(3, 5)); // undefined 6. 참조에 의한 전달과 외부 상태의 변경원시 값은 값에 의한 전달(Pass by value), 객체는 참조에 의한 전달(Pass by reference) 방식으로 동작한다. 매개변수도 함수 몸체 내부에서 변수와 동일하게 취급되므로 매개변수 또한 타입에 따라 값에 의한 전달, 참조에 의한 전달 방식을 그대로 따른다. 123456789101112131415161718192021// 매개변수 primitive는 원시값을 전달받고, 매개변수 obj는 객체를 전달받는다.function changeVal(primitive, obj) { primitive += 100; obj.name = 'Kim';} // 외부 상태 var num = 100; var person = { name: 'Lee' }; console.log(num); // 100 console.log(person); // {name: 'Lee'} // 원시값은 값 자체가 복사되어 전달되고 객체는 참조값이 복사되어 전달된다. changeVal(num, person); // 원시 값은 원본이 훼손되지 않는다. console.log(num); // 100 // 객체는 원본이 훼손된다. console.log(person); // {name: 'Kim'} 원시 타입 인수는 값 자체가 복사되어 매개변수에 전달되기 때문에 함수 몸체에서 그 값을 변경(재할당을 통한 교체)하여도 원본은 훼손되지 않는다. 다시 말해 외부 상태, 즉 함수 외부에서 함수 몸체 내부로 전달한 원시값의 원본을 변경하는 어떠한 부수 효과(side-effect)도 발생하지 않는다. 객체 타입 인수는 참조값이 복사되어 매개변수에 전달되기 때문에 함수 몸체에서 참조값을 통해 참조한 객체를 변경할 경우 원본이 훼손된다. 다시 말해 외부 상태, 즉 함수 외부에서 함수 몸체 내부로 전달한 참조값에 의해 원본 객체가 변경되는 부수 효과가 발생한다. 객체의 변경을 추적하려면 Observer 패턴등을 통해 객체를 참조를 공유하는 모든 이들에게 변경 사실을 통지하고 이에 대처하는 추가 대응이 필요하다. 이러한 문제의 해결 방법 중 하나는 객체를 불변 객체로 만들어 사용하는 것이다.객체의 복사본을 새롭게 생성하는 비용은 들지만 객체를 마치 원시 값처럼 변경 불가능한 값으로 동작하게 만드는 것이다. 이를 통해 객체의 상태 변경을 원천봉쇄하고 객체의 상태 변경이 필요한 경우에는 참조가 아닌 객체의 방어적 복사(defensive copy)를 통해 원본 객체를 완전히 복제, 즉 깊은 복사(Deep copy)(깊은 복사에 대해서는 Deep copying in JavaScript를 참고합시다.)를 통해 새로운 객체를 생성하여 재할당을 통해 교체한다. 이를 통해 외부 상태가 변경되는 부수 효과를 없앨 수 있다. 외부 상태를 변경하지 않고 의존하지도 않는 함수를 순수 함수라 한다. 순수 함수를 통해 부수 효과(Side effect)를 최대한 억제하여 오류를 피하고 프로그램의 안정성을 높이려는 프로그래밍 패러다임을 함수형 프로그래밍이라 한다. 7. 다양한 함수의 형태 7.1. 즉시실행함수함수 정의와 동시에 즉시 호출되는 함수를 즉시 실행 함수(IIFE, Immediately Invoked Function Expression)라고 한다. 즉시 실행 함수는 단 한번만 호출되며 다시 호출할 수는 없다. 따라서 즉시 실행 함수는 함수 이름이 없는 익명 함수를 사용하는 것이 일반적이다. 1234567// 익명 즉시 실행 함수(function () { var a = 3; var b = 5; return a * b;}()); 함수 이름이 있는 기명 즉시 실행 함수도 사용할 수 있다. 하지만 그룹 연산자(…) 내의 기명 함수는 함수 선언문이 아니라 함수 리터럴로 평가되며 함수 이름은 함수 몸체에서만 참조할 수 있는 식별자이므로 즉시 실행 함수를 다시 호출할 수는 없다. 123456789// 기명 즉시 실행 함수(function foo() { var a = 3; var b = 5; return a * b;}());foo(); // ReferenceError: foo is not defined 즉시 실행 함수는 반드시 그룹 연산자 (…)로 감싸 주어야 한다. 그렇지 않으면 아래와 같이 에러가 발생한다. 123function () { // SyntaxError: Function statements require a function name // ...}(); 위 예제에서 에러가 발생하는 이유는 함수 정의가 함수 선언문의 형식에 맞지 않기 때문이다. 함수 선언문은 함수 이름을 생략할 수 없다. 그렇다면 기명 함수를 정의하여 그룹 연산자 없이 즉시 호출해보자. 123function foo() { // ...}(); // SyntaxError: Unexpected token ')' 위 예제에서도 에러가 발생한다. 그 이유는 자바스크립트 엔진이 암묵적으로 수행하는 세미콜론 자동 삽입 기능(ASI, automatic semicolon insertion)에 의해 함수 선언문이 끝나는 위치, 즉 함수 코드 블록의 닫는 중괄호 뒤에 “;”이 암묵적으로 추가되기 때문이다. 1function foo() {}(); // =&gt; function foo() {};(); 따라서 함수 선언문 뒤의 그룹 연산자에 피연산자가 없기 때문에 에러가 발생한다. 1(); // SyntaxError: Unexpected token ) 그룹 연산자의 피연산자는 값으로 평가되므로 기명 또는 무명 함수를 그룹 연산자로 감싸면 함수 리터럴로 평가되어 함수 객체가 된다. 12console.log(typeof (function f(){})); // functionconsole.log(typeof (function (){})); // function 즉, 그룹 연산자로 함수를 묶은 이유는 먼저 함수를 평가하여 함수 객체를 생성하기 위함이다. 따라서 먼저 함수를 평가하여 함수 객체를 생성할 수 있다면 아래와 같이 그룹 연산자 이외의 연산자를 사용할 수도 있다. 가장 일반적인 방법은 첫번째 방식이다. 이 책에서는 첫번째 방식을 사용하도록 하겠다. 123456789101112131415(function () { // ...}());(function () { // ...})();!function () { // ...}();+function () { // ...}(); 즉시 실행 함수도 일반 함수처럼 값을 반환할 수 있고 인수를 전달할 수도 있다. 12345678910111213141516// 즉시 실행 함수도 일반 함수처럼 값을 반환할 수 있다.var res = (function () { var a = 3; var b = 5; return a * b;}());console.log(res); // 15//즉시 실행 함수에도 일반 함수처럼 인수를 전달할 수 있다.res = (function (a, b) { return a * b;}(3, 5));console.log(res); // 15 7.2. 재귀 함수함수가 자기 자신을 호출하는 것을 재귀 호출이라 한다. 재귀 함수는 자기 자신을 호출하는 행위, 즉 재귀 호출을 수행하는 함수를 말한다. 재귀 호출을 통해 반복 연산을 간단하게 구현할 수 있다. 123456789101112131415// 팩토리얼(계승)은 1부터 자신까지의 모든 양의 정수의 곱이다.// n! = 1 * 2 * ... * (n-1) * nfunction factorial(n) { // 탈출 조건: n이 1 이하일 때 재귀 호출을 멈춘다. if (n &lt;= 1) return 1; // 재귀 호출 return n * factorial(n - 1);}console.log(factorial(0)); // 0! = 1console.log(factorial(1)); // 1! = 1console.log(factorial(2)); // 2! = 2 * 1 = 2console.log(factorial(3)); // 3! = 3 * 2 * 1 = 6console.log(factorial(4)); // 4! = 4 * 3 * 1 * 1 = 24console.log(factorial(5)); // 5! = 5 * 4 * 3 * 2 * 1 = 120 재귀 함수는 자신을 무한 재귀 호출한다. 따라서 재귀 함수 내에는 재귀 호출을 멈출 수 있는 탈출 조건을 반드시 만들어야 한다. 위 예제의 경우 인수가 1 이하일 때 재귀 호출을 멈춘다. 탈출 조건이 없는 경우, 함수가 무한 호출되어 stack overflow 에러가 발생한다. factorial 함수 내부에서 자기 자신을 호출할 때 사용한 식별자 factorial은 함수 이름이다. 함수 이름은 함수 몸체 내부에서만 유효하다. 따라서 함수 내부에서는 함수 이름을 사용하여 자기 자신을 호출할 수 있다. 함수 표현식으로 정의한 함수 내부에서는 함수 이름은 물론 함수를 가리키는 식별자로도 자기 자신을 재귀 호출할 수 있다. 단, 함수 호출은 반드시 함수를 가리키는 식별자로 해야 한다. 1234567891011121314// 함수 표현식var factorial = function foo(n) { // 탈출 조건: n이 1 이하일 떄 재귀 호출을 멈춘다. if (n &lt; 1) return 1; // 함수를 가리키는 식별자로 자기 자신을 재귀 호출 return n * factorial( n - 1 ); // 함수 이름으로 자기 자신을 재귀 호출할 수도 있다. // console.log(factorial === foo); // true // return n * foo( n - 1 );}console.log(factorial(5)); // 5! = 5 * 4 * 3 * 2 * 1 = 120 대부분의 재귀함수는 for나 while문으로 구현할 수 있다.재귀 함수는 반복 연산을 간단히 구현할 수 있다는 장점이 있지만 무한 반복에 빠질 수 있고, 이로 인해 stack overflow 에러를 발생시킬 수 있으므로 주의해서 사용해야 한다. 따라서 재귀 함수는 반복문을 사용하는 것 보다 재귀 함수를 사용하는 것이 보다 직관적으로 이해하기 쉬울 때에만 한정적으로 사용하는 것이 바람직하다. 7.3. 중첩 함수함수 내부에 정의된 함수를 중첩 함수(nested function) 또는 내부 함수(inner function)라 한다. 그리고 중첩 함수를 포함하는 함수는 외부 함수(outer function)라 부른다. 일반적으로 중첩 함수는 자신을 포함하는 외부 함수를 돕는 헬퍼 함수(helper function)의 역할을 한다. 1234567891011121314function outer() { var x = 1; // 중첩 함수 function inner() { var y = 2; // 외부 함수의 변수를 참조할 수 있다. console.log(x + y); // 3 } inner();}outer(); ES6부터 함수 정의는 문이 위치할 수 있는 문맥이라면 어디든지 가능하다. 함수 선언문의 경우, ES6 이전에는 코드의 최상위 또는 다른 함수 내부에서만 정의할 수 있었으나 ES6부터는 if 문이나 for 문 등의 코드 블록 내에서도 정의할 수 있다. 단, 호이스팅으로 인해 혼란이 발생할 수 있으므로 if 문이나 for 문 등의 코드 블록에서 함수 선언문을 통해 함수를 정의하는 것은 바람직하지 않다. 중첩 함수는 스코프와 클로저에 깊은 관련이 있다. 이에 대해서는 나중에 자세히 살펴보도록 하자. 7.4. 콜백 함수어떤 일을 반복 수행하는 repeat 함수를 정의해 보자. 12345678910111213141516171819// n만큼 어떤 일을 반복한다function repeat(n) { // i를 출력한다. for (var i = 0; i &lt; n; i++) { console.log(i); }} repeat(5); // 0 1 2 3 4// n만큼 어떤 일을 반복한다function repeat2(n) { for (var i = 0; i &lt; n; i++) { // i가 홀수일 때만 출력한다. if (i % 2) console.log(i); }}repeat2(5); // 1 3 위 repeat 함수는 경우에 따라 변경되는 일을 함수 f로 추상화하였고 이를 외부에서 전달받는다. 자바스크립트의 함수는 일급 객체이므로 함수의 매개변수를 통해 함수를 전달할 수 있다. repeat 함수는 더 이상 내부 로직에 강력히 의존하지 않고 외부에서 로직의 일부분을 함수로 전달받아 수행하므로 보다 유연한 구조를 갖게 되었다. 이처럼 함수의 매개변수를 통해 전달되는 함수를 콜백 함수(Callback function)라고 하며, 콜백 함수를 매개변수를 통해 전달받은 함수를 고차 함수(Higher-Order Function, HOF)라고 한다. 중첩 함수가 외부 함수를 돕는 헬퍼 함수의 역할을 하는 것처럼 콜백 함수도 고차 함수에 전달되어 헬퍼 함수의 역할을 한다. 단, 중첩 함수는 고정되어 있어서 교체하기 곤란하지만 콜백 함수는 함수 외부에서 고차 함수 내부로 주입하기 때문에 자유롭게 교체할 수 있다는 장점이 있다. 즉, 고차 함수는 콜백 함수를 자신의 일부분으로 합성한다. 고차 함수는 매개변수를 통해 전달받은 콜백 함수의 호출 시점을 결정하여 호출한다. 다시 말해, 콜백 함수는 고차 함수에 의해 호출되며 이때 필요에 따라 인수도 전달될 수 있다. 따라서 고차 함수에 콜백 함수를 전달할 때, 콜백 함수를 호출하지 않고 함수 자체를 전달해야 한다. 콜백 함수가 고차 함수 내부에만 호출된다면 콜백 함수를 익명 함수 리터럴로 정의하면서 곧바로 고차 함수에 전달하는 것이 일반적이다. 12345// 익명 함수 리터럴을 콜백 함수로 매개변수에 전달한다.// 익명 함수 리터럴은 repeat 함수를 호출할 때마다 평가되어 함수 객체를 생성한다.repeat(5, function (i) { if (i % 2) console.log(i);}); // 1 3 이때 콜백 함수로서 전달된 함수 리터럴은 고차 함수가 호출될 때마다 평가되어 함수 객체를 생성한다. 따라서 콜백 함수를 다른 곳에서도 호출할 필요가 있거나, 콜백 함수를 전달받는 함수가 자주 호출된다면 함수 외부에서 콜백 함수를 정의한 후 함수 참조를 고차 함수에 전달하는 편이 효율적이다. 1234567// logOdds 함수는 단 한번만 생성된다.var logOdds = function (i) { if (i % 2) console.log(i);};// 고차 함수에 함수 참조를 전달한다.repeat(5, logOdds); // 1 3 위 예제의 logOdds 함수는 단 한번만 생성된다. 하지만 콜백 함수를 익명 함수 리터럴로 정의하면서 곧바로 고차 함수에 전달하면 고차 함수가 호출될 때마다 콜백 함수가 생성된다. 콜백 함수는 일반적으로 비동기 처리(이벤트 처리, Ajax 통신, Timer 함수 등)을 위해 사용하는 중요한 패턴이다. 1234567891011// 콜백 함수를 사용한 이벤트 처리// myButton 버튼을 클릭하면 콜백 함수를 실행한다.document.getElementById('myButton').addEventListener('click', function () { console.log('button clicked!');});// 콜백 함수를 사용한 비동기 처리// 1초 후에 메시지를 출력한다.setTimeout(function () { console.log('1초 경과');}, 1000); 콜백 함수는 비동기 처리 뿐 만 아니라 배열 고차 함수에서도 사용된다. 자바스크립트에서 배열은 사용 빈도가 매우 높은 자료 구조이고 배열을 다룰 때 배열 고차 함수는 매우 중요하다. 이에 대해서는 “27.9. 배열 고차 함수”에서 자세히 살펴볼 것이다. 12345678910111213// 콜백 함수를 사용하는 고차 함수 mapvar res = [1, 2, 3].map(function (item) { return item * 2;});console.log(res); // [2, 4, 6]// 콜백 함수를 사용하는 고차 함수 filterres = [1, 2, 3].filter(function (item) { return item % 2;});console.log(res); // [1, 3] 7.5. 순수 함수와 비순수 함수순수 함수는 동일한 인수가 전달되면 언제나 동일한 값을 반환하는 함수를 말한다. 즉, 순수 함수는 어떤 외부 상태에도 의존하지 않고 오직 매개변수를 통해 함수 내부로 전달된 인수에게만 의존하여 반환값을 만든다.순수 함수의 또 하나의 특징은 함수의 외부 상태를 변경하지 않는다는 것이다. 1234567891011121314var conut = 0; // 현재 카운트를 나타내는 상태// 외부 상태에 의존하지 않으며 변경하지도 않는 순수 함수// 순수 함수는 동일한 인수가 전달되면 언제나 동일한 값을 반환한다.function increase(n) { return ++n;}// 순수 함수가 반환한 결과값을 변수에 재할당하여 상태를 변경conut = increase(conut);console.log(conut); // 1conut = increase(conut);console.log(conut); // 2 반대로 함수의 외부 상태에 의존하여 외부 상태에 따라 반환값이 달라지는 함수를 비순수 함수라고 한다. 비순수 함수의 또 하나의 특징은 순수 함수와는 달리 함수의 외부 상태를 변경하는 부수 효과(side effect)가 있다는 것이다. 1234567891011121314var count = 0; // 현재 카운트를 나타내는 상태: increase 함수에 의해 변화한다.// 함수의 외부 상태에 의존하여 외부 상태에 따라 반환값이 달라지는 비순수 함수// 비순수 함수는 외부 상태를 변경하는 부수 효과(side effect)가 있다.function increase() { return ++count; // 외부 상태를 변경한다.}// 비순수 함수는 외부 상태(count)를 변경하므로 상태 변화를 추적하기 어려워진다.increase();console.log(count); // 1increase();console.log(count); // 2 함수가 외부 상태를 변경하면 상태 변화를 추적하기 어려워진다. 따라서 함수 외부 상태의 변경을 지양하는 순수 함수를 사용하는 것이 좋다. 위 예제의 increase 함수와 같은 비순수 함수는 코드의 복잡성을 증가시킨다. 비순수 함수를 최대한 줄이는 것은 부수 효과를 최대한 억제하는 것과 같다. 함수형 프로그래밍은 변수의 사용을 억제하여 상태 변경을 최대한 억제하고 순수 함수와 보조 함수의 조합을 통해 로직 내에 존재하는 조건문과 반복문을 제거하여 복잡성을 해결하려는 프로그래밍 패러다임이다. 변수 값은 누군가에 의해 언제든지 변경될 수 있고, 조건문이나 반복문은 로직의 흐름을 이해하기 어렵게 만들어 가독성을 해치고 오류 발생의 근본적 원인이 될 수 있기 때문이다. 함수형 프로그래밍은 결국 순수 함수를 통해 부수 효과(Side effect)를 최대한 억제하여 오류를 피하고 프로그램의 안정성을 높이려는 노력의 한 방법이라고 할 수 있다. 이 책에서는 함수형 프로그래밍을 다루지는 않는다. 하지만 자바스크립트는 멀티 패러다임 언어이며 객체지향 프로그래밍 뿐만 아니라 부분적으로 함수형 프로그래밍을 적극적으로 활용하고 있다. 먼저 자바스크립트의 기본 개념과 동작 원리를 이해하고 함수형 프로그래밍에 대해 추가적인 학습을 권장한다.","link":"/2020/02/function/"},{"title":"데이터 타입 | javaScript","text":"데이터 타입(Data type. 줄여서 타입이라고도 부른다)은 값의 종류를 말한다. 자바스크립트의 모든 값은 데이터 타입을 갖는다. 자바스크립트(ES6)는 7개의 데이터 타입을 제공한다. 7개의 데이터 타입은 원시 타입(primitive type)과 객체 타입(object/reference type)으로 분류할 수 있다. 원시 타입(primitive type) 숫자(number) 타입: 숫자. 정수와 실수 구분없이 하나의 숫자 타입만 존재 문자열(string) 타입: 문자열 불리언(boolean) 타입: 논리적 참(true)과 거짓(false) undefined 타입: var 키워드로 선언된 변수에 암묵적으로 할당되는 값 null 타입: 값이 없다는 것을 의도적으로 명시할 때 사용하는 값 Symbol 타입: ES6에서 새롭게 추가된 7번째 타입 객체 타입 (object/reference type): 객체, 함수, 배열 등 예를 들어 숫자(number) 타입의 값 1과 문자열(string) 타입의 값 ‘1’은 비슷하게 보이지만 전혀 다른 값이다. 숫자 타입의 값 1과 문자열 타입의 값 ‘1’은 값을 생성한 목적과 용도가 다르다. 숫자 타입의 값은 주로 산술 연산을 위해 생성하지만 문자열 타입의 값은 주로 텍스트를 화면에 출력하기 위해 생성한다. 또한 확보해야 할 메모리 공간의 크기도 다르고 메모리에 저장되는 2진수도 다르며 읽어 들여 해석하는 방식도 다르다. 이처럼 개발자는 명확한 의도를 가지고 타입을 구별하여 값을 생성할 것이고 자바스크립트 엔진은 타입을 구별하여 값을 취급할 것이다. 자바스크립트가 제공하는 데이터 타입의 특징에 대해 살펴보도록 하자. 1. 숫자 타입C나 Java의 경우, 정수(소숫점 이하가 없는 숫자)와 실수(소숫점 이하가 있는 숫자)를 구분하여 int, long, float, double 등과 같은 다양한 숫자 타입이 존재한다. 하지만 자바스크립트는 독특하게 하나의 숫자 타입만 존재한다. ECMAScript 사양에 따르면 숫자 타입의 값은 배정밀도 64비트 부동소수점 형식(double-precision 64-bit floating-point format)을 따른다. 즉, 모든 수를 실수로 처리하며 정수만을 표현하기 위한 데이터 타입(integer type)이 별도로 존재하지 않는다. 1234// 모두 숫자 타입이다.var integer = 10; // 정수var double = 10.12; // 실수var negative = -20; // 음의 정수 정수, 실수, 2진수, 8진수, 16진수 리터럴은 모두 메모리에 배정밀도 64비트 부동소수점 형식의 2진수로 저장된다. 자바스크립트는 2진수, 8진수, 16진수를 표현하기 위한 데이터 타입을 제공하지 않기 때문에 이들 값을 참조하면 모두 10진수로 해석된다. 12345678910var binary = 0b01000001; // 2진수var octal = 0o101; // 8진수var hex = 0x41; // 16진수// 표기법만 다를 뿐 모두 같은 값이다.console.log(binary); // 65console.log(octal); // 65console.log(hex); // 65console.log(binary === octal); // trueconsole.log(octal === hex); // true 자바스크립트의 숫자 타입은 정수만을 위한 타입이 없고 모든 수를 실수로 처리한다고 했다. 정수로 표시된다 해도 사실은 실수다. 따라서 정수로 표시되는 수 끼리 나누더라도 실수가 나올 수 있다. 1234// 숫자 타입은 모두 실수로 처리된다.console.log(1 === 1.0); // trueconsole.log(4 / 2); // 2console.log(3 / 2); // 1.5 숫자 타입은 추가적으로 3가지 특별한 값들도 표현할 수 있다. Infinity : 양의 무한대 -Infinity : 음의 무한대 NaN : 산술 연산 불가(not-a-number) 1234// 숫자 타입의 3가지 특별한 값console.log(10 / 0); // Infinityconsole.log(10 / -0); // -Infinityconsole.log(1 * 'String'); // NaN 2. 문자열 타입문자열(string) 타입은 텍스트 데이터를 나타내는데 사용한다. 문자열은 0개 이상의 16bit 유니코드 문자(UTF-16) 들의 집합으로 전세계 대부분의 문자를 표현할 수 있다. 문자열은 작은 따옴표(‘’), 큰 따옴표(“”) 또는 백틱(``)으로 텍스트를 감싼다. 자바스크립트에서 가장 일반적인 표기법은 작은 따옴표를 사용하는 것이다. 12345678// 문자열 타입var string;string = '문자열'; // 작은 따옴표string = \"문자열\"; // 큰 따옴표string = `문자열`; // 백틱 (ES6)string = '작은 따옴표로 감싼 문자열 내의 \"큰 따옴표\"는 문자열로 인식된다.';string = \"큰 따옴표로 감싼 문자열 내의 '작은 따옴표'는 문자열로 인식된다.\"; 다른 타입의 값과는 달리 문자열을 따옴표로 감싸는 이유는 키워드나 식별자와 같은 토큰과 구분하기 위함이다. 만약 문자열을 따옴표로 감싸지 않으면 자바스크립트 엔진은 키워드나 식별자와 같은 토큰으로 인식한다. 12// 따옴표로 감싸지 않은 hello를 식별자로 인식한다.var string = hello; // ReferenceError: hello is not defined 그리고 만약 따옴표로 문자열을 감싸지 않는다면 스페이스와 같은 공백 문자도 포함시킬 수 없다. C나 Java와 같은 언어와는 다르게 자바스크립트의 문자열은 원시 타입이며 변경 불가능한 값 (immutable value)다. 이것은 문자열이 생성되면 그 문자열을 변경할 수 없다는 것을 의미한다. 이에 대해서는 “11.1.2. 문자열과 불변성”에서 살펴보기로 하자. 3.템플릿 리터럴ES6부터 템플릿 리터럴(Template literal)이라고 불리는 새로운 문자열 표기법이 도입되었다. 템플릿 리터럴은 멀티라인 문자열(Multi-line string), 표현식 삽입(Expression interpolation), 태그드 템플릿(Tagged template) 등 편리한 문자열 처리 기능을 제공한다. 템플릿 리터럴은 런타임에 일반 문자열로 변환되어 처리된다. 템플릿 리터럴은 일반 문자열과 비슷해 보이지만, 작은 따옴표(‘’) 또는 큰 따옴표(“”) 같은 일반적인 따옴표 대신 백틱(backtick) `를 사용한다. 12var template = `Template literal`;console.log(template); // Template literal 3.1. 멀티라인 문자열일반 문자열 내에서 줄바꿈은 허용되지 않는다. 123var str = 'Helloworld.';// SyntaxError: Invalid or unexpected token 3.2. 표현식 삽입문자열은 문자열 연산자 +를 사용해 연결할 수 있다. + 연산자는 피연산자 중 하나 이상이 문자열인 경우, 문자열 연결 연산자로 동작한다. 그 외의 경우는 덧셈 연산자로 동작한다. 123456var first = 'Ung-mo';var last = 'Lee';// ES5: 문자열 연결console.log('My name is ' + first + ' ' + last + '.');// My name is Ung-mo Lee. 템플릿 리터럴 내에서는 표현식 삽입(Expression interpolation)을 통해 간단히 문자열을 삽입할 수 있다. 이를 통해 문자열 연산자보다 가독성 좋고 간편하게 문자열을 조합할 수 있다. 123456var first = 'Ung-mo';var last = 'Lee';// ES6: 표현식 삽입console.log(`My name is ${first} ${last}.`);// My name is Ung-mo Lee. 표현식 삽입은 ${ }으로 표현식을 감싼다. 이때 표현식의 평가 결과가 문자열이 아니더라도 문자열로 강제 타입 변환되어 삽입된다. 1console.log(`1 + 2 = ${1 + 2}`); // 1 + 2 = 3 표현식 삽입은 반드시 템플릿 리터럴 내에서 사용해야 한다.템플릿 리터럴이 아닌 일반 문자열에서 표현식 삽입은 문자열 취급을 받는다. 1console.log('1 + 2 = ${1 + 2}'); // 1 + 2 = ${1 + 2} 4. 불리언 타입불리언(boolean) 타입의 값은 논리적 참, 거짓을 나타내는 true와 false 뿐이다. 12345var foo = true;console.log(foo); // truefoo = false;console.log(foo); // false 불리언 타입의 값은 참과 거짓으로 구분되는 조건에 의해 프로그램의 흐름을 제어하는 조건문에서 자주 사용한다. 이에 대해서는 “8.2. 조건문”에서 살펴보기로 하자. 5. undefined 타입undefined 타입의 값은 undefined가 유일하다. var 키워드로 선언한 변수는 undefined로 초기화된다. 다시 말해, 변수 선언에 의해 확보된 메모리 공간을 처음 할당이 이루어질 때까지 빈 상태(대부분 비어있지 않고 쓰레기 값(Garbage value)이 들어 있다)로 내버려두지 않고 자바스크립트 엔진이 undefined로 초기한다. 따라서 선언 이후 값을 할당하지 않은 변수에 접근하면 undefined가 반환된다. 12var foo;console.log(foo); // undefined 이처럼 undefined는 개발자가 의도적으로 할당하기 위한 값이 아니라 자바스크립트 엔진이 변수를 초기화할 때 사용하는 값이다. 변수를 참조했을 때 undefined가 반환된다면 참조한 변수가 선언 이후 값이 할당된 적인 없는 변수라는 것을 개발자는 간파할 수 있다. 자바스크립트 엔진이 변수 초기화에 사용하는 undefined를 개발자가 의도적으로 변수에 할당한다면 undefined의 본래의 취지와 어긋날 뿐더러 혼란을 줄 수 있으므로 권장하지 않는다. 그렇다면 변수에 값이 없다는 것을 명시하고 싶은 경우 어떻게 하면 좋을까? 그런 경우는 undefined를 할당하는 것이 아니라 null을 할당한다. 선언(Declaration)과 정의(Definition) undefined를 직역하면 “정의되지 않은”이다. 일반적으로 정의란 개념은 어떤 대상을 명확하게 규정하는 것을 의미한다. 자바스크립트의 undefined에서 말하는 정의란 변수에 값을 할당하여 변수의 실체를 명확히 하는 것을 말한다. 다른 프로그래밍 언어에서는 선언과 정의를 엄격하게 구분하여 사용하는 경우가 있다. 예를 들어 C에서 선언과 정의는 “실제로 메모리 주소를 할당하는가”로 구분한다. 단순히 컴파일러에게 식별자의 존재 만을 알리는 것은 선언이고 실제로 컴파일러에게 변수를 생성하도록 하여 식별자와 메모리 주소가 연결되면 정의로 구분한다. 자바스크립트의 경우, 변수를 선언하면 정의가 이루어지기 때문에 선언과 정의의 구분이 모호하다. 자바스크립트에서 선언은 식별자가 생성되었지만 값이 아직 할당되지 않은 상태를 말한다. 자바스크립트에서 정의는 식별자가 생성되었고 값까지 할당되어 있는 상태를 의미한다.123456// 변수 선언. 내부적으로 undefined로 정의된다.var foo;// 변수 선언과 정의var bar = 1;// 함수 정의. 식별자가 암묵적으로 생성되고 함수 객체가 할당된다.function baz {} 6. null타입null 타입의 값은 null이 유일하다. 자바스크립트는 대소문자를 구별(case-sensitive)하므로 null은 Null, NULL등과 다르다. 프로그래밍 언어에서 null은 변수에 값이 없다는 것을 의도적으로 명시(의도적 부재 Intentional absence)할 때 사용한다. 변수에 null을 할당하는 것은 변수가 이전에 참조하던 값을 더이상 참조하지 않겠다는 의미이다. 이는 이전에 할당되어 있던 값에 대한 참조를 명시적으로 제거하는 것을 의미하며 자바스크립트 엔진은 누구도 참조하지 않는 메모리 공간에 대해 가비지 콜렉션을 수행할 것이다. 12345var foo = 'Lee';// 이전에 할당되어 있던 값에 대한 참조를 제거. 변수 foo는 더이상 'Lee'를 참조하지 않는다.// 유용해 보이지는 않는다. 변수의 스코프를 좁게 만들어 변수 자체를 재빨리 소멸시키는 편이 낳다.foo = null; 함수가 유효한 값을 반환할 수 없는 경우, 명시적으로 null을 반환하기도 한다. 예를 들어, HTML 요소를 검색해 반환하는 document.querySelector 메소드는 조건에 부합하는 HTML 요소를 검색할 수 없는 경우, 에러 대신 null을 반환한다. 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt; &lt;script&gt; var element = document.querySelector('.myClass'); // HTML 문서에 myClass 클래스를 갖는 요소가 없다면 null을 반환한다. console.log(element); // null &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 7. symbol 타입심볼(symbol)은 ES6에서 새롭게 추가된 7번째 타입으로 변경 불가능한 원시 타입의 값이다. 심볼은 주로 이름의 충돌 위험이 없는 객체의 유일한 프로퍼티 키(property key)를 만들기 위해 사용한다. 심볼 이외의 원시값은 리터럴을 통해 생성하지만 심볼은 Symbol 함수를 호출해 생성한다. 이때 생성된 심볼 값은 노출되지 않으며 다른 값과 절대 중복되지 않는 유일무이한 값이다. 12345678910// 심볼 값 생성var key = Symbol('key');console.log(typeof key); // symbol// 객체 생성var obj = {};// 심볼 key를 이름의 충돌 위험이 없는 유일한 프로퍼티 키로 사용한다.obj[key] = 'value';console.log(obj[key]); // value 8. 객체 타입자바스크립트의 데이터 타입은 원시 타입과 객체 타입으로 크게 분류한다고 했다. 그 이유는 무엇일까? 원시 타입과 객체 타입은 근본적으로 다르다는 의미일 것이다. 이에 대한 설명은 아직 객체에 대해 살펴보지 않았으므로 잠시 미루도록 하자. 중요한 것은 자바스크립트는 객체 기반의 언어이며 자바스크립트를 이루고 있는 거의 모든 것이 객체라는 것이다. 지금까지 살펴본 6가지의 데이터 타입 이외의 값은 모두 객체 타입이다. 9. 데이터 타입의 필요성데이터 타입은 왜 필요한 것일까? 데이터 타입의 필요성에 대해 살펴보도록 하자. 9.1. 데이터 타입에 의한 메모리 공간의 확보와 참조모든 값은 메모리에 저장하고 참조할 수 있어야 한다. 메모리에 값을 저장하기 위해서는 먼저 확보해야 할 메모리 공간의 크기를 알아야한다. 다시 말해 몇 byte의 메모리 공간을 사용해야 낭비와 손실없이 값을 저장할 수 있는지 알아야 한다. 예를 들어 아래와 같이 변수를 선언하고 숫자 값을 할당해 보자. 1var score = 100; 코드가 실행되면 컴퓨터는 숫자 값 100을 저장하기 위해 메모리 공간을 확보한 다음, 확보된 메모리에 숫자 값 100을 2진수로 저장한다. 이러한 처리를 하려면 숫자 값을 저장할 때 확보해야 할 메모리 공간의 크기를 알아야 한다. 자바스크립트 엔진은 데이터 타입, 즉 값의 종류에 따라 정해진 크기의 메모리 공간을 확보한다. 즉, 변수에 할당되는 값의 데이터 타입에 따라 확보해야 할 메모리 공간의 크기가 결정된다. 위 예제의 경우, 자바스크립트 엔진은 100을 숫자 타입의 값으로 해석하고 숫자 타입의 값 100을 저장하기 위해 8byte의 메모리 공간을 확보한다. 그리고 10진수 100을 2진수로 저장한다. 자바스크립트는 숫자 타입의 값을 생성할 때 배정밀도 64비트 부동소수점 포맷(double-precision 64-bit floating-point format)을 사용한다. 따라서 실제로 메모리에 저장되는 2진수 값은 위 그림과 다르다. 지금은 간단히 양의 정수로 저장된다고 생각하자. 데이터 타입에 따라 확보되는 메모리 공간의 크기 ECMAScript 사양은 문자열과 숫자 타입 이외의 데이터 타입의 크기를 명시적으로 규정하고 있지는 않다. 따라서 문자열과 숫자 타입을 제외하고 데이터 타입에 따라 확보되는 메모리 공간의 크기는 브라우저 제조사의 구현에 따라 다를 수 있다. 단, ECMAScript 사양에 숫자 타입은 배정밀도 64비트 부동소수점 포맷을 사용한다고 명시되어 있고, 배정밀도 64비트 부동소수점 포맷은 8byte로 숫자를 표현하므로 이 책에서는 숫자 값의 크기를 8byte로 설명하고 있다.이번에는 값을 참조하는 경우를 생각해보자. 식별자 score를 통해 숫자 타입의 값 100이 저장되어 있는 메모리 공간의 주소를 찾아갈 수 있다. 정확히 말하면 숫자 값 100이 저장되어 있는 메모리 공간의 선두 메모리 셀의 주소를 찾아갈 수 있다. 이때 값을 참조하려면 한번에 읽어 들여야 할 메모리 공간의 크기, 즉 메모리 셀의 개수(byte 수)를 알아야 한다. 변수 score의 경우, 저장되어 있는 값이 숫자 타입이므로 8byte 단위로 읽어 들이지 않으면 값이 훼손된다. 그렇다면 컴퓨터는 한번에 읽어 들여야 할 메모리 셀의 크기를 어떻게 알 수 있는 것일까? 변수 score에는 숫자 타입의 값이 할당되어 있으므로 자바스크립트 엔진은 변수 score를 숫자 타입으로 인식한다. 숫자 타입은 8byte 단위로 저장되어 있으므로 변수 score를 참조하면 8byte 단위로 메모리 공간에 저장된 값을 읽어 들인다. 9.2. 데이터 타입에 의한 값의 해석그런데 아직 문제가 남아 있다. 메모리에서 읽어 들인 2진수를 어떻게 해석해야 하는지에 대한 것이다. 모든 값은 데이터 타입을 갖으며 메모리에 2진수, 즉 비트(bit)의 나열로 저장된다. 메모리에 저장된 값은 데이터 타입에 따라 다르게 해석될 수 있다. 예를 들어, 메모리에 저장된 값 0100 0001를 숫자로 해석하면 65이지만 문자열로 해석하면 ‘A’이다. 123456// 2진수 01000001을 10진수 숫자로 해석하면 65이다.// parseInt는 문자열을 숫자로 변환한다.console.log(parseInt('01000001', 2)); // 65// 진수 01000001을 문자(Unicode)로 해석하면 'A'이다.// String.fromCharCode은 UTF-16 코드 유닛의 시퀀스로부터 문자열을 생성한다.console.log(String.fromCharCode(parseInt('01000001', 2))); // A 위에서 살펴본 예제의 변수 score에 할당된 값은 숫자 타입의 값이다. 따라서 변수 score를 참조하면 메모리 공간의 주소에서 읽어 들인 2진수를 숫자로 해석한다. 지금까지 살펴본 데이터 타입에 대해 정리해보자. 데이터 타입(Data type)은 값의 종류를 말한다. 자바스크립트의 모든 값은 데이터 타입을 갖는다. 데이터 타입이 필요한 이유는 아래와 같다. 값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해 값을 참조할 때 한번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해 메모리에서 읽어 들인 2진수를 어떻게 해석할 지를 결정하기 위해 10.동적 타이핑10.1 동적 타입 언어와 정적 타입 언어자바스크립트의 모든 값은 데이터 타입을 갖는다고 했다. 그렇다면 변수는 데이터 타입을 갖을까? C나 Java와 같은 정적 타입(Static/Strong type) 언어는 변수를 선언할 때 변수에 할당할 수 있는 값의 종류, 즉 데이터 타입을 사전에 선언해야 한다. 이를 명시적 타입 선언(explicit type declaration)이라 한다. 다음은 C에서 정수 타입의 변수를 선언하는 예이다. 12345// 변수 c에는 1byte 정수 타입의 값(-128 ~ 127)만을 할당할 수 있다.char c;// 변수 num에는 4byte 정수 타입의 값(-2,124,483,648 ~ 2,124,483,647)만을 할당할 수 있다.int num; 정적 타입 언어는 변수의 타입을 변경할 수 없으며 변수에 선언한 타입에 맞는 값만을 할당할 수 있다. 정적 타입 언어는 컴파일 시점에 타입 체크(선언한 데이터 타입에 맞는 값을 할당했는지 검사하는 처리)를 수행한다. 만약 타입 체크를 통과하지 못했다면 에러를 발생시키고 프로그램의 실행 자체를 막는다. 이를 통해 타입의 일관성을 강제하여 보다 안정적인 코드의 구현을 통해 런타임에 발생하는 에러를 줄인다. 대표적인 정적 타입 언어는 C, C++, Java, Kotlin, Go, Haskell, Rust, Scala 등이 있다. 자바스크립트는 정적 타입 언어와는 다르게 변수를 선언할 때 타입을 선언하지 않는다. 다만 var, let, const 키워드를 사용해 변수를 선언할 뿐이다. 자바스크립트의 변수는 정적 타입 언어와 같이 미리 선언한 데이터 타입의 값만을 할당할 수 있는 것이 아니다. 어떠한 데이터 타입의 값이라도 자유롭게 할당할 수 있다. 하나의 변수를 선언하고 지금까지 살펴본 다양한 데이터 타입의 값을 할당한 다음, typeof 연산자로 변수의 데이터 타입을 조사해 보자. typeof 연산자(“7.8. typeof 연산자” 참고)는 자신의 뒤에 위치한 피연산자의 데이터 타입을 문자열로 반환한다. 1234567891011121314151617181920212223242526var foo;console.log(typeof foo); // undefinedfoo = 3;console.log(typeof foo); // numberfoo = 'Hello';console.log(typeof foo); // stringfoo = true;console.log(typeof foo); // booleanfoo = null;console.log(typeof foo); // objectfoo = Symbol(); // 심볼console.log(typeof foo); // symbolfoo = {}; // 객체console.log(typeof foo); // objectfoo = []; // 배열console.log(typeof foo); // objectfoo = function () {}; // 함수console.log(typeof foo); // function typeof 연산자로 변수를 연산해 보면 변수의 데이터 타입을 반환한다. 정확히 말하면 변수의 데이터 타입을 반환하는 것이 아니라 변수에 할당된 값의 데이터 타입을 반환한 것이다. 자바스크립트의 변수는 어떤 데이터 타입의 값이라도 자유롭게 할당할 수 있으므로 정적 타입 언어에서 말하는 데이터 타입과 개념이 다르다. 정적 타입 언어는 변수 선언 시점에 변수의 타입이 결정되고 변수의 타입을 변경할 수 없다. 자바스크립트는 값을 할당하는 시점에 변수의 타입이 동적으로 결정되고 변수의 타입을 언제든지 자유롭게 변경할 수 있다. 다시 말해 자바스크립트 변수는 선언이 아닌 할당에 의해 타입이 결정된다. 그리고 재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있다. 이러한 특징을 동적 타이핑(Dynamic typing)이라 하며 자바스크립트를 정적 타입 언어와 구별하기 위해 동적 타입(Dynamic/Weak type) 언어라 부른다. 대표적인 동적 타입 언어는 자바스크립트, Python, PHP, Ruby, Lisp, Perl 등이 있다. 처음의 질문으로 돌아가 보자. 변수는 타입을 갖을까? 기본적으로 변수는 타입을 갖지 않는다. 하지만 값은 타입을 갖는다. 따라서 현재 변수에 할당되어 있는 값에 의해 변수의 타입이 동적으로 결정된다고 표현하는 것이 보다 적절하다. 변수는 값에 묶여 있는 값에 대한 별명이기 때문이다. 10.2. 동적 타입 언어와 변수동적 타입 언어는 변수에 어떤 데이터 타입의 값이라도 자유롭게 할당할 수 있다. 이러한 동적 타입 언어의 특징은 데이터 타입에 대해 무감각해질 정도로 편리하다. 하지만 언제나 그렇듯 편리함의 이면에는 위험도 도사리고 있다. 모든 소프트웨어 아키텍처에는 트레이드오프(trade-off)가 존재하며 모든 애플리케이션에 적합한 은 탄환(Silver bullet)은 없듯이, 동적 타입 언어 또한 구조적인 단점이 있다. 변수 값은 언제든지 변경될 수 있기 때문에 복잡한 프로그램에서는 변화하는 변수 값을 추적하기 어려울 수 있다. 뿐만 아니라, 변수의 타입이 고정되어 있지 않고 동적으로 변하는 동적 타입 언어의 변수는 값의 변경에 의해 타입도 언제든지 변경될 수 있다. 따라서 동적 타입 언어의 변수는 값을 확인하기 전에는 타입을 확신할 수 없다. 더욱이 자바스크립트는 개발자의 의도와는 상관없이 자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되기도 한다. 즉, 숫자 타입의 변수일 것이라고 예측했지만 사실은 문자열 타입의 변수일 수도 있다는 말이다. 잘못된 예측에 의해 작성된 프로그램은 당연히 오류를 뿜어낼 것이다. 결국 동적 타입 언어는 유연성(flexibility)은 높지만, 신뢰성(reliability)은 떨어진다. 이러한 이유로 안정적인 프로그램을 만들기 위해 변수를 사용하기 이전에 데이터 타입을 체크해야 하는 경우가 있는데 이는 매우 번거로울 뿐만 아니라 코드량도 증가한다. 코드량이 증가하면 버그가 발생할 확률도 높아지며 테스트 분량도 증가한다. 따라서 변수를 사용할 때 주의할 사항은 아래와 같다. 변수는 꼭 필요한 경우에 한해 제한적으로 사용한다. 변수값은 재할당에 의해 언제든지 변경될 수 있다. 이로 인해 동적 타입 언어인 자바스크립트는 타입을 잘못 예측해 오류가 발생할 가능성이 크다. 변수의 개수가 많으면 많을수록 오류가 발생할 확률도 높아진다. 따라서 변수의 무분별한 남발은 금물이며 필요 최소한으로 유지하도록 주의해야 한다. 변수의 유효 범위(스코프)는 최대한 좁게 만들어 변수의 부작용을 억제해야 한다. 변수의 유효 범위가 넓으면 넓을수록 변수로 인해 오류가 발생할 확률은 높아진다. 변수의 유효 범위에 대해서는 “13. 스코프”에서 자세히 살펴보도록 하자. 전역 변수는 최대한 사용하지 않도록 한다. 어디서든지 참조/변경 가능한 전역 변수는 의도치 않게 값이 변경될 가능성이 높고 다른 코드에 영향을 줄 가능성도 높다. 따라서 전역 변수는 프로그램의 복잡성을 증가시키고 처리의 흐름을 추적하기 어렵게 만들고, 오류가 발생했을 경우, 오류의 원인을 특정하기 어렵게 만든다. 전역 변수의 문제점과 전역 변수의 사용을 억제하는 방법에 대해서는 “14. 전역 변수의 문제점”에서 자세히 살펴보도록 하자. 변수보다는 상수를 사용해 값의 변경을 억제한다. 상수를 사용하는 방법에 대해서는 “15.3. const 키워드”에서 살펴보도록 하자. 변수 이름은 변수의 목적이나 의미를 파악할 수 있도록 네이밍한다. 변수 이름 뿐만이 아니라 모든 식별자(변수, 함수, 클래스 이름 등)는 존재 이유를 파약할 수 있는 적절한 이름을 네이밍해야 한다. 특히 식별자의 유효 범위가 넓을수록 보다 명확한 이름을 명명하도록 노력하도록 하자. 개발자의 의도를 나타내는 명확한 네이밍은 코드를 이해하기 쉽게 만들며 이는 협업과 생산성 향상에 도움을 준다. 변수 이름은 첫아이 이름을 짓듯이 심사숙고해서 지어야 한다. 코드는 오해하지 않도록 작성해야 한다. 오해는 커뮤니케이션을 어렵게 하는 대표적인 원인으로 생산성을 떨어뜨리는 것은 물론 팀의 사기까지 저하시킨다. 코드는 동작하는 것만이 존재 목적은 아니다. 코드는 개발자를 위한 문서이기도 하다. 따라서 사람이 이해할 수 있는 코드, 즉 가독성이 좋은 코드가 좋은 코드다. 그럼 2만~","link":"/2020/02/data-type/"},{"title":"let과 const | javaScript","text":"var 키워드로 선언한 변수의 문제점ES5까지 변수를 선언할 수 있는 유일한 방법은 var 키워드를 사용하는 것이었다. var 키워드로 선언된 변수는 아래와 같은 특징이 있다. 이는 다른 언어와는 구별되는 독특한 특징으로 주의를 기울이지 않으면 심각한 문제를 발생시킬 수 있다.. 1.1. 변수 중복 선언 허용var 키워드로 선언한 변수는 중복 선언이 가능하다. 아래 예제를 살펴보자. 12345var x = 1;// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용한다.// 아래 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작한다.var x = 100;console.log(x); // 100 위 예제의 변수 x는 중복 선언되었다. 이처럼 같은 스코프 내에서 변수를 중복 선언하면 나중에 작성된 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작한다. 이때 에러는 발생하지 않는다. 위 예제와 같이 만약 동일한 변수 이름이 이미 선언되어 있는 것을 모르고 변수를 중복 선언하면서 값까지 할당했다면 의도치 않게 먼저 선언된 변수값이 변경되는 부작용이 발생한다. 따라서 변수의 중복 선언은 문법적으로 허용되지만 사용하지 않는 것이 좋다. 1.2. 함수 레벨 스코프var 키워드로 선언한 변수는 오로지 함수의 코드 블록 만을 지역 스코프로 인정한다. 따라서 함수 외부에서 var 키워드로 선언한 변수는 코드 블록 내에서 선언하여도 모두 전역 변수가 된다. 123456789var x = 1;if (true) { // x는 전역 변수이다. 이미 선언된 전역 변수 x가 있으므로 변수 x는 중복 선언된다. // 이는 의도치 않게 변수값이 변경되는 부작용을 발생시킨다. var x = 10;}console.log(x); // 10 for 문의 변수 선언문에서 var 키워드로 선언한 변수도 전역 변수가 된다. 123456789var i = 10;// for문에서 선언한 i는 전역 변수이다. 이미 선언된 전역 변수 i가 있으므로 중복 선언된다.for (var i = 0; i &lt; 5; i++) { console.log(i); // 0 1 2 3 4}// 의도치 않게 변수의 값이 변경되었다.console.log(i); // 5 함수 레벨 스코프는 전역 변수를 남발할 가능성을 높인다. 이로 인해 의도치 않게 전역 변수가 중복 선언되는 경우가 발생한다. 1.3. 변수 호이스팅var 키워드로 변수를 선언하면 변수 호이스팅에 의해 변수 선언문이 스코프의 선두로 끌어 올려진 것처럼 동작한다. 즉, 변수 호이스팅에 의해 var 키워드로 선언한 변수는 변수 선언문 이전에 참조할 수 있다. 단, 할당문 이전에 변수를 참조하면 언제나 undefined를 반환한다. 1234567891011// 이 시점에는 변수 호이스팅에 의해 이미 변수 foo가 선언되었다. (1. 선언 단계)// 변수 foo는 undefined로 초기화된다. (2. 초기화 단계)console.log(foo); // undefined// 변수에 값을 할당 (3. 할당 단계)foo = 123;console.log(foo); // 123// 변수 선언은 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 실행된다.var foo; 변수 선언문 이전에 변수를 참조하는 것은 변수 호이스팅에 의해 에러를 발생시키지는 않지만 프로그램의 흐름 상 맞지 않을 뿐더러 가독성을 떨어뜨리고 오류를 발생시킬 여지를 남긴다. 2. let 키워드앞에서 살펴본 var 키워드의 단점을 보완하기 위해 ES6에서는 새로운 변수 선언 키워드 let과 const를 도입하였다. var 키워드와의 차이점을 중심으로 let 키워드에 대해 살펴보자. 2.1. 변수 중복 선언 금지var 키워드로 동일한 이름을 갖는 변수를 중복 선언하면 아무런 에러가 발생하지 않는다. 이때 변수를 중복 선언하면서 값까지 할당했다면 의도치 않게 먼저 선언된 변수값이 재할당되어 변경되는 부작용이 발생한다. 하지만 let 키워드로 동일한 이름을 갖는 변수를 중복 선언하면 문법 에러(SyntaxError)가 발생한다. 12345678var foo = 123;// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용한다.// 아래 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작한다.var foo = 456;let bar = 123;// let이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용하지 않는다.let bar = 456; // SyntaxError: Identifier 'bar' has already been declared 2.2. 블록 레벨 스코프var 키워드로 선언한 변수는 오로지 함수의 코드 블록 만을 지역 스코프로 인정하는 함수 레벨 스코프를 따른다. 하지만 let 키워드로 선언한 변수는 모든 코드 블록(함수, if 문, for 문, while 문, try/catch 문 등) 을 지역 스코프로 인정하는 블록 레벨 스코프(Block-level scope)를 따른다. 아래 예제를 살펴보자. 123456789let foo = 123; // 전역 변수{ let foo = 456; // 지역 변수 let bar = 456; // 지역 변수}console.log(foo); // 123console.log(bar); // ReferenceError: bar is not defined let 키워드로 선언된 변수는 블록 레벨 스코프를 따른다. 따라서 위 예제에서 코드 블록 내에 선언된 변수 foo와 지역 변수이다. 전역에서 선언된 변수 foo와는 다른 별개의 변수이다. 또한 변수 bar도 블록 레벨 스코프를 갖는 지역 변수이다. 따라서 전역에서는 변수 bar를 참조할 수 없다. 함수도 코드 블록이므로 스코프를 만든다. 이때 함수 내의 코드 블록은 함수 레벨 스코프에 중첩된다. 블록 레벨 스코프의 중첩 2.3. 변수 호이스팅var 키워드로 선언한 변수와는 달리 let 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 동작한다. 아래 예제를 살펴보자. 123console.log(foo); // ReferenceError: foo is not definedlet foo;이처럼 let 키워드로 선언한 변수를 변수 선언문 이전에 참조하면 참조 에러(ReferenceError)가 발생한다. “4.3. 변수 선언”에서 살펴본 바와 같이 var 키워드로 선언한 변수는 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 “선언 단계”와 “초기화 단계”가 한번에 진행된다. 즉, 선언 단계에서 스코프(실행 컨텍스트의 렉시컬 환경(Lexical Environment))에 변수 식별자를 등록하여 자바스크립트 엔진에 변수의 존재를 알린다. 그리고 즉시 초기화 단계에서 undefined로 변수를 초기화한다. 따라서 변수 선언문 이전에 변수에 접근하여도 스코프에 변수가 존재하기 때문에 에러가 발생하지 않는다. 다만 undefined를 반환한다. 이후 변수 할당문에 도달하면 비로소 값이 할당된다. 123456789// var 키워드로 선언한 변수는 런타임 이전에 선언 단계와 초기화 단계가 실행된다.// 따라서 변수 선언문 이전에 변수를 참조할 수 있다.console.log(foo); // undefinedvar foo;console.log(foo); // undefinedfoo = 1; // 할당문에서 할당 단계가 실행된다.console.log(foo); // 1 var 키워드로 선언한 변수의 생명 주기 let 키워드로 선언한 변수는 “선언 단계”와 “초기화 단계”가 분리되어 진행된다. 즉, 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 선언 단계가 먼저 실행되지만 초기화 단계는 변수 선언문에 도달했을 때 실행된다. 만약 초기화 단계가 실행되기 이전에 변수에 접근하려고 하면 참조 에러(ReferenceError)가 발생한다. 따라서 스코프의 시작 지점부터 초기화 단계 시작 지점(변수 선언문)까지는 변수를 참조할 수 없다. 스코프의 시작 지점부터 초기화 시작 지점까지의 구간을 일시적 사각지대(Temporal Dead Zone; TDZ)라고 부른다. 123456789// 런타임 이전에 선언 단계가 실행된다.// 아직 변수가 초기화되지 않았다. 따라서 변수 선언문 이전에 변수를 참조할 수 없다.console.log(foo); // ReferenceError: foo is not definedlet foo; // 변수 선언문에서 초기화 단계가 실행된다.console.log(foo); // undefinedfoo = 1; // 할당문에서 할당 단계가 실행된다.console.log(foo); // 1 let 키워드로 선언한 변수의 생명 주기 결국 let 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 보인다. 하지만 그렇지 않다. 아래 예제를 살펴보자. 123456let foo = 1; // 전역 변수{ console.log(foo); // ReferenceError: foo is not defined let foo = 2; // 지역 변수} let 키워드로 선언한 변수의 경우, 변수 호이스팅 발생하지 않는다면 위 예제는 전역 변수 foo의 값을 출력해야 한다. 하지만 let 키워드로 선언한 변수도 여전히 호이스팅이 발생하기 때문에 참조 에러(ReferenceError)가 발생한다. 자바스크립트는 ES6에서 도입된 let, const를 포함하여 모든 선언(var, let, const, function, function*, class 등)을 호이스팅한다. 단, ES6에서 도입된 let, const, class를 사용한 선언문은 호이스팅이 발생하지 않는 것처럼 동작한다. 2.4. 전역 객체와 let전역 객체(Global Object, “21.4. 전역 객체” 참고)는 코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 어떤 객체보다도 먼저 생성되는 특수한 객체이며 어떤 객체에도 속하지 않은 최상위 객체이다. 전역 객체는 클라이언트 사이드 환경(브라우저)에서는 window, 서버 사이드 환경(Node.js)에서는 global 객체를 가리킨다. var 키워드로 선언한 전역 변수와 선언하지 않은 변수에 값을 할당한 암묵적 전역(“21.4.3. 암묵적 전역” 참고) 그리고 전역 함수는 전역 객체의 프로퍼티가 된다. 전역 객체의 프로퍼티를 참조할 때 window를 생략할 수 있다. 1234567891011121314151617181920212223242526272829// 이 예제는 브라우저 환경에서 실행시켜야 한다.// 전역 변수var x = 1;// 암묵적 전역y = 2;function foo() {}// var 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티이다.console.log(window.x); // 1// 전역 객체의 프로퍼티는 전역 변수처럼 사용할 수 있다.console.log(x); // 1// 암묵적 전역은 전역 객체의 프로퍼티이다.console.log(window.y); // 2console.log(y); // 2// 함수 선언문으로 정의한 전역 함수는 전역 객체의 프로퍼티이다.console.log(window.foo); // ƒ foo() {}// 전역 객체의 프로퍼티는 전역 변수처럼 사용할 수 있다.console.log(foo); // ƒ foo() {}let 키워드로 선언한 전역 변수는 전역 객체 window의 프로퍼티가 아니다. 즉, window.foo와 같이 접근할 수 없다. let 전역 변수는 보이지 않는 개념적인 블록(전역 렉시컬 환경의 선언적 환경 레코드. 이에 대해서는 “23. 실행 컨텍스트”에서 자세히 살펴볼 것이다.) 내에 존재하게 된다.// 이 예제는 브라우저 환경에서 실행시켜야 한다.let x = 1;// let, const 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아니다.console.log(window.x); // undefinedconsole.log(x); // 1 3. const 키워드const 키워드는 상수(constant)를 선언하기 위해 사용한다. 하지만 반드시 상수만을 위해 사용하지는 않는다. 이에 대해서는 후반부에 설명한다. const의 특징은 let과 대부분 동일하므로 let과 다른 점을 중심으로 살펴보도록 하자. 3.1. 선언과 초기화const 키워드로 선언한 변수는 반드시 선언과 동시에 할당이 이루어져야 한다. 123456789101112131415const foo = 1;그렇지 않으면 아래와 같이 문법 에러(SyntaxError)가 발생한다.const foo; // SyntaxError: Missing initializer in const declarationconst 키워드로 선언한 변수는 let 키워드로 선언한 변수와 마찬가지로 블록 레벨 스코프를 가지며 변수 호이스팅이 발생하지 않는 것처럼 동작한다.{ // 변수 호이스팅이 발생하지 않는 것처럼 동작한다 console.log(foo); // ReferenceError: Cannot access 'foo' before initialization const foo = 1; console.log(foo); // 1}// 블록 레벨 스코프를 갖는다.console.log(foo); // ReferenceError: foo is not defined 3.2. 재할당 금지var 또는 let 키워드로 선언한 변수는 재할당이 자유로우나 const 키워드로 선언한 변수는 재할당이 금지된다. 12const foo = 1;foo = 2; // TypeError: Assignment to constant variable. 3.3. 상수const 키워드로 선언한 변수에 원시값을 할당한 경우, 변수값을 변경할 수 없다. 원시값은 변경 불가능한 값(immutable value)이므로 재할당없이 값을 변경할 수 있는 방법이 없기 때문이다. 이러한 특징을 이용해 const 키워드를 상수를 표현하는 데 사용하기도 한다. 변수의 상대 개념인 상수는 재할당이 금지된 변수를 말한다. 상수도 값을 저장하기 위한 메모리 공간이 필요하므로 변수라고 할 수 있다. 단, 변수는 언제든지 재할당을 통해 변수값을 변경할 수 있지만 상수는 재할당이 금지된다. 상수는 상태 유지와 가독성, 유지보수의 편의를 위해 적극적으로 사용해야 한다. 아래 예제를 살펴보자. 12345678// 세전 가격let preTaxPrice = 100;// 세후 가격// 0.1의 의미를 명확히 알기 어렵기 때문에 가독성이 좋지 않다.let afterTaxPrice = preTaxPrice + (preTaxPrice * 0.1);console.log(afterTaxPrice); // 110 코드 내에서 사용한 0.1은 어떤 의미로 사용하였는지 명확히 알기 어렵기 때문에 가독성이 좋지 않다. 또한 세율을 의미하는 0.1은 쉽게 바뀌지 않는 값이며 프로그램 전체에서 고정된 값을 사용해야 한다. 이때 세율을 상수로 정의하면 값의 의미를 쉽게 파악할 수 있고 변경될 수 없는 고정값으로 사용할 수 있다. 일반적으로 상수의 이름은 대문자로 선언하여 상수임을 명확히 나타낸다. 여러 단어로 이루어진 경우에는 언더스코어(_)로 구분하여 스네이크 케이스로 표현하는 것이 일반적이다. 1234567891011// 세율을 의미하는 0.1은 변경할 수 없는 상수로서 사용될 값이다.// 변수 이름을 대문자로 선언하여 상수임을 명확히 나타낸다.const TAX_RATE = 0.1;// 세전 가격let preTaxPrice = 100;// 세후 가격let afterTaxPrice = preTaxPrice + (preTaxPrice * TAX_RATE);console.log(afterTaxPrice); // 110 const 키워드로 선언된 변수는 재할당이 금지된다. const 키워드로 선언된 변수에 원시 값을 할당한 경우, 원시 값은 변경할 수 없는 값(immutable value)이고 const 키워드에 의해 재할당이 금지되므로 할당된 값을 변경할 수 있는 방법은 없다. 또한 상수는 프로그램 전체에서 공통 사용하므로 나중에 세율이 변경되면 상수만을 변경하면 되기 때문에 유지보수성이 대폭 향상된다. 3.3. const 키워드와 객체const 키워드로 선언된 변수에 원시값을 할당한 경우, 값을 변경할 수 없다. 하지만 const 키워드로 선언된 변수에 객체를 할당한 경우, 값을 변경할 수 있다. 변경 불가능한 값인 원시값은 재할당없이 변경(교체)할 수 있는 방법이 없지만 변경 가능한 값인 객체는 재할당없이도 직접 변경이 가능하기 때문이다. 12345678const person = { name: 'Lee'};// 객체는 변경 가능한 값이다. 따라서 재할당없이 변경이 가능하다.person.name = 'Kim';console.log(person); // {name: \"Kim\"} “11.1.1. 변경 불가능한 값”에서 살펴본 바와 같이, const 키워드는 재할당을 금지할 뿐 “불변(immutable)”을 의미하지는 않는다. 다시 말해, 새로운 값을 재할당하는 것은 불가능하지만 객체의 내용(프로퍼티의 추가, 삭제, 프로퍼티 값의 변경)을 변경하는 것은 가능하다. 객체의 내용이 변경되더라도 변수에 할당된 참조값은 변경되지 않는다. 4. var vs. let vs. const변수 선언에는 기본적으로 const를 사용하고 let은 재할당이 필요한 경우에 한정해 사용하는 것이 좋다. 원시 값의 경우, 가급적 상수를 사용하는 편이 좋다. 그리고 객체를 재할당하는 경우는 생각보다 흔하지 않다. const 키워드를 사용하면 의도치 않은 재할당을 방지해 주기 때문에 보다 안전하다.var와 let, 그리고 const 키워드는 다음처럼 사용하는 것을 추천한다. ES6를 사용한다면 var 키워드는 사용하지 않는다.재할당이 필요한 경우에 한정해 let 키워드를 사용한다. 이때 변수의 스코프는 최대한 좁게 만든다.변경이 발생하지 않고 읽기 전용으로 사용하는(재할당이 필요 없는 상수) 원시 값과 객체에는 const 키워드를 사용한다. const 키워드는 재할당을 금지하므로 var, let 키워드보다 안전하다.변수를 선언하는 시점에는 재할당이 필요할지 잘 모르는 경우가 많다. 그리고 객체는 의외로 재할당을 하는 경우가 드물다.(Angular, React, Vue.js와 같은 SPA 프레임워크의 경우, 상태가 변경되었음을 알리기 위해 객체를 재할당하는 경우도 있다.) 따라서 변수를 선언할 때에는 일단 const 키워드를 사용하도록 하자. 반드시 재할당이 필요하다면(반드시 재할당이 필요한지 한번 생각해 볼 일이다.) 그때 const 키워드를 let 키워드로 변경해도 결코 늦지 않는다.","link":"/2020/03/let_const/"},{"title":"객체 리터럴 | javaScript","text":"1. 객체란?자바스크립트는 객체(object) 기반의 프로그래밍 언어이며 자바스크립트를 이루고 있는 거의 “모든 것”이 객체이다. 원시 값을 제외한 나머지 값들(함수, 배열, 정규표현식 등)은 모두 객체이다. 원시 타입은 단 하나의 값만을 나타내지만 객체 타입(object / reference type)은 다양한 타입의 값(원시 값 또는 다른 객체)들을 하나의 단위로 구성한 복합적인 자료 구조(Data structure)이다. 또한 원시 타입의 값, 즉 원시 값은 변경 불가능한 값(immutable value)이지만 객체 타입의 값, 즉 객체는 변경 가능한 값(mutable value)이다. 자바스크립트에서 사용할 수 있는 모든 값은 프로퍼티 값이 될 수 있다. 자바스크립트의 함수는 일급 객체이므로 값으로 취급할 수 있다. 따라서 프로퍼티 값으로 함수를 사용할 수도 있다. 프로퍼티 값이 함수일 경우, 일반 함수와 구분하기 위해 메소드(Method)라 부른다. 이처럼 객체는 프로퍼티와 메소드로 구성된 집합체이다. 프로퍼티와 메소드의 역할은 아래와 같다. 프로퍼티: 객체의 상태를 나타내는 값(data) 메소드: 프로퍼티(상태 데이터)를 참조하고 조작할 수 있는 동작(behavior)이와 같이 객체는 객체의 상태를 나타내는 값(프로퍼티)과 프로퍼티를 참조하고 조작할 수 있는 동작(메소드)를 모두 포함할 수 있기 때문에 상태와 동작을 하나의 단위로 구조화할 수 있어 유용하다.","link":"/2020/02/object/"},{"title":"연산자 | javaScript","text":"연산자(Operator)는 하나 이상의 표현식을 대상으로 산술, 할당, 비교, 논리, 타입, 지수 연산(operation) 등을 수행해 하나의 값을 만든다. 이때 연산의 대상을 피연산자(Operand)라 한다. 피연산자는 값으로 평가될 수 있는 표현식이어야 한다.그리고 피연산자와 연산자의 조합으로 이루어진 연산자 표현식도 값으로 평가될 수 있는 표현식이다. 1234567891011121314151617// 산술 연산자5 * 4 // -&gt; 20// 문자열 연결 연산자'My name is ' + 'Lee' // -&gt; 'My name is Lee'// 할당 연산자color = 'red' // -&gt; 'red'// 비교 연산자3 &gt; 5 // -&gt; false// 논리 연산자true &amp;&amp; false // -&gt; false// 타입 연산자typeof 'Hi' // -&gt; string 피연산자가 “값”이라는 명사의 역할을 한다면 연산자는 “피연산자를 연산하여 새로운 값을 만든다”라는 동사의 역할을 한다고 볼 수 있다.다시 말해,피연산자는 연산의 대상이 되어야 하므로 값으로 평가할 수 있어야 한다.연산자는 값으로 평가된 피연산자를 연산해 새로운 값을 만든다. 자바스크립트가 제공하는 다양한 연산자에 대해 살펴보도록 하자. 1. 산술 연산자산술 연산자는 피연산자를 대상으로 수학적 계산을 수행해 새로운 숫자 값을 만든다. 산술 연산이 불가능한 경우, NaN을 반환한다. 산술 연산자는 피연산자의 개수에 따라 이항 산술 연산자와 단항 산술 연산자로 구분할 수 있다. 1.1 이항 산술 연산자이항 산술 연산자는 2개의 피연산자를 산술 연산하여 숫자 타입의 값을 만든다. 모든 이항 산술 연산자는 피연산자의 값을 변경하는 부수 효과(Side effect)가 없다. 다시 말해 어떤 산술 연산을 해도 피연산자의 값이 바뀌는 경우는 없다. 언제나 새로운 값을 만들 뿐이다. 123455 + 2; // -&gt; 75 - 2; // -&gt; 35 * 2; // -&gt; 105 / 2; // -&gt; 2.55 % 2; // -&gt; 1 1.2. 단항 산술 연산자단항(Unary) 산술 연산자는 1개의 피연산자를 산술 연산하여 숫자 타입의 값을 만든다. 주의할 것은 이항 산술 연산자와는 달리 증가/감소(++/–) 연산자는 피연산자의 값을 변경하는 부수 효과가 있다. 다시 말해 증가/감소 연산을 하면 피연산자의 값을 변경하는 암묵적 할당이 이루어진다. 증가/감소(++/–) 연산자는 위치에 의미가 있다. 피연산자 앞에 위치한 전위 증가/감소 연산자(Prefix increment/decrement operator)는 먼저 피연산자의 값을 증가/감소시킨 후, 다른 연산을 수행한다. 피연산자 뒤에 위치한 후위 증가/감소 연산자(Postfix increment/decrement operator)는 먼저 다른 연산을 수행한 후, 피연산자의 값을 증가/감소시킨다. 1234567891011121314151617var x = 5, result;// 선할당 후증가 (Postfix increment operator)result = x++;console.log(result, x); // 5 6// 선증가 후할당 (Prefix increment operator)result = ++x;console.log(result, x); // 7 7// 선할당 후감소 (Postfix decrement operator)result = x--;console.log(result, x); // 7 6// 선감소 후할당 (Prefix decrement operator)result = --x;console.log(result, x); // 5 5 +단항 연산자는 피연산자에 어떠한 효과도 없다. 음수를 양수로 반전하지도 않는다. 그런데 숫자 타입이 아닌 피연산자에 사용하면 피연산자를 숫자 타입으로 변환하여 반환한다. 이때 피연산자를 변경하는 것은 아니고 숫자 타입으로 변환한 값을 생성해서 반환한다. 따라서 부수 효과는 없다. 123456789101112131415// 아무런 효과가 없다.+10; // -&gt; 10+(-10); // -&gt; -10// 문자열을 숫자로 타입 변환한다.+'10'; // -&gt; 10// 불리언 값을 숫자로 타입 변환한다.+true; // -&gt; 1// 불리언 값을 숫자로 타입 변환한다.+false; // -&gt; 0// 문자열을 숫자로 타입 변환할 수 없으므로 NaN을 반환한다.+'Hello'; // -&gt; NaN – 단항 연산자는 피연산자의 부호를 반전한 값을 반환한다. + 단항 연산자와 마찬가지로 숫자 타입이 아닌 피연산자에 사용하면 피연산자를 숫자 타입으로 변환하여 반환한다. 이때 피연산자를 변경하는 것은 아니고 부호를 반전한 값을 생성해서 반환한다. 따라서 부수 효과는 없다. 1234567891011// 부호를 반전한다.-(-10); // -&gt; 10// 문자열을 숫자로 타입 변환한다.-'10'; // -&gt; -10// 불리언 값을 숫자로 타입 변환한다.-true; // -&gt; -1// 문자열을 숫자로 타입 변환할 수 없으므로 NaN을 반환한다.-'Hello'; // -&gt; NaN 1.3. 문자열 연결 연산자+연산자는 피연산자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작한다. 그 외의 경우는 덧셈 연산자로 동작한다. 아래 예제를 살펴보자. 12345678910111213141516171819// 문자열 연결 연산자'1' + 2; // -&gt; '12'1 + '2'; // -&gt; '12'// 산술 연산자1 + 2; // -&gt; 3// true는 1로 타입 변환된다.1 + true; // -&gt; 2// false는 0으로 타입 변환된다.1 + false; // -&gt; 1// null는 0으로 타입 변환된다.1 + null; // -&gt; 1// undefined는 숫자로 타입 변환되지 않는다.+undefined; // -&gt; NaN1 + undefined; // -&gt; NaN 이 예제에서 주목할 것은 개발자의 의도와는 상관없이 자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되기도 한다는 것이다. 위 예제에서 1 + true를 연산하면 자바스크립트 엔진은 암묵적으로 불리언 타입의 값인 true를 숫자 타입인 1로 타입을 강제 변환한 후 연산을 수행한다. 이를 암묵적 타입 변환(Implicit coercion) 또는 타입 강제 변환(Type coercion)이라고 한다. 앞서 살펴본 +/- 단항 연산자도 암묵적 타입 변환이 발생한 것이다. 이에 대해서는 “9. 타입 변환과 단축 평가”에서 자세히 살펴볼 것이다. 2. 할당 연산자할당 연산자(Assignment Operator)는 우항에 있는 피연산자의 평가 결과를 좌항에 있는 변수에 할당한다. 할당 연산자는 좌항의 변수에 값을 할당하므로 변수의 값이 변하는 부수 효과가 있다. 1234567891011121314151617181920212223242526var x;x = 10;console.log(x); // 10x += 5; // x = x + 5;console.log(x); // 15x -= 5; // x = x - 5;console.log(x); // 10x *= 5; // x = x * 5;console.log(x); // 50x /= 5; // x = x / 5;console.log(x); // 10x %= 5; // x = x % 5;console.log(x); // 0var str = 'My name is ';// 문자열 연결 연산자str += 'Lee'; // str = str + 'Lee';console.log(str); // 'My name is Lee' 3. 비교 연산자비교 연산자(Comparison Operator)는 좌항과 우항의 피연산자를 비교한 다음 그 결과를 불리언 값을 반환한다. 비교 연산자는 if 문이나 for 문과 같은 제어문의 조건식에서 주로 사용한다. 3.1 동등 / 일치 비교 연산자동등 비교(loose equality) 연산자와 일치 비교(strict equality) 연산자는 좌항과 우항의 피연산자가 같은 값을 갖는지 비교하여 불리언 값을 반환한다. 하지만 비교하는 엄격성의 정도가 다르다. 동등 비교 연산자는 느슨한 비교를 하지만 일치 비교 연산자는 엄격한 비교를 한다. 1234567891011121314// 동등 비교5 == 5; // -&gt; true// 타입은 다르지만 암묵적 타입 변환을 통해 타입을 일치시키면 동등하다.5 == '5'; // -&gt; true// 동등 비교. 결과를 예측하기 어렵다.'0' == ''; // -&gt; false0 == ''; // -&gt; true0 == '0'; // -&gt; truefalse == 'false'; // -&gt; falsefalse == '0'; // -&gt; truefalse == null; // -&gt; falsefalse == undefined; // -&gt; false 위 예제와 같은 코드를 작성할 개발자는 드물겠지만 이처럼 동등 비교(==) 연산자는 예측하기 어려운 결과를 만들어낸다. 위 예제는 이해하려 하지 않아도 된다. 다만 동등 비교 연산자를 사용하지 말고 일치 비교 연산자를 사용하면 된다. 일치 비교(===) 연산자는 좌항과 우항의 피연산자가 타입도 같고 값도 같은 경우에 한하여 true를 반환한다. 다시 말해 암묵적 타입 변환을 하지 않고 값을 비교한다. 123456789// 일치 비교5 === 5; // -&gt; true// 암묵적 타입 변환을 하지 않고 값을 비교한다.// 즉, 값과 타입이 모두 같은 경우만 true를 반환한다.5 === '5'; // -&gt; false// NaN은 자신과 일치하지 않는 유일한 값이다.NaN === NaN; // -&gt; false NaN은 자신과 일치하지 않는 유일한 값이다. 따라서 숫자가 NaN인지 조사하려면 빌트인 함수 isNaN을 사용한다 1234// 빌트인 함수 isNaN은 주어진 값이 NaN인지 체크하고 그 결과를 반환한다.isNaN(NaN); // -&gt; trueisNaN(10); // -&gt; falseisNaN(1 + undefined); // -&gt; true 숫자 0도 주의하도록 하자. 자바스크립트에는 양의 0과 음의 0이 있는데 이들을 비교하면 true를 반환한다. 123// 양의 0과 음의 0의 비교. 일치 비교/동등 비교 모두 true이다.0 === -0; // -&gt; true0 == -0; // -&gt; true Object.is 메소드 위에서 살펴본 바와 같이 동등 비교 연산자(==)와 일치 비교 연산자(===)는 +0과 -0을 동일하다고 평가한다. 또한 동일한 값인 NaN과 NaN을 비교하면 다른 값이라고 평가한다. ES6에서 새롭게 도입된 Object.is 메소드는 아래와 같이 예측 가능한 정확한 비교 결과를 반환한다. 그 외에는 일치 비교 연산자(===)와 동일하게 동작한다.12345-0 === +0; // -&gt; trueObject.is(-0, +0); // -&gt; falseNaN === NaN; // -&gt; falseObject.is(NaN, NaN); // -&gt; true 부동등 비교 연산자(!=)와 불일치 비교 연산자(!==)는 동등 비교(==) 연산자와 일치 비교(===) 연산자의 반대 개념이다. 123456789// 부동등 비교5 != 8; // -&gt; true5 != 5; // -&gt; false5 != '5'; // -&gt; false// 불일치 비교5 !== 8; // -&gt; true5 !== 5; // -&gt; false5 !== '5'; // -&gt; true 3.2. 대소 관계 비교 연산자대소 관계 비교 연산자는 피연산자의 크기를 비교하여 불리언 값을 반환한다. 12345// 대소 관계 비교5 &gt; 0; // -&gt; true5 &gt; 5; // -&gt; false5 &gt;= 5; // -&gt; true5 &lt;= 5; // -&gt; true 4. 삼항 조건 연산자삼항 조건 연산자(ternary operator)는 조건식의 평가 결과에 따라 반환할 값을 결정한다. 자바스크립트의 유일한 삼항 연산자이며 부수 효과는 없다. 삼항 조건 연산자 표현식은 아래와 같이 사용한다. 1조건식 ? 조건식이 true일때 반환할 값 : 조건식이 false일때 반환할 값 물음표(?) 앞의 첫번째 피연산자는 조건식, 즉 불리언 타입의 값으로 평가될 표현식이다. 만약 조건식의 평가 결과가 불리언 값이 아니면 불리언 값으로 암묵적 타입 변환된다. 이때 조건식이 참이면 콜론(:) 앞의 두번째 피연산자가 평가되어 반환되고, 거짓이면 콜론(:) 뒤의 세번째 피연산자가 평가되어 반환된다. 123456var x = 2;// 2 % 2는 0이고 0은 false로 암묵적 타입 변환된다.var result = x % 2 ? '홀수' : '짝수';console.log(result); // 짝수 삼항 조건 연산자는 다음 장에서 살펴볼 if…else 문을 사용해도 동일한 처리를 할 수 있다. 1234567var x = 2, result;// 2 % 2는 0이고 0은 false로 암묵적 타입 변환된다.if (x % 2) result = '홀수';else result = '짝수';console.log(result); // 짝수 하지만 if…else 문은 표현식이 아닌 문이다. 따라서 if…else 문은 값처럼 사용할 수 없다. 12345var x = 10;// if...else 문은 표현식이 아닌 문이다. 따라서 값처럼 사용할 수 없다.var result = if (x % 2) { result = '홀수'; } else { result = '짝수'; };// SyntaxError: Unexpected token if 삼항 조건 연산자 표현식은 값으로 평가할 수 있는 표현식인 문이다. 따라서 삼항 조건 연산자식은 값처럼 다른 표현식의 일부가 될 수 있어 매우 유용하다. 12345var x = 10;// 삼항 연산자 표현식은 표현식인 문이다. 따라서 값처럼 사용할 수 있다.var result = x % 2 ? '홀수' : '짝수';console.log(result); // 짝수 조건에 따라 어떤 값을 결정해야 한다면 if…else 문보다 삼항 조건 연산자 표현식을 사용하는 것이 유리하다. 하지만 조건에 따라 수행해야 할 문이 하나가 아니라 여러 개라면 if…else 문이 보다 가독성이 좋다. 5. 논리 연산자논리 연산자(Logical Operator)는 우항과 좌항의 피연산자(부정 논리 연산자의 경우, 우항의 피연산자)를 논리 연산한다. 123456789101112131415// 논리합(||) 연산자true || true; // -&gt; truetrue || false; // -&gt; truefalse || true; // -&gt; truefalse || false; // -&gt; false// 논리곱(&amp;&amp;) 연산자true &amp;&amp; true; // -&gt; truetrue &amp;&amp; false; // -&gt; falsefalse &amp;&amp; true; // -&gt; falsefalse &amp;&amp; false; // -&gt; false// 논리 부정(!) 연산자!true; // -&gt; false!false; // -&gt; true 논리 부정(!) 연산자는 언제나 불리언 값을 반환한다. 단, 피연산자가 반드시 불리언 값일 필요는 없다. 만약 피연산자가 불리언 값이 아니면 불리언 타입으로 암묵적 타입 변환된다. 123// 암묵적 타입 변환!0; // -&gt; true!'Hello'; // -&gt; false 논리합(||) 또는 논리곱(&amp;&amp;) 연산자 표현식의 평가 결과는 불리언 값이 아닐 수도 있다. 논리합(||) 또는 논리곱(&amp;&amp;) 연산자 표현식은 언제나 2개의 피연산자 중 어는 한쪽으로 평가된다. 12// 단축 평가'Cat' &amp;&amp; 'Dog'; // -&gt; 'Dog' 12!(x || y) === (!x &amp;&amp; !y)!(x &amp;&amp; y) === (!x || !y) 6. 쉼표 연산자쉼표(,) 연산자는 왼쪽 피연산자부터 차례대로 피연산자를 평가하고 마지막 피연산자의 평가가 끝나면 마지막 피연산자의 평가 결과를 반환한다. 123var x, y, z;x = 1, y = 2, z = 3; // 3 7. 그룹 연산자그룹 연산자 (…)는 자신의 피연산자인 표현식을 가장 먼저 평가한다. 따라서 그룹 연산자를 사용하면 연산자의 우선 순위를 조절할 수 있다. 123410 * 2 + 3; // -&gt; 23// 그룹 연산자를 사용하여 우선 순위 조절10 * (2 + 3); // -&gt; 50 위 예제의 첫번째 문은 10 * 2를 먼저 연산하고 그 다음 20 + 3을 연산한다. 수학에서와 마찬가지로 곱셈 연산자 *가 덧셈 연산자 +보다 우선 순위가 높기 때문이다. 두번째 문은 그룹 연산자로 감싼 표현식을 먼저 연산한다. 따라서 2 + 3을 먼저 연산하고 그 다음 10 * 5를 연산한다. 8. typeof 연산자typeof 연산자는 피연산자의 데이터 타입을 문자열로 반환한다. typeof 연산자는 7가지 문자열 “string”, “number”, “boolean”, “undefined”, “symbol”, “object”, “function” 중 하나를 반환한다. “null”을 반환하는 경우는 없으며 함수의 경우 “function”을 반환한다. 이처럼 typeof 연산자가 반환하는 문자열은 7개의 데이터 타입과 정확히 일치하지는 않는다. 123456789101112typeof '' // -&gt; \"string\"typeof 1 // -&gt; \"number\"typeof NaN // -&gt; \"number\"typeof true // -&gt; \"boolean\"typeof undefined // -&gt; \"undefined\"typeof Symbol() // -&gt; \"symbol\"typeof null // -&gt; \"object\"typeof [] // -&gt; \"object\"typeof {} // -&gt; \"object\"typeof new Date() // -&gt; \"object\"typeof /test/gi // -&gt; \"object\"typeof function () {} // -&gt; \"function\" typeof 연산자로 null 값을 연산해 보면 “null”이 아닌 “object”를 반환하는 것에 주의하자. 이것은 자바스크립트의 첫 번째 버전의 버그이다. 하지만 기존 코드에 영향을 줄 수 있기 때문에 아직까지 수정되지 못하고 있다. 따라서 null 타입을 확인할 때는 typeof 연산자를 사용하지 말고 일치 연산자(===)를 사용하도록 하자. 1234var foo = null;typeof foo === null; // -&gt; falsefoo === null; // -&gt; true 또 하나 주의해야 할 것이 있다. 선언하지 않은 식별자를 typeof 연산자로 연산해 보면 ReferenceError가 발생하지 않고 “undefined”를 반환한다. 12// 식별자 undeclared는 선언한 적이 없다.typeof undeclared; // -&gt; undefined typeof 연산자가 선언하지 않은 식별자를 연산했을 때 “undefined”를 반환하는 것을 카일 심슨의 “You don’t know JS”에서는 특별한 안전 가드(safety guard)로 설명한다. 하지만 모던 자바스크립트 개발에서는 대부분 모듈을 사용하고 전역 변수인 플래그를 사용하지 않으므로 의도적으로 사용할 필요는 없다. 9. 지수 연산자ES7에서 새롭게 도입된 지수 연산자는 좌항의 피연산자를 밑으로, 우항의 피연산자를 지수로 거듭 제곱하여 숫자 타입의 값을 반환한다. 12342 ** 2; // -&gt; 42 ** 2.5; // -&gt; 5.656854249492382 ** 0; // -&gt; 12 ** -2; // -&gt; 0.25 지수 연산자가 도입되기 이전에는 Math.pow 메소드를 사용하였다. 1234Math.pow(2, 2); // -&gt; 4Math.pow(2, 2.5); // -&gt; 5.65685424949238Math.pow(2, 0); // -&gt; 1Math.pow(2, -2); // -&gt; 0.25 지수 연산자는 여러 개의 피연산자를 사용할 경우, Math.pow 메소드보다 가독성이 좋다. 122 ** 2 ** 2; // -&gt; 16Math.pow(Math.pow(2, 2), 2); // -&gt; 16 음수를 거듭제곱의 밑으로 계산하려면 아래와 같이 괄호로 묶어야 한다. 123-5 ** 2;// -&gt; SyntaxError: Unary operator used immediately before exponentiation expression. Parenthesis must be used to disambiguate operator precedence(-5) ** 2; // -&gt; 25 지수 연산자는 다른 산술 연산자와 마찬가지로 할당 연산자와 함께 사용할 수 있다. 12var num = 5;num **= 2; // -&gt; 25 지수 연산자는 모든 이항 연산자보다 우선 순위가 높다. 12 * 5 ** 2; // -&gt; 50 10. 연산자의 부수 효과대부분의 연산자는 다른 코드에 영향을 주지 않는다. 예를 들어, 1 * 2는 다른 코드에 어떠한 영향도 주지 않는다. 하지만 일부 연산자는 다른 코드에 영향을 주는 부수 효과(side effect)가 있다. 부수 효과가 있는 연산자는 할당(=) 연산자, 증가/감소(++/–) 연산자, delete 연산자이다. 123456789101112131415161718var x;// 할당 연산자는 변수 값이 변하는 부수 효과가 있다.// 이는 변수 x를 사용하는 다른 코드에 영향을 준다.x = 1;console.log(x); // 1// 증가/감소(++/--) 연산자는 피연산자의 값을 변경하는 부수 효과가 있다.// 피연산자 x의 값이 변경된다. 이는 변수 x를 사용하는 다른 코드에 영향을 준다.x++;console.log(x); // 2var o = { a: 1 };// delete 연산자는 객체의 프로퍼티를 삭제하는 부수 효과가 있다.// 이는 객체 o를 사용하는 다른 코드에 영향을 준다.delete o.a;console.log(o); // {} delete 연산자는 객체의 프로퍼티를 삭제한다. 이에 대해서는 객체에 대해 살펴본 다음 “프로퍼티 삭제”에서 알아보도록 하자.","link":"/2020/02/operator/"},{"title":"프로퍼티 어트리뷰트 | javaScript","text":"1.내부 슬롯과 내부 메소드내부 슬롯과 내부 메소드는 자바스크립트 엔진의 알고리즘을 설명하기 위해 ECMAScript 사양에서 사용하는 의사 프로퍼티와 의사 메소드이다. ECMAScript 사양에 등장하는 이중 대괄호 [[…]]로 감싼 이름들이 내부 슬롯과 내부 메소드이다. 내부 슬롯과 내부 메소드는 ECMAScript 사양에 정의된 대로 구현되어 자바스크립트 엔진에서 실제로 동작하지만 외부로 공개된 객체의 프로퍼티는 아니다. 즉, 내부 슬롯과 내부 메소드는 자바스크립트 엔진의 내부 로직이다. 그러므로 직접적으로 접근하거나 호출할 수가 없다. 2. 프로퍼티 어트리뷰트와 프로퍼티 디스크립터 객체자바스크립트 엔진은 프로퍼티를 생성할 때, 프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트를 기본값으로 자동 정의한다. 프로퍼티의 상태란 프로퍼티의 값(value), 값의 갱신 가능 여부(writable), 열거 가능 여부(enumerable), 재정의 가능 여부(configurable)를 말한다. 프로퍼티 어트리뷰트는 자바스크립트 엔진이 관리하는 내부 상태 값(meta-property)인 내부 슬롯([[Value]], [[Writable]], [[Enumerable]], [[Configurable]])이다. 따라서 프로퍼티 어트리뷰트에 직접 접근할 수 없지만, Object.getOwnPropertyDescriptor 메소드를 사용하여 간접적으로 확인할 수는 있다. 1234567const person = { name: 'Lee'};// 프로퍼티 어트리뷰트 정보를 제공하는 프로퍼티 디스크립터 객체를 반환한다.console.log(Object.getOwnPropertyDescriptor(person, 'name'));// {value: \"Lee\", writable: true, enumerable: true, configurable: true} Object.getOwnPropertyDescriptor 메소드를 호출할 때, 첫번째 매개변수에는 객체의 참조를 전달하고 두번째 매개변수에는 프로퍼티 키를 문자열로 전달한다. 이때 Object.getOwnPropertyDescriptor 메소드는 프로퍼티 어트리뷰트 정보를 제공하는 프로퍼티 디스크립터(PropertyDescriptor) 객체를 반환한다. 만약 존재하지 않는 프로퍼티나 상속받은 프로퍼티에 대한 프로퍼티 디스크립터를 요구하면 undefined가 반환된다. Object.getOwnPropertyDescriptor 메소드는 하나의 프로퍼티에 대해 프로퍼티 디스크립터 객체를 반환하지만 ES8에서 도입된 Object.getOwnPropertyDescriptors 메소드는 모든 프로퍼티의 프로퍼티 어트리뷰트 정보를 제공하는 프로퍼티 디스크립터 객체들을 반환한다. 123456789101112131415const person = { name: 'Lee'};// 프로퍼티 동적 생성person.age = 20;// 모든 프로퍼티의 프로퍼티 어트리뷰트 정보를 제공하는 프로퍼티 디스크립터 객체들을 반환한다.console.log(Object.getOwnPropertyDescriptors(person));/*{ name: {value: \"Lee\", writable: true, enumerable: true, configurable: true}, age: {value: 20, writable: true, enumerable: true, configurable: true}}*/ 3. 데이터 프로퍼티와 접근자 프로퍼티프로퍼티는 데이터 프로퍼티와 접근자 프로퍼티로 구분할 수 있다. 데이터 프로퍼티(Data property)키와 값으로 구성된 일반적인 프로퍼티이다. 지금까지 살펴본 모든 프로퍼티는 데이터 프로퍼티이다. 접근자 프로퍼티 (Accessor property)자체적으로 값을 갖지 않고 다른 데이터의 프로퍼티 값을 읽거나 저장할 떄 호출되는 접근자 함수로 구성된 프로퍼티이다. 3.1 데이터 프로퍼티데이터 프로퍼티(Data property)는 아래와 같은 프로퍼티 어트리뷰트를 갖는다. 이 프로퍼티 어트리뷰트는 자바스크립트 엔진이 프로퍼티를 생성할 때, 기본값으로 자동 정의된다. 프로퍼티 어트리뷰트 프로퍼티 디스크립터 객체의 프로퍼티 설명 [[Value]] value - 프로퍼티 키로 프로퍼티 값에 접근하면 반환되는 값이다.- 프로퍼티 키로 프로퍼티 값을 저장하면 [[Value]]에 값을 저장한다.이때 프로퍼티가 없으면 프로퍼티를 생성하고 생성된 프로퍼티의 [[Value]]에 값을 저장한다. [[Writable]] writable - 프로퍼티 값의 변경 가능 여부를 나타내며 불리언 값을 갖는다.-[[Writable]]의 값이 false인 경우, 해당 프로퍼티의 [[Value]]의 값을 변경할 수 없는 읽기 전용 프로퍼티가 된다. [[Configurable]] configurable - 프로퍼티의 재정의 가능 여부를 나타내며 불리언 값을 갖는다.- [[Configurable]]의 값이 false인 경우, 해당 프로퍼티의 삭제, 프로퍼티 어트리뷰트 값의 변경이 금지된다. 단, [[Writable]]이 true인 경우, [[Value]]의 변경과 [[Writable]]을 false로 변경하는 것은 허용된다. 1234567const person = { name: 'Lee'};// 프로퍼티 어트리뷰트 정보를 제공하는 프로퍼티 디스크립터 객체를 취득한다.console.log(Object.getOwnPropertyDescriptor(person, 'name'));// {value: \"Lee\", writable: true, enumerable: true, configurable: true} Object.getOwnPropertyDescriptor 메소드가 반환한 프로퍼티 디스크립터 객체를 살펴보면 value 프로퍼티의 값은 ‘Lee’이다. 이는 프로퍼티 어트리뷰트 [[Value]]의 값이 ‘Lee’인 것을 의미한다. writable, enumerable, configurable 프로퍼티 모두 true를 갖는다. 이것은 프로퍼티 어트리뷰트 [[Writable]], [[Enumerable]], [[Configurable]]의 값이 모두 true인 것을 말한다. 이처럼 프로퍼티가 생성될 때 [[Value]]의 값은 프로퍼티 값으로 초기화되며 [[Writable]], [[Enumerable]], [[Configurable]]의 기본값 true로 초기화된다. 이것은 프로퍼티를 동적 추가하여도 마찬가지다. 1234567891011121314const person = { name: 'Lee'};// 프로퍼티 동적 생성person.age = 20;console.log(Object.getOwnPropertyDescriptors(person));/*{ name: {value: \"Lee\", writable: true, enumerable: true, configurable: true}, age: {value: 20, writable: true, enumerable: true, configurable: true}}*/ 3.2. 접근자 프로퍼티접근자 프로퍼티(Accessor property)는 자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수(Accessor function)로 구성된 프로퍼티다. 접근자 프로퍼티는 아래와 같은 프로퍼티 어트리뷰트를 갖는다. 프로퍼티 어트리뷰트 프로퍼티 디스크립터 객체의 프로퍼티 설명 [[Get]] get 접근자 프로퍼티를 통해 데이터 프로퍼티의 값을 읽을 때 호출되는 접근자 함수이다.즉, 접근자 프로퍼티 키로 프로퍼티 값에 접근하면 프로퍼티 어트리뷰트 [[Get]]의 값즉 getter 함수가 호출되고 그 결과가 프로퍼티 값으로 반환된다. [[Set]] set 접근자 프로퍼티를 통해 데이터 프로퍼티의 값을 저장할 때 호출되는 접근자 함수이다. 즉, 접근자 프로퍼티 키로 프로퍼티 값을 저장하면 프로퍼티 어트리뷰트 [[Set]]의 값, 즉 setter 함수가 호출되고 그 결과가 프로퍼티 값으로 저장된다. [[Enumerable]] enumerable 데이터 프로퍼티의 [[Enumerable]]와 같다. [[Configurable]] Configurable 데이터 프로퍼티의 [[Configurable]]와 같다. 접근자 함수는 getter/setter 함수라고도 부른다. 접근자 프로퍼티는 getter와 setter 함수를 모두 정의할 수도 있고 하나만 정의할 수도 있다. 아래 예제를 살펴보자. 123456789101112131415161718192021222324252627282930313233343536373839const person = { // 데이터 프로퍼티 firstName: 'Ungmo', lastName: 'Lee', // fullName은 접근자 함수로 구성된 접근자 프로퍼티이다. // getter 함수 get fullName() { return `${this.firstName} ${this.lastName}`; }, // setter 함수 set fullName(name) { [this.firstName, this.lastName] = name.split(' '); }};// 데이터 프로퍼티를 통한 프로퍼티 값의 참조.console.log(person.firstName + ' ' + person.lastName); // Ungmo Lee// 접근자 프로퍼티를 통한 프로퍼티 값의 저장// 접근자 프로퍼티 fullName에 값을 저장하면 setter 함수가 호출된다.person.fullName = 'Heegun Lee';console.log(person); // {firstName: \"Heegun\", lastName: \"Lee\"}// 접근자 프로퍼티를 통한 프로퍼티 값의 참조// 접근자 프로퍼티 fullName에 접근하면 getter 함수가 호출된다.console.log(person.fullName); // Heegun Lee// firstName는 데이터 프로퍼티이다.// 데이터 프로퍼티는 value, writable, enumerable, configurable 프로퍼티 어트리뷰트를 갖는다.let descriptor = Object.getOwnPropertyDescriptor(person, 'firstName');console.log(descriptor);// {value: \"Heegun\", writable: true, enumerable: true, configurable: true}// fullName는 접근자 프로퍼티이다.// 접근자 프로퍼티는 get, set, enumerable, configurable 프로퍼티 어트리뷰트를 갖는다.descriptor = Object.getOwnPropertyDescriptor(person, 'fullName');console.log(descriptor);// {get: ƒ, set: ƒ, enumerable: true, configurable: true} person 객체의 firstName과 lastName 프로퍼티는 일반적인 데이터 프로퍼티다. 메소드 앞에 get, set이 붙은 메소드가 있는데 이것들이 바로 getter와 setter 함수이고 getter/setter 함수의 이름 fullName이 접근자 프로퍼티이다. 접근자 프로퍼티는 자체적으로 값(프로퍼티 어트리뷰트 [[Value]])을 가지지 않으며 다만 데이터 프로퍼티의 값을 읽거나 저장할 때 관여할 뿐이다. 이를 내부 슬롯/메소드 관점에서 설명하면 다음과 같다. 접근자 프로퍼티 fullName으로 프로퍼티 값에 접근하면 내부적으로 [[Get]] 내부 메소드가 호출되어 아래와 같이 동작한다. ECMAScript 스펙에서 정의한 [[Get]] 내부 메소드의 사양을 만족시키는 구현체가 자바스크립트 엔진에 존재한다는 것이 중요하지 [[Get]]이란 이름으로 실제 자바스크립트 엔진이 구현되었는지는 중요하지 않다. 어차피 [[Get]] 내부 메소드에 직접 접근할 수도 없다. 프로퍼티 키가 유효한지 확인한다. 프로퍼티 키는 문자열 또는 심볼이어야 한다. 프로퍼티 키 “fullName”은 문자열이므로 유효한 프로퍼티 키이다. 프로토타입 체인에서 프로퍼티를 검색한다. person 객체에 fullName 프로퍼티가 존재한다. 프로토타입 프로토타입(prototype)은 어떤 객체의 상위(부모) 객체의 역할을 하는 객체이다. 프로토타입은 하위(자식) 객체에게 자신의 프로퍼티와 메소드를 상속한다. 프로토타입 객체의 프로퍼티나 메소드를 상속받은 하위 객체는 자신의 프로퍼티 또는 메소드인 것처럼 자유롭게 사용할 수 있다. 프로토타입 체인은 프로토타입이 단방향 링크드 리스트 형태로 연결되어 있는 상속 구조를 말한다. 객체의 프로퍼티나 메소드에 접근하려고 할 때 해당 객체에 접근하려는 프로퍼티 또는 메소드가 없다면 프로토타입 체인을 따라 프로토타입의 프로퍼티나 메소드를 차례대로 검색한다. 프로토타입과 프로토타입 체인에 대해서는 “19. 프로토타입”에서 자세히 살펴보도록 하자. 검색된 fullName 프로퍼티가 데이터 프로퍼티인지 접근자 프로퍼티인지 확인한다. fullName 프로퍼티는 접근자 프로퍼티이다. 접근자 프로퍼티 fullName의 프로퍼티 어트리뷰트 [[Get]]의 값, 즉 getter 함수를 호출하여 그 결과를 반환한다. 프로퍼티 fullName의 프로퍼티 어트리뷰트 [[Get]]의 값은 Object.getOwnPropertyDescriptor 메소드가 반환하는 프로퍼티 디스크립터(PropertyDescriptor) 객체의 get 프로퍼티 값과 같다. 접근자 프로퍼티와 데이터 프로퍼티 구별 방법은 아래와 같다. 1234567// 일반 객체의 __proto__는 접근자 프로퍼티이다.Object.getOwnPropertyDescriptor(Object.prototype, '__proto__');// {get: ƒ, set: ƒ, enumerable: false, configurable: true}// 함수 객체의 prototype은 데이터 프로퍼티이다.Object.getOwnPropertyDescriptor(function() {}, 'prototype');// {value: {…}, writable: true, enumerable: false, configurable: false} Object.getOwnPropertyDescriptor 메소드가 반환한 프로퍼티 어트리뷰트를 객체로 표현한 프로퍼티 디스크립터 객체를 유심히 살펴보자. 접근자 프로퍼티와 데이터 프로퍼티의 프로퍼티 디스크립터 객체의 프로퍼티가 다른 것을 알 수 있다. 4. 프로퍼티 정의프로퍼티 정의란 새로운 프로퍼티를 추가하면서 프로퍼티 어트리뷰트를 명시적으로 정의하거나, 기존 프로퍼티의 프로퍼티 어트리뷰트를 재정의하는 것을 말한다. .예를 들어 프로퍼티 값을 갱신 가능하도록 할 것인지, 프로퍼티를 열거 가능하도록 할 것인지, 프로퍼티를 재정의 가능하도록 할 것인지 정의할 수 있다. 이를 통해 객체의 프로퍼티가 어떻게 동작해야 하는지를 명확히 정의할 수 있다. Object.defineProperty 메소드를 사용하면 프로퍼티의 어트리뷰트를 정의할 수 있다. 인수는 객체의 참조와 데이터 프로퍼티의 키인 문자열 그리고 프로퍼티 디스크립터 객체를 전달한다. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566const person = {};// 데이터 프로퍼티 정의Object.defineProperty(person, 'firstName', { value: 'Ungmo', writable: true, enumerable: true, configurable: true});Object.defineProperty(person, 'lastName', { value: 'Lee'});let descriptor = Object.getOwnPropertyDescriptor(person, 'firstName');console.log('firstName', descriptor);// firstName {value: \"Ungmo\", writable: true, enumerable: true, configurable: true}// 디스크립터 객체의 프로퍼티를 누락시키면 undefined, false가 기본값이다.descriptor = Object.getOwnPropertyDescriptor(person, 'lastName');console.log('lastName', descriptor);// lastName {value: \"Lee\", writable: false, enumerable: false, configurable: false}// [[Enumerable]]의 값이 false인 경우,// 해당 프로퍼티는 for…in 문이나 Object.keys 등으로 열거할 수 없다.// lastName 프로퍼티는 [[Enumerable]]의 값이 false이므로 열거되지 않는다.console.log(Object.keys(person)); // [\"firstName\"]// [[Writable]]의 값이 false인 경우, 해당 프로퍼티의 [[Value]]의 값을 변경할 수 없다.// lastName 프로퍼티는 [[Writable]]의 값이 false이므로 값을 변경할 수 없다.// 이때 값을 변경하면 에러는 발생하지 않고 무시된다.person.lastName = 'Kim';// [[Configurable]]의 값이 false인 경우, 해당 프로퍼티를 삭제할 수 없다.// lastName 프로퍼티는 [[Configurable]]의 값이 false이므로 삭제할 수 없다.// 이때 프로퍼티를 삭제하면 에러는 발생하지 않고 무시된다.delete person.lastName;// [[Configurable]]의 값이 false인 경우, 해당 프로퍼티를 재정의할 수 없다.// Object.defineProperty(person, 'lastName', { enumerable: true });// Uncaught TypeError: Cannot redefine property: lastNamedescriptor = Object.getOwnPropertyDescriptor(person, 'lastName');console.log('lastName', descriptor);// lastName {value: \"Lee\", writable: false, enumerable: false, configurable: false}// 접근자 프로퍼티 정의Object.defineProperty(person, 'fullName', { // getter 함수 get() { return `${this.firstName} ${this.lastName}`; }, // setter 함수 set(name) { [this.firstName, this.lastName] = name.split(' '); }, enumerable: true, configurable: true});descriptor = Object.getOwnPropertyDescriptor(person, 'fullName');console.log('fullName', descriptor);// fullName {get: ƒ, set: ƒ, enumerable: true, configurable: true}person.fullName = 'Heegun Lee';console.log(person); // {firstName: \"Heegun\", lastName: \"Lee\"} Object.defineProperty 메소드로 프로퍼티 정의할 때 프로퍼티 디스크립터 객체의 프로퍼티를 일부 생략할 수 있다. 프로퍼티 디스크립터 객체에서 생략된 어트리뷰트는 아래와 같이 기본값이 적용된다. 프로퍼티 디스크립터 객체의 프로퍼티 대응하는 프로퍼티 어트리뷰트 디스크립터 객체의 프로퍼트 누락 시의 기본값 value [[value]] undefined get [[Get]] undefined set [[Set]] undefined writable [[Writable]] false ennumerable [[ennumerable]] false configuration [[Configuration]] false Object.defineProperty 메소드는 한번에 하나의 프로퍼티만 정의할 수 있다. Object.defineProperties 메소드를 사용하면 여러 개의 프로퍼티를 한번에 정의할 수 있다. 123456789101112131415161718192021222324252627282930313233const person = {};Object.defineProperties(person, { // 데이터 프로퍼티 정의 firstName: { value: 'Ungmo', writable: true, enumerable: true, configurable: true }, lastName: { value: 'Lee', writable: true, enumerable: true, configurable: true }, // 접근자 프로퍼티 정의 fullName: { // getter 함수 get() { return `${this.firstName} ${this.lastName}`; }, // setter 함수 set(name) { [this.firstName, this.lastName] = name.split(' '); }, enumerable: true, configurable: true }});person.fullName = 'Heegun Lee';console.log(person); // {firstName: \"Heegun\", lastName: \"Lee\"} 5. 객체 변경 방지객체는 변경 가능한 값이므로 재할당없이 직접 변경이 가능하다. 즉, 프로퍼티를 추가하거나 삭제할 수 있고, 프로퍼티의 값을 갱신할 수 있으며 Object.defineProperty 또는 Object.defineProperties 메소드를 사용하여 프로퍼티 어트리뷰트를 재정의할 수도 있다. 자바스크립트는 객체의 변경을 방지할 수 있는 다양한 메소드를 제공한다. 객체 변경 방지 메소드 들은 객체의 변경을 금지하는 강도가 다르다. 5.1. 객체 확장 금지Object.preventExtensions 메소드는 객체의 확장을 금지한다. 객체 확장 금지란 프로퍼티 추가 금지를 의미한다. 즉, 확장이 금지된 객체는 프로퍼티 추가가 금지된다. 프로퍼티는 프로퍼티 동적 추가와 Object.defineProperty 메소드로 추가할 수 있다. 이 두가지 추가 방법이 모두 금지된다. 확장이 금지된 객체인지 여부는 Object.isExtensible 메소드로 확인 할 수 있다. 12345678910111213141516171819202122const person = { name: 'Lee' };// person 객체는 확장이 금지된 객체가 아니다.console.log(Object.isExtensible(person)); // true// person 객체의 확장을 금지하여 프로퍼티 추가를 금지한다.Object.preventExtensions(person);// person 객체는 확장이 금지된 객체다.console.log(Object.isExtensible(person)); // false// 프로퍼티 추가가 금지된다.person.age = 20; // 무시. strict mode에서는 에러console.log(person); // {name: \"Lee\"}// 프로퍼티 추가는 금지되지만 삭제는 가능하다.delete person.name;console.log(person); // {}// 프로퍼티 정의에 의한 프로퍼티 추가도 금지된다.Object.defineProperty(person, 'age', { value: 20 });// TypeError: Cannot define property age, object is not extensible 5.2. 객체 밀봉Object.seal 메소드는 객체를 밀봉한다. 객체 밀봉(seal)이란 프로퍼티 추가 및 삭제와 프로퍼티 어트리뷰트 재정의 금지를 의미한다. 즉, 밀봉된 객체는 읽기와 쓰기만 가능하게 된다. 밀봉된 객체인지 여부는 Object.isSealed 메소드로 확인 할 수 있다. 12345678910111213141516171819202122232425262728293031323334const person = { name: 'Lee' };// person 객체는 밀봉(seal)된 객체가 아니다.console.log(Object.isSealed(person)); // false// person 객체를 밀봉(seal)하여 프로퍼티 추가, 삭제, 재정의를 금지한다.Object.seal(person);// person 객체는 밀봉(seal)된 객체다.console.log(Object.isSealed(person)); // true// 밀봉(seal)된 객체는 configurable가 false이다.console.log(Object.getOwnPropertyDescriptors(person));/*{ name: {value: \"Lee\", writable: true, enumerable: true, configurable: false},}*/// 프로퍼티 추가가 금지된다.person.age = 20; // 무시. strict mode에서는 에러console.log(person); // {name: \"Lee\"}// 프로퍼티 삭제가 금지된다.delete person.name; // 무시. strict mode에서는 에러console.log(person); // {name: \"Lee\"}// 프로퍼티 값 갱신은 가능하다.Object.defineProperty(person, 'name', { value: 'Kim' });console.log(person); // {name: \"Kim\"}// 프로퍼티 어트리뷰트 재정의가 금지된다.Object.defineProperty(person, 'name', { configurable: true });// TypeError: Cannot redefine property: name 5.3. 객체 동결Object.freeze 메소드는 객체를 동결한다. 객체 동결(freeze)이란 프로퍼티 추가 및 삭제와 프로퍼티 어트리뷰트 재정의 금지, 프로퍼티 값 갱신 금지를 의미한다. 즉, 동결된 객체는 읽기만 가능하게 된다. 밀봉된 객체인지 여부는 Object.isFrozen 메소드로 확인 할 수 있다. 12345678910111213141516171819202122232425262728293031323334const person = { name: 'Lee' };// person 객체는 동결(freeze)된 객체가 아니다.console.log(Object.isFrozen(person)); // false// person 객체를 동결(freeze)하여 프로퍼티 추가, 삭제, 재정의, 쓰기를 금지한다.Object.freeze(person);// person 객체는 동결(freeze)된 객체다.console.log(Object.isFrozen(person)); // true// 동결(freeze)된 객체는 writable과 configurable가 false이다.console.log(Object.getOwnPropertyDescriptors(person));/*{ name: {value: \"Lee\", writable: false, enumerable: true, configurable: false},}*/// 프로퍼티 추가가 금지된다.person.age = 20; // 무시. strict mode에서는 에러console.log(person); // {name: \"Lee\"}// 프로퍼티 삭제가 금지된다.delete person.name; // 무시. strict mode에서는 에러console.log(person); // {name: \"Lee\"}// 프로퍼티 값 갱신이 금지된다.person.name = 'Kim'; // 무시. strict mode에서는 에러console.log(person); // {name: \"Lee\"}// 프로퍼티 어트리뷰트 재정의가 금지된다.Object.defineProperty(person, 'name', { value: 'Kim' });// TypeError: Cannot redefine property: name 5.4. 불변객체지금까지 살펴본 변경 방지 메소드들은 얕은 변경 방지(Shallow only)로 직속 프로퍼티만 변경이 방지되고 중첩 객체까지는 영향을 주지는 못하다. 따라서 Object.freeze 메소드로 객체를 동결하여도 중첩 객체까지 동결할 수 없다. 1234567891011121314const person = { name: 'Lee', address: { city: 'Seoul' }};// 얕은 객체 동결Object.freeze(person);console.log(Object.isFrozen(person)); // true// 중첩 객체까지 동결하지 못한다.console.log(Object.isFrozen(person.address)); // falseperson.address.city = 'Busan';console.log(person); // {name: \"Lee\", address: {city: \"Busan\"}} 객체의 중첩 객체까지 동결하여 변경이 불가능한 읽기 전용의 불변 객체(immutable object, “12.6. 참조에 의한 전달과 외부 상태의 변경” 참고)를 구현하려면 객체를 값으로 갖는 모든 프로퍼티에 대해 재귀적으로 Object.freeze 메소드를 호출해야 한다. 123456789101112131415161718192021222324252627282930function deepFreeze(target) { // 객체가 아니거나 동결된 객체는 무시하고 객체이고 동결되지 않은 객체만 동결한다. if (target &amp;&amp; typeof target === 'object' &amp;&amp; !Object.isFrozen(target)) { Object.freeze(target); /* 모든 프로퍼티를 순회하며 재귀적으로 동결한다. Object.keys 메소드는 객체 자신의 열거 가능한 프로퍼티 키를 배열로 반환한다. (\"19.15.2. Object.keys/values/entries 메소드\" 참고) forEach 메소드는 배열을 순회하며 배열의 각 요소에 대하여 콜백 함수를 실행한다. (\"27.9.2. Array.prototype.forEach\" 참고) */ Object.keys(target).forEach(key =&gt; deepFreeze(target[key])); } return target;}const person = { name: 'Lee', address: { city: 'Seoul' }};// 깊은 객체 동결deepFreeze(person);console.log(Object.isFrozen(person)); // true// 중첩 객체까지 동결한다.console.log(Object.isFrozen(person.address)); // trueperson.address.city = 'Busan';console.log(person); // {name: \"Lee\", address: {city: \"Seoul\"}}","link":"/2020/03/property_attribute/"},{"title":"스코프 | javaScript","text":"1.스코프란?스코프(Scope, 유효범위)는 자바스크립트를 포함한 모든 프로그래밍 언어의 기본적이며 중요한 개념이다. 스코프의 이해가 부족하면 다른 개념을 이해하기 어려울 수 있다. 더욱이 자바스크립트의 스코프는 다른 언어의 스코프와 구별되는 특징을 가지므로 주의가 필요하다. 그리고 var 키워드로 선언한 변수와 let 또는 const 키워드로 선언한 변수의 스코프도 다르게 동작한다. 스코프는 변수 그리고 함수와 깊은 관련이 있다. 함수의 매개변수는 함수 몸체 내부에서만 참조할 수 있고 함수 몸체 외부에서는 참조할 수 없다고 했다. 이것은 매개변수를 참조할 수 있는 유효한 범위, 즉 매개변수의 스코프가 함수 몸체 내부로 한정되기 때문이다. 1234567891011function add(x, y) { // 매개변수는 함수 몸체 내부에서만 참조할 수 있다. // 즉, 매개변수의 스코프(유효범위)는 함수 몸체 내부이다. console.log(x, y); // 2 5 return x + y;}add(2, 5);// 매개변수는 함수 몸체 내부에서만 참조할 수 있다.console.log(x, y); // ReferenceError: x is not defined 변수는 코드의 가장 바깥 영역뿐만 아니라 코드 블록이나 함수 몸체 내에서도 선언할 수 있다. 이때 코드 블록이나 함수는 중첩될 수 있다. 12345678910111213141516171819202122var var1 = 1; // 코드의 가장 바깥 영역에서 선언된 변수if (true) { var var2 = 2; // 코드 블록 내에서 선언된 변수 if (true) { var var3 = 3; // 중첩된 코드 블록 내에서 선언된 변수 }}function foo() { var var4 = 4; // 함수 내에서 선언된 변수 function bar() { var var5 = 5; // 중첩된 함수 내에서 선언된 변수 }}console.log(var1); // 1console.log(var2); // 2console.log(var3); // 3console.log(var4); // ReferenceError: var4 is not definedconsole.log(var5); // ReferenceError: var5 is not defined 모든 식별자(변수 이름, 함수 이름, 클래스 이름 등)는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정된다. 이를 스코프(Scope, 유효범위)라 한다. 즉, 스코프는 식별자가 유효한 범위를 말한다. 아래 예제가 어떻게 동작할지 생각해보자. 12345678910var x = 'global';function foo() { var x = 'local'; console.log(x); // ①}foo();console.log(x); // ② 자바스크립트 엔진은 이름이 같은 두개의 변수 중에서 어떤 변수를 참조해야 할 것인지를 결정해야 한다. 자바스크립트 엔진은 스코프를 통해 어떤 변수를 참조해야 할 것인지를 결정한다. 즉, 스코프란 자바스크립트 엔진이 식별자를 검색할 때 사용하는 규칙이라고도 할 수 있다. 자바스크립트 엔진은 코드를 실행할 때, 코드의 문맥(Context)를 고려한다. 코드가 어디서 실행되며 주변에 어떤 코드들이 있는지에 따라 위 예제의 ①과 ②처럼 동일한 코드도 다른 결과를 만들어 낸다. var 키워드로 선언한 변수의 중복 선언 var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언이 허용된다. 이는 의도치 않게 변수값이 재할당되어 변경되는 부작용을 발생시킨다.123456789function foo() { var x = 1; // var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용한다. // 아래 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작한다. var x = 2; console.log(x); // 2}foo(); 하지만 let이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용하지 않는다. 1234567function bar() { let x = 1; // let이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용하지 않는다. let x = 2; // SyntaxError: Identifier 'x' has already been declared}bar(); 2. 스코프의 종류코드는 전역(global)과 지역(local)으로 구분할 수 있다. 이때 변수는 자신이 선언된 위치(전역 또는 지역)에 의해 자신이 유효한 범위인 스코프가 결정된다. 즉, 전역에서 선언된 변수는 전역 스코프를 갖는 전역 변수이고, 지역에서 선언된 변수는 지역 스코프를 갖는 지역 변수이다. 2.1. 전역과 전역 스코프전역이란 코드의 가장 바깥 영역을 말한다. 전역은 전역 스코프(global scope)를 만든다. 전역에 변수를 선언하면 전역 스코프를 갖는 전역 변수(global variable)가 된다. 전역 변수는 어디서든지 참조할 수 있다. 2.2. 지역과 지역 스코프지역이란 함수 몸체 내부를 말한다. 지역은 지역 스코프(local scope)를 만든다. 지역에 변수를 선언하면 지역 스코프를 갖는 지역 변수(local variable)가 된다.지역 변수는 자신의 지역 스코프와 하위 지역 스코프에서 유효하다. 3.스코프 체인함수는 전역에서 정의할 수도 있고 함수 몸체 내부에서 정의할 수도 있다. 함수 몸체 내부에서 함수가 정의된 것을 ‘함수의 중첩’이라 한다. 함수 몸체 내부에서 정의한 함수를 ‘중첩 함수(nested function)’, 중첩 함수를 포함하는 함수를 ‘외부 함수(outer function)’라고 부른다. 함수는 중첩될 수 있으므로 함수의 지역 스코프도 중첩될 수 있다.이는 스코프는 함수의 중첩에 의해 계층적 구조를 갖는다는 것을 의미한다. 다시 말해 중첩 함수의 지역 스코프는 중첩 함수를 포함하는 외부 함수의 지역 스코프와 계층적 구조를 갖는다. 이떄 외부 함수의 지역 스코프를 중첩 함수의 상위 스코프라고 한다. 모든 지역 스코프의 최상위 스코프는 전역 스코프이다. 이렇게 스코프가 계층적으로 연결된 것을 스코프 체인(scope chain)이라 부른다. 위 그림에서 스코프 체인은 최상위 스코프인 전역 스코프, 전역에서 선언된 함수 outer의 지역 스코프, 함수 outer 내부에서 선언된 함수 inner의 지역 스코프로 이루어진다. 변수를 참조할 때, 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다. 이를 통해 상위 스코프에서 선언한 변수를 하위 스코프에서도 참조할 수 있다. 렉시컬 환경(Lexical Environment) 스코프 체인은 실행 컨텍스트(Execution Context)의 렉시컬 환경(Lexical Environment)을 단방향으로 연결(Channing)한 것이다. 전역 렉시컬 환경은 코드가 로드되면 곧바로 생성되고 함수의 렉시컬 환경은 함수가 호출되면 곧바로 생성된다. 이에 대해서는 “22. 실행 컨텍스트”에서 자세히 살펴보자.3.1. 스코프 체인에 의한 변수 검색자바스크립트 엔진은 스코프 체인을 따라 변수를 참조하는 코드의 스코프에서 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다. 절대 하위 스코프로 내려가면 식별자를 검색하는 일은 없다. 이는 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만 하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수 없다는 것을 의미한다. 스코프 체인으로 연결된 스코프의 계층적 구조는 부자 관계로 이루어진 상속(Inheritance)과 유사하다. 상속을 통해 부모의 자산을 자식이 자유롭게 사용할 수 있지만 자식의 자산을 부모가 사용할 수는 없다. 스코프 체인도 마찬가지 개념이다. 3.2. 스코프 체인에 의한 함수 검색아래 예제를 살펴보자. 전역에서 정의된 foo 함수와 bar 함수 내부에서 정의된 foo 함수가 있다. 123456789101112131415// 전역 함수function foo() { console.log('global function foo');}function bar() { // 중첩 함수 function foo() { console.log('local function foo'); } foo(); // ①}bar(); 함수 선언문으로 함수를 정의하면 자바스크립트 엔진에 의해 다른 코드가 실행되기 이전에 함수 객체가 먼저 생성된다. 그리고 자바스크립트 엔진은 함수 이름과 동일한 이름의 변수를 암묵적으로 선언하고 생성된 함수 객체를 할당한다. ①에서 함수 foo를 호출하면 자바스크립트 엔진은 함수를 호출하기 위해 먼저 함수를 가리키는 변수 foo를 검색한다. 이처럼 함수도 변수에 할당되기 때문에 스코프를 갖는다. 따라서 스코프를 “변수를 검색할 때 사용하는 규칙”이라고 표현하기 보다는 “식별자를 검색하는 규칙”이라고 표현하는 것이 보다 적합하다. 4. 함수 레벨 스코프지역은 함수 몸체 내부를 말하고 지역은 지역 스코프를 만든다고 했다. 이는 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성된다는 의미이다. C나 Java 등 대부분의 프로그래밍 언어는 함수 몸체 만이 아니라 모든 코드 블록(if, for, while, try/catch 등)이 지역 스코프를 만든다. 이러한 특성을 블록 레벨 스코프(Block level scope)라 한다. 하지만 var 키워드로 선언된 변수는 오로지 함수의 코드 블록 만을 지역 스코프로 인정한다. 이러한 특성을 함수 레벨 스코프(Function level scope)라 한다. 아래 예제를 살펴보자. 1234567891011var x = 1;if (true) { // var 키워드로 선언된 변수는 함수의 코드 블록 만을 지역 스코프로 인정한다. // 함수 밖에서 선언된 변수는 코드 블록 내에서 선언되었다 할 지라도 모두 전역 변수이다. // 따라서 x는 전역 변수이다. 이미 선언된 전역 변수 x가 있으므로 변수 x는 중복 선언된다. // 이는 의도치 않게 변수값이 변경되는 부작용을 발생시킨다. var x = 10;}console.log(x); // 10 전역 변수 x가 선언되었고 if 문의 코드 블록 내에도 변수 x가 선언되었다. 이때 if 문의 코드 블록 내에서 선언된 변수 x는 전역 변수다. var 키워드로 선언된 변수는 블록 레벨 스코프를 인정하기 때문에 함수 밖에서 선언된 변수는 코드 블록 내에서 선언되었다 할 지라도 모두 전역 변수이다. 따라서 전역 변수 x는 중복 선언되고 그 결과 의도치 않은 전역 변수의 값이 재할당된다. 하나 더 예제를 살펴보자. 123456789var i = 10;// for문에서 선언한 i는 전역 변수이다. 이미 선언된 전역 변수 i가 있으므로 중복 선언된다.for (var i = 0; i &lt; 5; i++) { console.log(i); // 0 1 2 3 4}// 의도치 않게 변수의 값이 변경되었다.console.log(i); // 5 var 키워드로 선언된 변수는 블록 레벨 스코프를 인정하지 않기 때문에 변수 i는 전역 변수가 된다. 따라서 전역 변수 i는 중복 선언되고 그 결과 의도치 않은 전역 변수의 값이 재할당된다. var 키워드로 선언된 변수는 오로지 함수의 코드 블록 만을 지역 스코프로 인정하지만, ES6에서 도입된 let, const 키워드는 블록 레벨 스코프를 지원한다. 5. 렉시컬 스코프아래 예제의 실행 결과를 예측해보자. 12345678910111213var x = 1;function foo() { var x = 10; bar();}function bar() { console.log(x);}foo(); // ?bar(); // ? 렉시컬 스코프 또는 정적 스코프라 한다. 동적 스코프 방식처럼 상위 스코프가 동적으로 변하지 않고 함수 정의가 평가되는 시점에 상위 스코프가 정적으로 결정되기 떄문에 정적 스코프라고 부른다. 자바스크립트를 비롯한 대부분의 프로그래밍 언어는 렉시컬 스코프를 따른다. 자바스크립트는 렉시컬 스코프를 따르므로 함수를 어디서 호출했는지가 아니라 함수를 어디서 정의했는지에 따라 상위 스코프를 결정한다.모든 함수 정의(함수 선언문 또는 함수 표현식)는 평가되어 함수 객체를 생성할 때, 자신이 정의된 스코프를 상위 스코프로서 기억한다.그리고 함수가 호출되면 언제나 자신이 기억하고 있는 자신이 정의된 스코프를 상위 스코프로 사용한다. 함수가 호출된 위치는 함수 자신이 기억하고 있는 스코프, 즉 상위 스코프 결정에 어떠한 영향을 주지 않는다. bar 함수가 호출되면 호출된 곳이 어디인지 관계없이 언제나 자신이 기억하고 있는 전역 스코프를 상위 스코프로 사용한다. 따라서 위 예제를 실행하면 전역 변수 x의 값 1을 두번 출력한다. 렉시컬 스코프는 클로저와 깊은 관계가 있다. 이에 대해서는 클로저에서 자세히 살펴보자!","link":"/2020/02/scope/"},{"title":"표현식과 문 | javaScript","text":"1. 값값(value)은 식(표현식, expression)이 평가(evaluate)되어 생성된 결과를 말합니다. 12345// 10 + 20은 평가되어 숫자값 30을 생성한다.10 + 20; // 30// 변수에는 10 + 20이 평가되어 숫자값 30을 변수에 할당한다.var sum = 10 + 20; # 2. 리터럴 리터럴은 값을 생성하는 가장 간단한 방법입니다. 즉, 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용하는 것입니다. 12345678910111213141516171819202122232425262728293031323334353637383940// 정수 리터럴100// 부동소수점 리터럴10.5// 2진수 리터럴0b010101// 8진수 리터럴(ES6에서 도입. 0o로 시작합니다.)0o101// 16진수 리터럴 (ES6에서 도입. 0x로 시작합니다.)0x41// 문자열 리터럴'Hello'\"World\"// 불리언 리터럴truefalse// null 리터럴null// undefined 리터럴undefined// 객체 리터럴{ name: 'Lee', address: 'Seoul' }// 배열 리터럴[ 1, 2, 3 ]// 함수 리터럴function() {}// 정규표현식 리터럴/[A-Z]+/g 3. 표현식표현식(expression)은 값으로 평가될 수 있는 문(statement)이다. 즉, 표현식이 평가되면 값을 생성하거나 값을 참조한다.앞서 살펴본 리터럴은 값으로 평가된다. 따라서 모든 식별자도 표현식이며 리터럴도 표현식인 셈이다. 1234567891011121314151617// 리터럴 표현식10'Hello'// 식별자 표현식 (선언이 이미 존재한다고 가정)sumperson.namearr[1]// 연산자 표현식10 + 20sum = 10sum !== 10// 함수/메소드 호출 표현식 (선언이 이미 존재한다고 가정)square()person.getName() 4. 문앞으로 자바스크립트를 설명할 때 “문(statement)”과 “표현식(expression)”이라는 용어가 자주 등장할 것이다. 따라서 문과 표현식은 확실히 이해할 필요가 있다. 문과 표현식을 구별하고 해석할 수 있다면 자바스크립트 엔진의 입장에서 코드를 읽을 수 있고 실행 결과 예측에 도움이 된다. 이는 버그를 줄이고 코드의 품질을 높여줄 것이다. 문(statement)은 프로그램을 구성하는 기본 단위이자 최소 실행 단위이다. 문의 집합으로 이루어진 것이 바로 프로그램이며 문을 작성하고 순서에 맞게 나열하는 것이 프로그래밍이다. 문은 여러 토큰들로 구성된다. 토큰(token)이란 문법적인 의미를 가지며, 문법적으로 더이상 나눌 수 없는 코드의 기본 요소를 의미한다. 예를 들어, 키워드, 식별자, 연산자, 리터럴, 세미콜론(;)이나 마침표(.) 등의 특수 기호는 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소이므로 모두 토큰이다. 1234567891011121314// 변수 선언문var x;// 표현식 문(할당문)x = 5;// 함수 선언문function foo () {}// 조건문if (x &gt; 1) { console.log(x); }// 반복문for (var i = 0; i &lt; 2; i++) { console.log(i); } 5. 세미콜론과 세미콜론 자동 삽입 기능세미콜론( ; )은 문의 종료를 나타낸다. 따라서 문은 세미콜론으로 끝나야 한다. 단, 0개 이상의 문을 중괄호로 묶은 코드 블록 { … } 뒤에는 세미콜론을 붙이지 않는다. 예를 들어, if 문, for 문, 함수 등의 코드 블록 뒤에는 세미콜론을 붙이지 않는다. 이들 코드 블록은 언제나 문의 종료를 의미하는 자체 종결성(self closing)을 갖기 때문이다. 문의 끝에 붙이는 세미콜론은 옵션이다. 즉, 세미콜론은 생략 가능하다. 이는 자바스크립트 엔진이 소스 코드를 해석할 때, 문의 끝이라고 예측되는 지점에 세미콜론을 자동으로 붙여주는 세미콜론 자동 삽입 기능(ASI, automatic semicolon insertion)이 암묵적으로 수행되기 때문이다. 하지만 세미콜론 자동 삽입 기능의 동작과 개발자의 예측이 일치하지 않는 경우가 간혹 있다. 정확히 말하면 아래 예제와 같이 개발자가 세미콜론 자동 삽입 기능의 동작을 제대로 예측하지 못해 제대로 활용하지 못하는 경우가 있다. 1234567891011121314function foo () { return {} // ASI의 동작 결과 =&gt; return; {}; // 개발자의 예측 =&gt; return {};}console.log(foo()); // undefinedvar bar = function () {}(function() {})();// ASI의 동작 결과 =&gt; var bar = function () {}(function() {})();// 개발자의 예측 =&gt; var bar = function () {}; (function() {})();// TypeError: (intermediate value)(...) is not a function 세미콜론을 반드시 붙여야 한다는 주장이 다수를 차지하지만 붙이지 말아야 한다 주장도 설득력이 있다. 하지만 ESLint와 같은 정적 분석 도구에서도 세미콜론 사용을 기본으로 설정하고 있고 (브랜든 아이크는 반대하고 있지만) TC39(ECMAScript 기술 위원회)도 세미콜론 사용을 권장하는 분위기이므로 이 책에서는 세미콜론을 붙이도록 하겠다. 6.표현식인 문과 표현식이 아닌 문표현식은 문의 일부일 수도 있고 그 자체로 문이 될 수도 있다. 123456// 변수 선언문은 값으로 평가될 수 없으므로 표현식이 아니다.var x;// 1, 2, 1 + 2, x = 1 + 2는 표현식이다.// x = 1 + 2은 표현식이면서 완전한 문이기도 하다.x = 1 + 2; 이처럼 표현식과 문은 유사하여 구별이 어렵다고 느낄 수 있다. 하지만 표현식과 문을 구별하는 방법은 의외로 간단하다. 표현식과 문을 구별하는 방법에 대해 살펴보자. 문에는 표현식인 문과 표현식이 아닌 문이 있다. 표현식인 문은 값으로 평가될 수 있는 문이며 표현식이 아닌 문은 값으로 평가될 수 없는 문을 말한다. 예를 들어 변수 선언문은 값으로 평가될 수 없다. 따라서 표현식이 아닌 문이다. 하지만 할당문은 값으로 평가될 수 있다. 따라서 표현식인 문이다. 표현식인 문과 표현식이 아닌 문을 구별하기 위한 가장 간단하고 명료한 방법은 변수에 할당해 보는 것이다. 표현식인 문은 값으로 평가되므로 변수에 할당할 수 있다. 하지만 표현식이 아닌 문은 값으로 평가할 수 없으므로 변수에 할당하면 에러가 발생한다. 아래 예제를 살펴보자. 12345// 변수 선언문은 표현식이 아닌 문이다.var x;// 할당문은 그 자체가 표현식이지만 완전한 문이기도 하다. 즉, 할당문은 표현식인 문이다.x = 100; 위 예제의 변수 선언문은 표현식이 아닌 문이다. 다시 말해 값으로 평가될 수 없다. 따라서 변수선언문은 값처럼 사용할 수 없다. 12// 표현식이 아닌 문은 값처럼 사용할 수 없다.var foo = var x; // SyntaxError: Unexpected token var","link":"/2020/02/statement/"},{"title":"전역 변수의 문제점 | javaScript","text":"전역 변수의 무분별한 사용은 위험하다. 전역 변수를 반드시 사용하여야 할 이유를 찾지 못한다면 지역 변수를 사용하여야 한다. 전역 변수의 문제점과 전역 변수의 사용을 억제할 수 있는 방법에 대해 살펴보도록 하자. 1. 변수의 생명 주기 1.1. 지역 변수의 생명 주기변수는 선언에 의해 생성되고 할당을 통해 값을 갖는다. 그리고 언젠가 소멸한다. 즉, 변수는 생물과 유사하게 생성되고 소멸되는 생명 주기(Life cycle)가 있다. 변수에 생명 주기가 없다면 한번 선언된 변수는 프로그램을 종료하지 않는 한 영원히 메모리 공간을 점유하게 된다. 변수는 자신이 선언된 위치에서 생성되고 소멸한다. 전역 변수의 생명 주기는 애플리케이션의 생명 주기와 같다. 하지만 함수 내부에서 선언된 지역 변수는 함수가 호출되면 생성되고 함수가 종료하면 소멸한다. 아래 예제를 살펴보자. 12345678function foo() { var x = 'local'; console.log(x); // local return x;}foo();console.log(x); // ReferenceError: x is not defined 지역 변수 x는 foo 함수가 호출되기 이전까지는 생성되지 않는다. foo 함수를 호출하지 않으면 함수 내부의 변수 선언문이 실행되지 않기 때문이다. “4.4. 변수 선언의 실행 시점과 변수 호이스팅”에서 살펴보았듯이 변수 선언은 다른 코드가 실행되기 이전에 변수 선언이 어디에 있던지 상관없이 가장 먼저 실행된다. 다시 말해, 변수 선언은 코드가 한 줄씩 순차적으로 실행되는 시점인 런타임(runtime)에 실행되는 것이 아니라 런타임 이전 단계에서 자바스크립트 엔진에 의해 먼저 실행된다. 그런데 엄밀히 말하자면 위 설명은 전역 변수에 한정된 것이다. 함수 내부에서 선언한 변수는 함수가 호출된 직후에 함수 몸체의 다른 코드가 실행되기 이전에 자바스크립트 엔진에 의해 먼저 실행된다. 위 예제의 foo 함수를 호출하면 함수 몸체의 다른 문들이 순차적으로 실행되기 이전에 변수 x의 선언문이 자바스크립트 엔진에 의해 가장 먼저 실행되어 변수 x가 선언되고 undefined로 초기화된다. 그 후, 함수 몸체의 문들이 순차적으로 실행되기 시작하고 변수 할당문이 실행되면 변수 x에 값이 할당된다. 그리고 함수가 종료하면 변수 x도 소멸되어 생명 주기가 종료된다. 따라서 함수 내부에서 선언된 지역 변수 x는 foo 함수가 호출되어 실행되는 동안에만 유효하다. 즉, 지역 변수의 생명 주기는 함수의 생명 주기와 일치한다. 지역 변수의 생명 주기 위 예제를 조금 변형한 퀴즈를 풀어보자. 아래 예제의 ①에서 출력되는 값은 무엇인가? 12345678910var x = 'gloabl';function foo() { console.log(x); // ① var x = 'local'; return x;}foo();console.log(x); // gloabl 함수 foo 내부에서 선언된 지역 변수 x는 ①의 시점에 이미 선언되고 undefined로 초기화 되었다. 따라서 전역 변수 x를 참조하는 것이 아니라 지역 변수 x를 참조하여 값을 출력한다. 즉, 지역 변수는 함수 전체에서 유효하다. 단, 변수 할당문이 실행되기 이전까지는 undefined 값을 갖는다.이처럼 호이스팅은 스코프를 단위로 동작한다. 전역 변수의 호이스팅은 전역 변수의 선언이 전역 스코프의 선두로 끌어 올려진 것처럼 동작한다. 따라서 전역 변수는 전역 전체에서 유효하다. 지역 변수의 호이스팅은 지역 변수의 선언이 지역 스코프의 선두로 끌어 올려진 것처럼 동작한다. 따라서 지역 변수는 함수 전체에서 유효하다. 즉, 호이스팅은 변수 선언이 스코프의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 말한다. 1.2. 전역 변수의 생명 주기함수와는 달리 전역 코드는 명시적인 호출없이 실행된다. 다시 말해 전역 코드는 함수 호출과 같이 전역 코드를 실행하는 특별한 진입점(entry point)이 없고 코드가 로드되자마자 곧바로 해석되고 실행된다.진입점(entry point)C나 Java으로 작성된 코드를 실행하면 가장 먼저 main 함수가 호출된다. 이 main 함수는 프로그램이 시작되는 지점이므로 이를 진입점 또는 시작점이라고 한다.함수는 함수 몸체의 마지막 문 또는 return 문이 실행되면 종료한다. 하지만 전역 코드에는 return 문을 사용할 수 없으므로 마지막 문이 실행되어 더 이상 실행할 문이 없을 때 종료한다. return 문의 위치return 문은 함수 몸체 내부에서만 사용할 수 있다. 전역에서 return 문을 사용하면 문법 에러(SyntaxError: Illegal return statement)가 발생한다. 참고로 Node.js는 모듈 시스템에 의해 파일 별로 독립적인 파일 스코프를 갖는다. 따라서 Node.js 환경에서는 파일의 가장 바깥 영역에 return 문을 사용해도 에러가 발생하지 않는다.var 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 된다. 이는 전역 변수의 생명 주기가 전역 객체의 생명 주기와 일치한다는 것을 말한다. 전역 객체전역 객체(Global Object)는 코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 생성되는 특수한 객체이다. 전역 객체는 클라이언트 사이드 환경(브라우저)에서는 window, 서버 사이드 환경(Node.js)에서는 global 객체를 의미한다.전역 객체에는 표준 빌트인 객체(Object, String, Number, Function, Array…)들과 환경에 따른 호스트 객체(클라이언트 web API 또는 Node.js의 호스트 API), 그리고 var 키워드로 선언한 전역 변수와 전역 함수를 프로퍼티로 갖는다. 전역 객체에 대해서는 “21.4. 전역 객체” 그리고 “23. 실행 컨텍스트”에서 자세히 살펴볼 것이다.브라우저 환경에서 전역 객체는 window이므로 브라우저 환경에서 var 키워드로 선언한 전역 변수는 전역 객체 window의 프로퍼티이다. 이 전역 객체 window는 웹페이지를 종료하기 전까지 유효하다. 따라서 브라우저 환경에서 var 키워드로 선언한 전역 변수는 웹페이지를 종료할 때까지 유효하다. 즉, 전역 변수의 생명 주기는 전역 객체의 생명 주기와 일치한다. 전역 변수의 생명 주기 2. 전역 변수의 문제점암묵적 결합전역 변수를 선언한 의도는 전역, 즉 코드 어디에서든지 전역 변수를 사용하겠다는 것이다. 이는 모든 코드가 전역 변수를 참조하고 변경할 수 있는 암묵적 결합(implicit coupling)을 허용하는 것으로 변수의 유효 범위가 크면 클수록 코드의 가독성은 나빠지고 의도치 않게 상태가 변경될 수 있는 위험성도 높아진다. 긴 생명 주기전역 변수는 생명 주기가 길다. 따라서 메모리 리소스도 오랜 기간 소비한다. 또한 전역 변수의 상태를 변경할 수 있는 시간도 길고, 모든 함수가 참조할 수 있기 때문에 상태를 변경할 기회도 많다. 더욱이 var 키워드는 변수의 중복 선언을 허용하므로 생명 주기가 긴 전역 변수는 변수 이름이 중복될 가능성이 있다. 변수 이름이 중복되면 의도치 않은 재할당이 이루어진다. 12345678var x = 1;// ...// 변수의 중복 선언. 기존 변수에 값을 재할당한다.var x = 100;console.log(x); // 100 지역 변수는 전역 변수보다 생명 주기가 휠씬 짧다. 크지 않은 함수의 지역 변수는 생존 시간이 극히 짧다. 따라서 지역 변수의 상태를 변경할 수 있는 시간도 짧고 기회도 적다. 이는 전역 변수보다 상태 변경에 의한 오류가 발생할 확률이 작다는 것을 의미한다. 또한 메모리 리소소도 짧은 기간만 소비한다.스코프 체인 상에서 종점에 존재전역 변수는 또 하나의 문제는 스코프 체인 상에서 종점에 존재한다는 것이다. 이는 변수를 검색할 때 전역 변수가 가장 마지막에 검색된다는 것을 말한다. 즉, 전역 변수의 검색 속도가 가장 느리다. 검색 속도의 차이는 그다지 크지 않지만 속도의 차이는 분명히 있다. 네임 스페이스 오염자바스크립트에서 가장 큰 문제점 중의 하나는 파일이 분리되어 있다하여도 하나의 전역 스코프를 공유한다는 것이다. 따라서 다른 파일 내에서 동일한 이름으로 명명된 변수나 함수가 같은 스코프 내에 존재할 경우 예상치 못한 결과를 가져올 수 있다. #3. 전역 변수 사용 억제 방법전역 변수의 무분별한 사용은 위험하다. 전역 변수를 반드시 사용하여야 할 이유를 찾지 못한다면 지역 변수를 사용하여야 한다. 변수의 스코프는 좁을수록 좋다. 전역 변수를 절대 사용하지 말라는 의미는 아니다. 무분별한 전역 변수의 남발은 억제해야 한다는 것이다. 전역 변수의 사용을 억제할 수 있는 몇가지 방법에 대해 살펴보자. 3.1. 즉시 실행 함수함수의 정의와 동시에 호출되는 즉시 실행 함수는 단 한번만 호출된다. 모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 된다. 이러한 특성을 이용해 전역 변수의 사용을 제한하는 방법이다. 123456(function () { var foo = 10; // 즉시 실행 함수의 지역 변수 // ...}());console.log(foo); // ReferenceError: foo is not defined 이 방법을 사용하면 전역 변수를 생성하지 않으므로 라이브러리 등에 자주 사용된다. 3.2. 네임 스페이스 객체전역에 네임 스페이스(Namespace) 역할을 담당할 객체를 생성하고 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가하는 방법이다. 1234567891011121314var MYAPP = {}; // 전역 네임 스페이스 객체MYAPP.name = 'Lee';console.log(MYAPP.name); // Lee네임 스페이스 객체에 또 다른 네임 스페이스 객체를 프로퍼티로 추가하여 네임 스페이스를 계층적으로 구성할 수도 있다.var MYAPP = {}; // 전역 네임 스페이스 객체MYAPP.person = { name: 'Lee', address: 'Seoul'};console.log(MYAPP.person.name); // Lee 네임 스페이스를 분리하여 식별자 충돌을 방지하는 효과는 있으나 네임 스페이스 객체 자체가 전역 변수에 할당되므로 그다지 유용해 보이지는 않는다. 3.3. 모듈 패턴모듈 패턴은 클래스를 모방하여 관련이 있는 변수와 함수를 모아 즉시 실행 함수로 감싸 하나의 모듈을 만든다. 모듈 패턴은 자바스크립트의 강력한 기능인 클로저를 기반으로 동작한다. 모듈 패턴의 특징은 전역 변수의 억제는 물론 캡슐화까지 구현할 수 있다는 것이다. 캡슐화는 외부에 공개될 필요가 없는 정보를 외부에 노출시키지 않고 숨기는 것을 말하며 정보 은닉(information hiding)이라고도 한다. Java의 경우, 클래스를 구성하는 멤버에 대하여 public, private, protected 등의 접근 제한자(Access modifier)를 사용해 공개 범위를 한정할 수 있다. public으로 선언된 데이터 또는 메소드는 외부에서 접근이 가능하지만 private으로 선언된 경우는 외부에서 접근할 수 없고 내부에서만 사용된다. 이것은 클래스 외부에는 제한된 접근 권한을 제공하며 원하지 않는 외부의 접근에 대해 내부를 보호하는 기능을 한다. 하지만 자바스크립트는 public, private, protected 등의 접근 제한자를 제공하지 않는다. 모듈 패턴은 전역 네임 스페이스의 오염을 막는 기능은 물론 한정적이기는 하지만 캡슐화를 구현하기 위해 사용한다. 12345678910111213141516171819202122var Counter = (function () { // private 변수 var num = 0; // 외부로 공개할 데이터나 메소드를 프로퍼티로 추가한 객체를 반환한다. return { increase() { return ++num; }, decrease() { return --num; } };}());// private 변수는 외부로 노출되지 않는다.console.log(Counter.num); // undefinedconsole.log(Counter.increase()); // 1console.log(Counter.increase()); // 2console.log(Counter.decrease()); // 1console.log(Counter.decrease()); // 0 위 예제의 즉시 실행 함수는 객체를 반환한다. 이 객체에는 외부에 노출하고 싶은 변수나 함수를 담아 반환한다. 이때 반환되는 객체의 프로퍼티는 외부에 노출되는 퍼블릭 멤버(public menber)이다. 외부로 노출하고 싶지 않은 변수나 함수는 반환하는 객체에 추가하지 않으면 외부에서 접근할 수 없는 프라이빗 멤버(private member)가 된다. 3.4. ES6 모듈전역 변수의 남발을 억제하기 위해 ES6에서 도입된 모듈을 사용할 수도 있다. 모던 브라우저(Chrome 61, FF 60, SF 10.1, Edge 16 이상)에서 ES6 모듈을 사용할 수 있다. script 태그에 type=”module” 어트리뷰트를 추가하면 로드된 자바스크립트 파일은 모듈로서 동작한다. 모듈의 파일 확장자는 mjs를 권장한다. 12&lt;script type=\"module\" src=\"lib.mjs\"&gt;&lt;/script&gt;&lt;script type=\"module\" src=\"app.mjs\"&gt;&lt;/script&gt; 하지만 ES6 모듈은 IE를 포함한 구형 브라우저는 동작하지 않으며, 브라우저의 ES6 모듈 기능을 사용하더라도 트랜스파일링이나 번들링이 필요하기 때문에 아직까지는 브라우저가 지원하는 ES6 모듈 기능보다는 Webpack 등의 모듈 번들러를 사용하는 것이 일반적이다.ES6 모듈 그리고 Webpack 등의 모듈 번들러를 도입하기 위한 방법에 대해서는 “ES6 모듈”, “Babel과 Webpack을 이용한 ES6 환경 구축”에서 자세히 살펴보기로 하자.","link":"/2020/02/var/"},{"title":"변수 | javaScript","text":"1. 변수란 무엇인가? 변수(Variable)는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다. 간단히 말하자면 변수는 프로그래밍 언어에서 값을 저장하고 참조하는 매커니즘으로 값의 위치를 가리키는 상징적인 이름이다. 상징적 이름인 변수는 프로그래밍 언어의 컴파일러 또는 인터프리터에 의해 값이 저장된 메모리 공간의 주소로 치환되어 실행된다. 따라서 개발자가 직접 메모리 주소를 통해 값에 저장하고 참조할 필요가 없고 변수를 통해 안전하게 값에 접근할 수 있다. 1234567891011121314// 변수는 하나의 값을 저장하기 위한 수단이다.var userName = 'Namkwon';var userRole = 'Admin';// 객체나 배열과 같은 자료 구조를 사용하면 여러 개의 값을 하나로 그룹화하여 하나의 값처럼 사용할 수 있다.var user = { name: 'Namkwon'; role: 'Admin';} var user = [ { name: 'Namkwon', role: 'Admin' }, { name: 'Kim', role: 'Developer' }]; 여기서 잠깐! 메모리란? 메모리(memory)는 데이터를 저장할 수 있는 메모리 셀(memory cell)들의 집합체이다. 셀 하나의 크기는 1byte(8bit)이며 컴퓨터는 셀의 크기 , 즉 1byte 단위로 데이터를 저장(write)하거나 읽어(read)들인다. 컴퓨터는 모든 데이터를 2진수로 처리한다. 따라서 메모리에 저장되는 데이터는 데이터의 종류(숫자, 텍스트, 이미지, 동영상 등)와 상관없이 2진수다. 각각의 셀은 고유의 메모리 주소(memory address)를 갖는다. 이 메모리 주소는 메모리 공간의 위치를 나타내며 0부터 시작하여 메모리의 크기만큼 정수로 표현된다. 예를 들어 4GB의 메모리는 0부터 4,294,967,295 까지의 메모리 주소를 갖는다. 2. 식별자 변수 이름을 식별자(identifier)라고도 부른다. 식별자는 어떤 값을 구별하여 식별해낼 수 있는 고유한 이름을 말한다. 사람을 이름으로 구별하여 식별하는 것처럼 값도 식별자로 구별하여 식별할 수 있다. 값은 메모리 공간에 저장되어 있다. 따라서 식별자는 메모리 공간에 저장되어 있는 어떤 값을 구별하여 식별해낼 수 있어야 한다. 이를 위해 식별자는 어떤 값이 저장되어 있는 메모리 주소를 기억(저장)해야 한다. 식별자는 값이 아니라 메모리 주소를 기억하고 있다.식별자로 값을 구별하여 식별한다는 것은 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다는 것을 의미한다. 즉, 식별자는 메모리 주소에 붙인 이름이라고 할 수 있다. 식별자라는 용어는 변수 이름에만 국한해서 사용하지 않는다. 예를 들어, 변수, 함수, 클래스 등의 이름은 모두 식별자다. 식별자인 변수 이름으로는 메모리 상에 존재하는 변수값을 식별할 수 있고, 함수 이름으로는 메모리 상에 존재하는 함수(자바스크립트에서는 함수는 값이다) 를 식별할 수 있다. 즉, 메모리 상에 존재하는 어떤 값을 식별할 수 있는 이름은 모두 식별자라고 부른다. 변수, 함수, 클래스 등의 이름과 같은 식별자는 네이밍 규칙을 준수해야 하며, “선언(declaration)”에 의해 자바스크립트 엔진에 식별자의 존재를 알린다. 이제 변수를 선언하는 방법에 대해 알아보자! 3. 변수 선언 변수 선언(Variable declaration)이란 변수를 생성하는 것을 말한다. 음.. 좀 더 자세히 말하면 값을 저장하기 위한 메모리 공간을 확보(allocate)하고 변수 이름과 확보된 메모리 공간의 주소를 연결하여 값을 저장할 수 있도록 준비 하는 것이다. 변수 선언에 의해 확보된 메모리 공간은 확보가 해제(release)되기 이전까지는 누구도 확보된 메모리 공간을 사용할 수 없도록 보호되므로 안전하게 사용할 수 있다. 변수를 사용하려면 반드시 선언이 필요합니다! 변수를 선언할 떄는 var, let, const 키워드(keyword)를 사용합니다! 아래의 코드를 보시죠. 1var score; // 변수 선언(변수 선언문) var 키워드는 뒤에 오는 변수 이름으로 새로운 변수를 선언할 것을 지시하는 키워드입니다. 잠깐! 키워드(keyword)란? 키워드는 자바스크립트 코드를 실행하는 자바스크립트 엔진이 수행할 동작을 규정한 일종의 명령어 입니다! 자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행합니다. 매우 간단하게 설명을 하면 const 키워드가 실행되면 자바스크립트 엔진은 새로운 변수를 선언합니다~위의 코드처럼 변수를 선언한 이후, 아직 변수에 값을 할당하지 않았습니다. 따라서 변수 선언에 의해 확보된 메모리 공간은 비어 있을 것으로 생각할 수 있으나 확보된 메모리공간에는 자바스크립트 엔진에 의해 undefined라는 값이 암묵적으로 할당되어 초기화된다. 이것은 자바스크립트의 독특한 특징이다. undefined란? undefined는 자바스크립트가 제공하는 원시 타입의 값(Primitive value)입니다. 나중에 자세히 설명할께요~ 자바스크립트 엔진은 변수 선언을 아래의 2단계를 거쳐 수행한다. 선언 단계(Declaration phase): 변수 이름을 등록하여 자바스크립트 엔진에 변수의 존재를 알린다. 초기화 단계(Initialization phase): 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당한다. var 키워드를 사용한 변수 선언은 선언 단계와 초기화 단계가 동시에 진행됩니다. var score;는 선언 단계를 통해 변수 이름 score를 등록하고, 초기화 단계를 통해 변수 score에 암묵적으로 undefined를 할당하여 초기화합니다. 일반적으로 초기화(Initialization)란 변수가 선언된 이후 최초로 값을 할당하는 것을 말합니다. var 키워드로 선언한 변수는 undefined로 암묵적인 초기화가 자동 수행됩니다.따라서 var 키워드로 변수는 선언 이후 어떠한 값도 할당하지 않아도 undefined라는 값을 갖습니다. 변수를 사용하려면 반드시 선언이 필요합니다. 변수 뿐만이 아니라 모든 식별자(함수, 클래스 등)가 그렇습니다. 만약 선언하지 않은 식별자에 접근하면 ReferenceError(참조 에러)가 발생합니다. ReferenceError는 식별자를 통해 값을 참조하려 했지만 자바스크립트 엔진이 등록된 식별자를 찾을 수 없을 때 발생하는 에러입니다. 4. 변수 선언의 실행 시점과 변수 호이스팅변수 선언문보다 변수를 참조하는 코드가 앞에 있다. 자바스크립트 코드는 한 줄씩 순차적으로 실행되므로 console.log(score);가 가장 먼저 실행되고 순차적으로 다음 줄에 있는 코드를 실행한다. 따라서 console.log(score);가 실행되는 시점에는 아직 변수 score의 선언이 실행되지 않았으므로 참조 에러(ReferenceError)가 발생할 것처럼 보인다. 하지만 참조 에러가 발생하지 않고 undefined가 출력된다. 그 이유는 변수 선언이 소스 코드가 한 줄씩 순차적으로 실행되는 시점, 즉 런타임(run-time)이 아니라 그 이전 단계에서 먼저 실행되기 때문이다. 자바스크립트 엔진은 소스 코드를 한 줄씩 순차적으로 실행하기에 앞서 먼저 코드의 평가 과정을 거치면서 코드 실행을 위한 준비를 한다. 이때, 즉 코드 실행을 위한 준비 단계인 코드의 평가 과정에서 자바스크립트 엔진은 변수 선언을 포함한 모든 선언문(변수 선언문, 함수 선언문 등)을 소스 코드에서 찾아내어 먼저 실행한다. 그리고 코드의 평가 과정이 끝나면 비로소 변수 선언을 포함한 모든 선언문을 제외하고 코드가 한 줄씩 순차적으로 실행한다.","link":"/2020/02/variable/"},{"title":"리액트 입문하기 | React","text":"리액트란?","link":"/2020/03/%EB%A6%AC%EC%95%A1%ED%8A%B81/"},{"title":"생성자 함수에 의한 객체 생성 | javaScript","text":"1. Object 생성자 함수new 연산자와 함께 Object 생성자 함수를 호출하면 빈 객체를 생성하여 반환한다. 빈 객체를 생성한 이후에는 프로퍼티나 메소드 추가 가능 1234567891011// 생성자 객체 생성const person = new object();// 프로퍼티, 메서드 동적 추가person.name = '이남권';person.sayHello = function() { console.log('Hi My name is' + this.name);};console.log(person) // {name: \"Lee\", sayHello: f}person.sayHello(); // Hi My name is 이남권 생성자(constructor)함수란 new 연산자와 함께 호출하여 객체(인스턴스)를 생성하는 함수를 말한다. 생성자 함수에 의해 생성된 객체를 인스턴스(instance)라 한다. 12345678910111213141516171819202122232425262728293031323334// String 생성자 함수에 의한 String 객체 생성const strObj = new string('이남권');console.log(typeof strObj); // objectconsole.log(strObj); // 이남권// Number 생성자 함수에 의한 Number 객체 생성const numObj = new Number(123);console.log(typeof numObj); // objectconsole.log(numObj); // Number {123}// Boolean 생성자 함수에 의한 Boolean 객체 생성const boolObj= new Boolean(true);console.log(typeof boolObj); // objectconsole.log(boolObj); // Boolean {true}// Function 생성자 함수에 의한 Function 객체(함수) 생성const func = new Function('x', 'return x * x');console.log(typeof func); // functionconsole.dir(func); // ƒ anonymous(x)// Array 생성자 함수에 의한 Array 객체(배열) 생성const arr = new Array(1, 2, 3);console.log(typeof arr); // objectconsole.log(arr); // [1, 2, 3]// RegExp 생성자 함수에 의한 RegExp 객체(정규 표현식) 생성const regExp = new RegExp(/ab+c/i);console.log(typeof regExp); // objectconsole.log(regExp); // /ab+c/i// Date 생성자 함수에 의한 Date 객체 생성const date = new Date();console.log(typeof date); // objectconsole.log(date); // Fri Feb 14 2020 17:17:59 GMT+0900 (대한민국 표준시) 2.생성자 함수 2.1. 객체 리터럴에 의한 객체 생성 방식의 문제점객체 리터럴에 의한 객체 생성 방식은 단 하나의 객체만을 생성한다. 따라서 동일한 프로퍼티를 갖는 객체를 여러 개 생성해야 하는 경우, 매번 같은 프로퍼티를 기술해야 하기 떄문에 비효율적이다. 1234567891011121314151617const circle1 = { radius: 5, getDiameter() { return 2 * this.radius; }};console.log(circle1.getDiameter()); // 10const circle2 = { radius: 10, getDiameter() { return 2 * this.radius; }};console.log(circle2.getDiameter()); // 20 위 예제처럼 객체가 한두개라면 넘어갈 수도 있겠지만 만약 수십개의 객체를 생성해야 한다면 문제가 크다. 2.2. 생성자 함수에 의한 객체 생성 방식의 장점생성자 함수에 의한 객체 생성 방식은 생성자 함수를 사용하여 프로퍼티 구조가 동일한 객체 여러 개를 간편하게 생성할 수 있다. 123456789101112131415// 생성자 함수function Circle(radius) { // 생성자 함수 내부의 this는 생성자 함수가 생성할 인스턴스를 가리킨다. this.radius = radius; this.getDiameter = function () { return 2 * this.radius; };}// 인스턴스의 생성const circle1 = new Circle(5); // 반지름이 5인 Circle 객체를 생성const circle2 = new Circle(10); // 반지름이 10인 Circle 객체를 생성console.log(circle1.getDiameter()); // 10console.log(circle2.getDiameter()); // 20 this this는 객체 자신의 프로퍼티나 메소드를 참조하기 위한 자기 참조 변수이다.this가 가리키는 값, 즉 this 바인딩은 함수 호출 방식에 따라 동적으로 결정된다. 함수 호출 방식 this가 가리키는 값 일반 함수로서 호출 전역 객체 메소드로서 호출 메소드를 호출한 객체 생성자 함수로서 호출 생성자 함수가 (미래에) 생성할 인스턴스 123456789101112131415// 함수는 다양한 방식으로 호출될 수 있다.function foo() { console.log(this);}// 일반적인 함수로서 호출// 전역 객체는 브라우저 환경에서는 window, Node.js 환경에서는 global을 가리킨다.foo(); // window// 메소드로서 호출const obj = { foo }; // ES6 프로퍼티 축약 표현obj.foo(); // obj// 생성자 함수로서 호출const inst = new foo(); // inst this에 대해서는 나중에 자세히 살펴보자. 생성자 함수는 이름 그대로 객체(인스턴스)를 생성하는 함수이다.만약 new 연산자와 함께 생성자 함수를 호출하지 않으면 생성자 함수가 아니라 일반 함수로 동작한다. 123456789// new 연산자와 함께 호출하지 않으면 생성자 함수로 동작하지 않는다.// 즉, 일반적인 함수의 호출이다.const circle3 = Circle(15);// 일반 함수 Circle은 반환문이 없으므로 암묵적으로 undefined를 반환한다.console.log(circle3); // undefined// 일반 함수 Circle내의 this는 전역 객체를 가리킨다.console.log(radius); // 15 2.3. 내부 메소드 [[Call]]과 [[Construct]]함수 선언문 또는 함수 표현식으로 정의한 함수는 일반적인 함수로서 호출할 수 있는 것은 물론 생성자 함수로서 호출할 수 있다. 생성자 함수로서 호출한다는 것은 new 연산자와 함께 호출하여 객체를 생성하는 것을 의미한다. 함수는 객체이므로 일반 객체(Ordinary object)와 동일하게 동작할 수 있다. 즉, 함수 객체는 일반 객체의 내부 슬롯과 내부 메소드(“15.2 내부 슬롯/메소드” 참고)를 모두 가지고 있다. 123456789101112// 함수는 객체이다.function foo() {}// 함수는 객체이므로 프로퍼티를 소유할 수 있다.foo.prop = 10;// 함수는 객체이므로 메소드를 소유할 수 있다.foo.method = function () { console.log(this.prop);};foo.method(); // 10 함수 객체는 함수로서 동작하기 위해 일반 객체의 내부 슬롯과 내부 메소드 이외에 아래와 같은 내부 슬롯과 내부 메소드를 추가적으로 가지고 있다.내부 메소드[[Call]]을 갖는 함수 객체를 Callable이라 하며, 내부 메소드인[[Construct]]를 갖는 함수 객체를 constructor, [[Construct]]를 갖지 않는 함수 객체를 non-constructor라고 부른다. callable은 호출할 수 있는 객체, 즉 함수를 말하며, constructor는 생성자 함수로서 호출할 수 있는 객체를 의미한다. 생성자 함수로서 호출할 수 있다는 것은 new 연산자(또는 super 연산자)와 함께 호출하는 것을 의미한다. 함수가 일반적인 함수로서 호출되면 함수 객체의 내부 메소드 [[Call]]가 호출되고 new 연산자(또는 super 연산자)와 함께 생성자 함수로서 호출되면 내부 메소드 [[Construct]]가 호출된다. 1234567function foo() {}// 일반적인 함수로서 호출: [[Call]]이 호출된다.foo();// 생성자 함수로서 호출: [[Construct]]가 호출된다.new foo();","link":"/2020/03/%EC%83%9D%EC%84%B1%EC%9E%90%ED%95%A8%EC%88%98/"},{"title":"순차검색 | With javaScript","text":"1.검색 1.1 선형 검색 문제for를 사용하여 구현하시오 12345678910111213141516 function linearSearch(array, target) { for (var i = 0; i &lt;= array.length; i += 1) { if ( array[i] === target) { return array[i] - 1; } } return -1; }console.log(linearSearch([1, 2, 3, 4, 5, 6], 1));console.log(linearSearch([1, 2, 3, 4, 5, 6], 3));console.log(linearSearch([1, 2, 3, 4, 5, 6], 5));console.log(linearSearch([1, 2, 3, 4, 5, 6], 6));console.log(linearSearch([1, 2, 3, 4, 5, 6], -1));console.log(linearSearch([1, 2, 3, 4, 5, 6], 0)); console.log(linearSearch([1, 2, 3, 4, 5, 6], 7)); 1.2 이진 검색 이진 검색은 선형 검색과는 달리 정렬된 배열에서만 동작 선형 검색은 배열의 모든 요소를 하나씩 확인해야하지만 이진검색은 중간값과 검색 대상 값을 비교하여 검색 범위를 매번 반으로 줄여나간다. 예를 들어 선형검색은 480,000개를 하나씩 찾아 나가지만 이진 검색은 18번만에 찾아낸다. 시간 복잡도: O(log n) 이진 검색을 통해 주어진 배열(array)에 주어진 값(target)이 요소로 존재하는지 확인하여 존재하는 경우 해당 인덱스를 반환하고 존재하지 않는 경우 -1을 반환하는 함수를 구현하라. 단, 아래의 빌트인 함수 이외에는 어떤 빌트인 함수도 사용하지 않아야 하며, while 문을 사용하여 구현하여야 한다. 힌트: Math.floor 12345678910111213141516171819202122232425262728console.log(binarySearch([1,2,3,4,5,6,7,8,9,10], 3));function binarySearch(dataArray, target) { let start = 0; let end = dataArray.length - 1; // 인덱스 때문에 -1 하는 것. console.log(start); console.log(end); while (start &lt;= end) { // 무한루프 인지해야함 console.log(start); console.log(end); let mid = Math.floor((start + end) / 2); // 중앙값 만들기 위해 내림차수 floor메소드 /2 console.log(mid); let array = dataArray[mid]; // 시작값 + 끝값 /2 한 걸 array 변수에 할당. 단지 그냥 깔끔하게 쓰려고한거임 console.log(array); if (array === target) { // dataArray[mid]값 === target값 같으면 바로 배열 리턴하기 return array; } else if (array &gt; target) { end = mid - 1; console.log(end); } else { start = mid + 1; console.log(start); } } return -1;} 2. 정렬 2.1 버블 정렬(buble sort) 버블 정렬은 가장 간단하지만 가장 느린 정렬 알고리즘이다. 버블 정렬은 배열을 순회하면서 요소가 다른 요소보다 큰 경우 두 요소를 교환한다. 시간 복잡도: O(n2) 버블 정렬을 통해 주어진 배열(array)을 정렬하는 함수를 구현하라. 단, 어떠한 빌트인 함수도 사용하지 않고 for 문을 사용하여 구현하여야 한다. 123456789101112131415161718192021var bubbleSort = function(array) { var length = array.length; var swap; for (i = 0; i &lt; length - 1; i++) { // 순차적으로 비교하기 위한 반복문 7번 돌려야 하기 떄문 for (j = 0; j &lt; length - 1 - i; j++) { // 끝까지 돌았을 때 다시 처음부터 비교하기 위해서 중첩 for console.log(j); if (array[j] &gt; array[j + 1]) { // 두 수를 비교하여 앞 수가 뒷 수보다 크면 console.log(array[j]); console.log(array[j + 1]); swap = array[j]; // array[j]가 array[j + 1]보다 클 시 swap에다 일단 저장 array[j] = array[j + 1]; // array[j]를 array[j+1]로 변경, j가 [j+1]보다 크기 떄문에 비교 조건[j+1]을 j로 만들어야 하기 떄문임 array[j + 1] = swap; // array[j]가 큰 수여서 swap변수에 재할당 한 것을 다시 array[j + 1]에 넣음 그래야 다음 비교문에서 탐색할 떄 밀어서 탐색하기 떄문. console.log(array[j]); console.log(array[j + 1]); } } } return array;};bubbleSort([6, 5, 4, 3, 2, 1]); 느낀점array를 다른 변수에 참조하면 원본의 array가 변경되여 값을 바꿔치기 할 수 있다.array[1] = 5; 이런 식으로 배열 인덱스의 값을 바꾸는 걸 새로 알았다.(물론 배열 학습 전임);중첩 for문 안에 첫 번째 회전이 끝나면 array[j + 1]은 array[j]로 변함 j가 1이거나 array[j + 1]은 같으니까.. (j가 0부터 시작했다는 가정하에.)","link":"/2020/03/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98(%EC%88%9C%EC%B0%A8%EA%B2%80%EC%83%89)/"},{"title":"제어문을 이용한 문제풀기 | With javaScript","text":"문제1 변수 x가 10보다 크고 20보다 작을 때 변수 x를 출력하는 조건식을 완성하라 12345var x = 15; if(x &gt; 10 &amp;&amp; x &lt; 20) { console.log(x); } 문제2 for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 출력하시오. 123for(let i = 0; i &lt; 10; i+=2) { console.log(i);} 문제3 for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 문자열로 출력하시오. 123for(let i = 0; i &lt; 10; i+=2) { console.log(String(i));} 문제4 for문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오. 123for(let i = 9; i &gt; 0; i-=2) { console.log(i);} 문제5 while문을 사용하여 0 부터 10 미만의 정수 중에서 짝수만을 작은 수부터 출력하시오. 123456var count = 0;while (count &lt; 10) { count+=2; console.log(count);} 문제6 while문을 사용하여 0 부터 10 미만의 정수 중에서 홀수만을 큰수부터 출력하시오. 1234567var count = 9;do { console.log(count); count-=2;} while (count &gt; 0); 문제7 for 문을 사용하여 0부터 10미만의 정수의 합을 출력하시오. 123456var count = 0;for(let i = 0; i &lt; 10; i++) { count = count + i;}console.log(count); 문제8 1부터 20 미만의 정수 중에서 2 또는 3의 배수가 아닌 수의 총합을 구하시오. 12345678var count = 0;for(var i = 0; i &lt; 20; i++) { if(!(i % 2 == 0) &amp;&amp; !(i % 3 == 0)) { count += i; }}console.log(count); 문제9 1부터 20 미만의 정수 중에서 2 또는 3의 배수인 수의 총합을 구하시오. 12345678var count = 0;for(var i = 0; i &lt; 20; i++) { if((i % 2 == 0) || (i % 3 == 0)) { count += i; }}console.log(count); 문제10 두 개의 주사위를 던졌을 때, 눈의 합이 6이 되는 모든 경우의 수를 출력하시오. 1234567for (let i = 0; i &lt; 6; i++) { for (let j = 0; j &lt; 6; j++) { if (i + j === 6) { console.log(`${i}, ${j}`) } }} 문제1111. 삼각형 출력하기 - pattern 1다음을 참고하여 *(별)로 높이가 5인(var line = 5) 삼각형을 문자열로 완성하라. 개행문자(‘\\n’)를 사용하여 개행한다. 완성된 문자열의 마지막은 개행문자(‘\\n’)로 끝나도 관계없다. 123456789var star = '';for ( var i = 0; i &lt; 5; i++) { for ( var j = 0; j &lt;= i; j++) { star += '*'; } star += '\\n';}console.log(star); 문제1212. 삼각형 출력하기 - pattern 2다음을 참고하여 *(별)로 트리를 문자열로 완성하라. 개행문자(‘\\n’)를 사용하여 개행한다. 완성된 문자열의 마지막은 개행문자(‘\\n’)로 끝나도 관계없다. 1234567891011var star = '';for (var i = 1; i &lt;= 5; i++) { for (var j = 1; j &lt; i; j++) { star += ' '; } for (var j = 5; j &gt;= i; j--) { star += '*'; } console.log(star); star = '';} 문제1313. 삼각형 출력하기 - pattern 3다음을 참고하여 *(별)로 트리를 문자열로 완성하라. 개행문자(‘\\n’)를 사용하여 개행한다. 완성된 문자열의 마지막은 개행문자(‘\\n’)로 끝나도 관계없다. 12345678910var star = '';for (var i = 5; i &gt; 0; i--) { for (var j = 0; j &lt; i; j++) { star += '*'; } star += '\\n';}console.log(star); 문제1414. 삼각형 출력하기 - pattern 4다음을 참고하여 *(별)로 트리를 문자열로 완성하라. 개행문자(‘\\n’)를 사용하여 개행한다. 완성된 문자열의 마지막은 개행문자(‘\\n’)로 끝나도 관계없다. 12345678910var star = '';for (var i = 1; i &lt;= 5; i++) { for (var j = 1; j &lt;= 5 - i; j++) { star += ' '; } for (var j = 1; j &lt;= i; j++) { star += '*'; } console.log(star); star = ''; 문제15 정삼각형 출력하기 12345678910var star = '';for (var i = 1; i &lt;= 5; i++) { for (var j = 5; j &gt; i; j--) { star += ' '; } for (var j = 1; j &lt;= i * 2 - 1; j++) { star += '*'; } console.log(star); star = ''; 문제16 역정삼각형 출력하기 1234567891011var star = '';for (var i = 1; i &lt;= 10; i += 2) { for (var j = 1; j &lt; i / 2; j++) { star += ' '; } for (var j = 10 - i; j &gt; 0; j--) { star += '*'; } console.log(star); star = '';}","link":"/2020/03/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98(%EC%A0%9C%EC%96%B4%EB%AC%B8)/"},{"title":"프로토타입 | javaScript","text":"1.자바스크립트 객체의 분류 표준 빌트인 객체표준 빌트인 객체(standard built-in objects / native objects / global objects)는 ECMAScript 사양에 정의된 객체를 말하며 애플리케이션 전역의 공통 기능을 제공한다. 표준 빌트인 객체는 ECMAScript 사양에 정의된 객체이므로 자바스크립트 실행 환경(브라우저 또는 Node.js 환경)과 관계없이 언제나 사용할 수 있다. 표준 빌트인 객체는 전역 객체의 프로퍼티로서 제공된다. 따라서 별도의 선언없이 전역 변수처럼 언제나 참조할 수 있다. 호스트 객체호스트 객체(host objects)는 ECMAScript 사양에 정의되어 있지 않지만 자바스크립트 실행 환경(브라우저 환경 또는 Node.js 환경. “3.1 자바스크립트 실행 환경” 참고)에서 추가적으로 제공하는 객체를 말한다.브라우저 환경에서는 DOM, BOM, Canvas, XMLHttpRequest, fetch, requestAnimationFrame, SVG, Web Storage, Web Component, Web worker와 같은 클라이언트 사이드 Web API를 호스트 객체로 제공하고 Node.js 환경에서는 Node.js 고유의 API를 호스트 객체로 제공한다. 사용자 정의 객체사용자 정의 객체(user-defined objects)는 표준 빌트인 객체와 호스트 객체처럼 기본 제공되는 객체가 아닌 사용자가 직접 정의한 객체를 말한다. 2.표준 빌트인 객체자바스크립트는 40여개의 표준 빌트인 객체를 제공한다. Math, Reflect, JSON을 제외한 표준 빌트인 개체는 모두 인스턴스를 생성할 수 있는 생성자 함수 객체이다. 생성자 함수 객체인 표준 빌트인 객체는 프로토타입 메소드와 정적 메소드를 제공하고 생성자 함수 객체가 아닌 표준 빌트인 객체는 정적 메소드만을 제공한다. 예를 들어 표준 빌트인 객체인 String, Number, Boolean, Function, Array, Date는 생성자 함수로 호출하여 인스턴스를 생성할 수 있다. 생성자 함수인 표준 빌트인 객체가 생성한 인스턴스의 프로토타입은 표준 빌트인 객체의 prototype 프로퍼티에 바인딩된 객체이다. 예를 들어 표준 빌트인 객체인 String을 생성자 함수로서 호출하여 생성한 String 인스턴스의 프로토타입은 String.prototype이다. 123456// String 생성자 함수에 의한 String 객체 생성const strObj = new String('Lee');console.log(typeof strObj); // objectconsole.log(strObj); // String {\"Lee\"}console.log(Object.getPrototypeOf(strObj) === String.prototype); // true 표준 빌트인 객체의 prototype 프로퍼티에 바인딩된 객체는 다양한 기능의 메소드를 제공한다 예를 들어서 Number.prototype이 제공하는 다양한 메소드를 사용가능. 또한 인스턴스 없이도 호출 가능한 정적 메소드도 제공한다. 12345678// Number 생성자 함수에 의한 Number 객체 생성const numObj = new Number(1.5);console.log(typeof numObj); // objectconsole.log(numObj); // Number {1.5}// toFixed는 프로토타입 메소드이다.// 소숫점자리를 반올림하여 문자열로 반환한다.console.log(numObj.toFixed()); // 2 표준 빌트인 객체인 Number는 인스턴스 없이 정적으로 호출할 수 있는 정적 메소드도 제공한다.","link":"/2020/03/%ED%91%9C%EC%A4%80%EB%B9%8C%ED%8A%B8%EC%9D%B8%EA%B0%9D%EC%B2%B4/"},{"title":"프로토타입 | javaScript","text":"자바스크립트는 명령형, 함수형, 프로토타입 기반 객체지향 프로그래밍을 지원하는 멀티 패러다임 프로그래밍 언어다. 자바스크립트는 객체 기반의 프로그래밍 언어이며 자바스크립트를 이루고 있는 거의 “모든 것”이 객체이다. 객체지향 프로그래밍에 대해 간단히 살펴보자. 1.객체지향 프로그래밍객체지향 프로그래밍(OOP)은 객체(object)들의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임을 말한다. 프로퍼티의 속성을 통해 여러 개의 값을 하나의 단위로 구성한 복합적인 자료구조를 객체라 하며 객체지향 프로그래밍은 독립적인 객체의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임이다. 객체지향 프로그래밍은 객체의 상태를 나타내는 데이터와 상태 데이터를 조작할 수 있는 동작을 하나의 논리적인 단위로 묶은 복합적인 자료구조라고 할 수 있다.객체의 상태 데이터를 프로퍼티, 동작을 메소드라 부른다. 각각의 객체는 고유의 기능을 갖는 독립적인 부품으로 볼 수 있지만 자신의 고유한 기능을 수행하면서 다른 객체와 관계성을 갖을 수 있다. 다른 객체와 메세지를 주고 받거나 데이터를 처리할 수도 있다. 또는 다른 객체의 상태 데이터나 동작을 상속받아 사용하기도 한다. 2.상속과 프로토타입상속은 어떤 객체의 프로퍼티와 메소드를 다른 객체가 상속받아 그대로 사용할 수 있는 것을 말한다.자바스크립트는 프로토타입을 기반으로 상속을 구현하여 불필요한 중복을 제거한다. 생성자 함수에 의해 생성된 모든 인스턴스가 동일한 메소드를 중복 소유하는 것은 메모리를 불필요하게 낭비한다. 또한 인스턴스를 생성할 때마다 메소드를 생성하므로 퍼포먼스에도 악영향을 준다. 자바스크립트는 프로토타입을 기반으로 상속을 구현한다. 12345678910111213141516171819202122// 생성자 함수function Circle(radius) { this.radius = radius;}// Circle 생성자 함수가 생성한 모든 인스턴스가 공유할 수 있도록 getArea 메소드를 프로토타입에 추가한다.// 프로토타입은 Circle 생성자 함수의 prototype 프로퍼티에 바인딩되어 있다.Circle.prototype.getArea = function () { return Math.PI * Math.pow(this.radius, 2);};// 인스턴스 생성const circle1 = new Circle(1);const circle2 = new Circle(2);// Circle 생성자 함수가 생성한 모든 인스턴스는 부모 객체의 역할을 하는// 프로토타입 Circle.prototype로부터 getArea 메소드를 상속받는다.// 즉, Circle 생성자 함수가 생성하는 모든 인스턴스는 하나의 getArea 메소드를 공유한다.console.log(circle1.getArea === circle2.getArea); // trueconsole.log(circle1.getArea()); // 3.141592653589793console.log(circle2.getArea()); // 12.566370614359172 Circle 생성자 함수가 생성한 모든 인스턴스는 자신의 프로토타입 즉, 상위 객체 역할을 하는 Circle.prototype의 모든 프로퍼티와 메소드를 상속 받는다. getArea 메소드는 단 하나만 생성되어 프로토타입인 Circle.prototype의 메소드로 할당되어 있다. 따라서 Circle 생성자 함수가 생성하는 모든 인스턴스는 getArea 메소드를 상속받아 사용할 수 있다. 즉, 자신의 상태를 나타내는 radius 프로퍼티만을 개별적으로 소유하고 내용이 동일한 메소드는 상속을 통해 공유하여 사용하는 것이다. 이처럼 상속은 코드의 재사용과 퍼포먼스 그리고 메모리면에서 매우 유용하다. 3.프로토타입 객체프로포타입 객체란 객체지향 프로그래밍의 핵심인 객체간 상속을 구현하기 위해 사용된다. 프로토타입은 어떤 객체의 상위 객체의 역할을 하는 객체로서 다른 객체에 공유 프로퍼티를 제공한다. 프로토타입을 상속받은 하위 객체는 상위 객체의 프로퍼티를 자신의 프로퍼티처럼 자유롭게 사용할 수 있다. 모든 객체는 [[Prototype]]이라는 내부 슬롯을 가지며 이 내부 슬롯의 값은 프로토타입의 참조이다. [[Prototype]]에 저장되는 프로토타입은 객체 생성 방식에 의해 결정된다. 즉, 객체가 생성될 때 객체 생성 방식에 따라 프로토타입이 결정되고 [[Prototype]]에 저장된다. 예를 들어, 객체 리터럴에 의해 생성된 객체의 프로토타입은 Object.prototype이고 생성자 함수에 의해 생성된 객체의 프로토타입은 생성자 함수의 prototype 프로퍼티에 바인딩되어 있는 객체이다. 모든 객체는 하나의 프로토타입을 갖는다. 모든 프로토타입은 생성자 함수와 연결되어 있다. 즉, 객체와 프로토타입과 생성자 함수는 서로 연결되어 있다. [[Prototype]] 내부 슬롯에는 직접 접근할 수 없지만, 위 그림처럼 객체는 proto 접근자 프로퍼티를 통해 자신의 프로토타입에 간접적으로 접근할 수 있다.프로토타입은 자신의 constructor 프로퍼티를 통해 생성자 함수에 접근할 수 있고, 생성자 함수는 자신의 prototype 프로퍼티를 통해 프로토타입에 접근할 수 있다. 3.1. proto 접근자 프로퍼티**모든 객체는 proto 접근자 프로퍼티를 통해 자신의 프로토타입에 접근 할 수 있다. 1const person = { name: 'Lee' }; 모든 객체는 프로토타입을 가리키는 [[Prototype]] 내부 슬롯에 접근하기 위해 proto 접근자 프로퍼티를 사용할 수 있다. proto 는 접근자 프로퍼티이다. 내부 슬롯은 프로퍼티가 아니다. 따라서 내부 슬롯에는 직접 접근할 수 없고 간접적인 접근 방법을 제공하는 경우에 한하여 접근할 수 있다. Object.prototype의 프로퍼티인 proto 접근자 프로퍼티는 getter/setter 함수라고 부르는 접근자 함수를 통해 [[Prototype]] 내부 슬롯의 값, 즉 프로토타입을 취득하거나 할당한다. proto 접근자 프로퍼티를 통해 프로토타입에 접근하면 내부적으로 proto 접근자 프로퍼티의 getter 함수인 get proto가 호출된다. proto 접근자 프로퍼티를 통해 새로운 프로토타입을 할당하면 proto 접근자 프로퍼티의 setter 함수인 set proto가 호출된다. 123456789const obj = {};const parent = { x: 1 };// getter 함수인 get __proto__가 호출되어 obj 객체의 프로토타입을 취득obj.__proto__;// setter함수인 set __proto__가 호출되어 obj 객체의 프로토타입을 교체obj.__proto__ = parent;console.log(obj.x); // 1 proto접근자 프로퍼티는 상속을 통해 사용된다. proto 접근자 프로퍼티는 객체가 직접 소유하는 프로퍼티가 아니라 Object.prototype의 프로퍼티이다. 모든 객체는 상속을 통해 Object.prototype.proto 접근자 프로퍼티를 사용할 수 있다. 1234567891011const person = { name: 'Lee' };// person 객체는 __proto__ 프로퍼티를 소유하지 않는다.console.log(person.hasOwnProperty('__proto__')); // false// __proto__ 프로퍼티는 모든 객체의 프로토타입 객체인 Object.prototype의 접근자 프로퍼티이다.console.log(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__'));// {get: ƒ, set: ƒ, enumerable: false, configurable: true}// 모든 객체는 Object.prototype의 접근자 프로퍼티 __proto__를 상속받아 사용할 수 있다.console.log({}.__proto__ === Object.prototype); // true proto접근자 프로퍼티는 상속을 통해 사용된다. [[Prototype]] 내부 슬롯의 값, 즉 프로토타입에 접근하기 위해 접근자 프로퍼티를 사용하는 이유는 상호 참조에 의해 프로토타입 체인이 생성되는 것을 방지하기 위함이다. 아래 예제를 살펴보자. 1234567const parent = {};const child = {};// child의 프로토타입을 parent로 지정child.__proto__ = parent;// parent의 프로토타입을 child로 설정parent.__proto__ = child; // TypeError: Cyclic __proto__ value 위 예제는 parent 객체를 child 객체의 프로토타입으로 지정한 후, child 객체를 parent 객체의 프로토타입으로 지정하였다. 이러한 코드가 에러없이 정상적으로 처리되면 서로가 자신의 프로토타입이 되는 비정상적인 프로토타입 체인이 만들어 지기 때문에 proto 접근자 프로퍼티는 에러를 발생시킨다. 프로토타입 체인은 단방향 링크드 리스트로 구현되어야 한다. 즉, 프로퍼티 검색 방향이 한쪽 방향으로만 흘러가야 한다. 하지만 위 그림과 같이 순환 참조(circular reference)적인 프로토타입 체인이 만들어지면 프로토타입 체인 종점이 존재하지 않기 때문에 프로토타입 체인에서 프로퍼티를 검색할 때 무한 루프에 빠진다. proto 접근자 프로퍼티를 코드 내에서 직접 사용하는 것은 비추천이다. 코드 내에서 proto를 직접 사용하는 것은 추천하지 않는다. 모든 객체가 proto 접근자 프로퍼티를 사용할 수 있는 것은 아니기 때문이다. 1234567// obj는 프로토타입 체인의 종점이다. 따라서 Object.__proto__를 상속받을 수 없다.const obj = Object.create(null);// obj는 Object.__proto__를 상속받을 수 없다.console.log(obj.__proto__); // undefined// 따라서 Object.getPrototypeOf 메소드를 사용하는 편이 좋다.console.log(Object.getPrototypeOf(obj)); // null 따라서 proto 접근자 프로퍼티 대신 프로토타입의 참조를 취득할 경우는 Object.getPrototypeOf 메소드를, 프로토타입을 교체하는 경우는 Object.setPrototypeOf 메소드를 사용하는 것을 권장한다. 123456789const obj = {};const parent = { x: 1 };// obj 객체의 프로토타입을 취득Object.getPrototypeOf(obj); // obj.__proto__;// obj 객체의 프로토타입을 교체Object.setPrototypeOf(obj, parent); // obj.__proto__ = parent;console.log(obj.x); // 1 Object.getPrototypeOf 메소드는 ES5에서 도입된 메소드이며 IE9 이상을 지원한다. Object.setPrototypeOf 메소드는 ES6에서 도입된 메소드이며 IE11 이상을 지원한다. 3.2. 함수 객체의 prototype 프로퍼티함수 객체는 proto 접근자 프로퍼티 이외에 prototype 프로퍼티도 소유한다. 함수 객체의 prototype 프로퍼티는 생성자 함수가 생성할 인스턴스의 프로토타입을 가리킨다. 12345// 함수 객체는 prototype 프로퍼티를 소유한다.console.log((function () {}).hasOwnProperty('prototype')); // true// 일반 객체는 prototype 프로퍼티를 소유하지 않는다.console.log({}.hasOwnProperty('prototype')); // false prototype 프로퍼티는 함수가 객체를 생성하는 생성자 함수로서 사용될 때, 생성자 함수가 생성할 객체(인스턴스)의 프로토타입을 가리킨다. 생성자 함수로서 호출할 수 없는 함수, 즉 함수의 종류가 Arrow, Method인 함수(“16.2.4 constructor와 non-constructor의 구분” 참고)인 non-constructor는 프로토타입이 생성되지 않으며 prototype 프로퍼티도 소유하지 않는다. 123456789101112131415161718192021// 화살표 함수는 non-constructor이다.const Person = name =&gt; { this.name = name;};// non-constructor는 프로토타입이 생성되지 않는다.console.log(Person.prototype); // undefined// non-constructor는 prototype 프로퍼티도 소유하지 않는다.console.log(Person.hasOwnProperty('prototype')); // false// ES6의 메소드 축약 표현으로 정의한 메소드는 non-constructor이다.const obj = { foo() {}};// non-constructor는 프로토타입이 생성되지 않는다.console.log(obj.foo.prototype); // undefined// non-constructor는 prototype 프로퍼티도 소유하지 않는다.console.log(obj.foo.hasOwnProperty('prototype')); // false 생성자 함수가 아닌 일반 함수도 prototype 프로퍼티를 소유하지만 객체를 생성하지 않는 일반 함수의 prototype 프로퍼티는 아무런 의미가 없다. 123456789101112// 생성자 함수function Person(name) { this.name = name;}const me = new Person('Lee');// Person.prototype: Person 생성자 함수는 prototype 프로퍼티를 통해// 자신이 생성할 인스턴스(이 경우에는 me)의 프로토타입을 할당// me.__proto__: 객체 me의 __proto__ 접근자 프로퍼티를 통해 자신의 프로토타입에 접근// 결국 Person.prototype와 me.__proto__는 결국 동일한 프로토타입을 가리킨다.console.log(Person.prototype === me.__proto__); // true 3.3. 프로토타입의 constructor 프로퍼티와 생성자 함수모든 프로토타입은 constructor 프로퍼티를 갖는다. 이 constructor 프로퍼티는 prototype 프로퍼티로 자신을 참조하고 있는 생성자 함수를 가리킨다. 이 연결은 생성자 함수가 생성될 때, 즉 함수 객체가 생성될 때 이루어진다. 아래 예제를 살펴보자. me 객체는 프로토타입의 contructor 프로퍼티를 통해 생성자 함수와 연결된다. me 객체에는 constructor 프로퍼티가 없지만 me 객체의 프로토타입인 Person.prototye에 constructor 프로퍼티가 있다. me 객체는 프로토타입인 Person.prototye에 constructor 프로퍼티를 상속받아 사용할 수 있다. 4. 리터럴 표기법에 의해 생성된 객체의 생성자 함수와 프로토타입위에서 살펴본 바와 같이, 생성자 함수에 의해 생성된 인스턴스는 프로토타입의 constructor 프로퍼티에 의해 생성자 함수와 연결된다. 이때 생성자 함수는 인스턴스를 생성한 생성자 함수이다. 123456789101112// obj 객체를 생성한 생성자 함수는 Object이다.const obj = new Object();// add 함수 객체를 생성한 생성자 함수는 Function이다.const add = new Function('a', 'b', 'return a + b');// 생성자 함수function Person(name) { this.name = name;}// me 객체를 생성한 생성자 함수는 Person이다.const me = new Person('Lee'); 프로토타입은 생성자 함수와 더불어 생성되며 prototype, constructor 프로퍼터에 의해 연결되어 있기 때문이다. 다시 말해, 프로토타입과 생성자 함수는 단독으로 존재할 수 없고 언제나 쌍(pair)으로 존재하기 때문이다. 리터럴 표기법(객체 리터럴, 함수 리터럴, 배열 리터럴, 정규 표현식 리터럴 등)에 의해 생성된 객체는 생성자 함수에 의해 생성된 객체는 아니다. 하지만 큰 틀에서 생각해 보면 리터럴 표기법으로 생성한 객체도 생성자 함수로 생성한 객체와 본질적인 면에서 큰 차이는 없다. 객체 리터럴에 의해 생성한 객체와 Object 생성자 함수에 의해 생성한 객체는 생성 과정에 차이는 있지만 결국 객체로서 동일한 특성을 갖는다. 함수 리터럴에 의해 생성한 함수와 Function 생성자 함수에 의해 생성한 함수는 생성 과정과 스코프, 클로저 등의 차이가 있지만 결국 함수로서 동일한 특성을 갖는다. 프로토타입의 constructor 프로퍼티로 연결되어 있는 생성자 함수를 리터럴 표기법으로 생성한 객체를 생성한 생성자 함수로 생각해도 크게 무리는 없다. 리터럴 표기법에 의해 생성된 객체의 생성자 함수와 프로토타입은 아래와 같다. 리터럴 표기법 생성자 함수 프로토타입 객체 리터럴 Object Object.prototype 함수 리터럴 Function Function.prototype 배열 리터럴 Array Array.prototype 정규 표현식 리터럴 RegExp RegExp.prototype 5.프로토타입의 생성 시점리터럴 표기법에 의해 생성된 객체도 생성자 함수와 연결되는 것을 살펴보았다. 객체는 리터럴 표기법 또는 생성자 함수에 의해 생성되므로 결국 모든 객체는 생성자 함수와 연결되어 있다. 생성자 함수는 사용자가 직접 정의한 사용자 정의 생성자 함수와 자바스크립트가 기본 제공하는 빌트인 생성자 함수로 구분할 수 있다. 프로토타입은 생성자 함수가 생성되는 시점에 더불어 생성된다. 5.1. 사용자 정의 생성자 함수와 프로토타입 생성 시점생성자 함수로서 호출할 수 있는 함수, 즉 constructor는 함수 정의가 평가되어 함수 객체를 생성하는 시점에 프로토타입도 더불어 생성된다. 1234567// 함수 정의(constructor)가 평가되어 함수 객체를 생성하는 시점에 프로토타입도 더불어 생성된다.console.log(Person.prototype); // {constructor: ƒ}// 생성자 함수function Person(name) { this.name = name;} 생성자 함수로서 호출할 수 없는 함수, 즉 non-constructor는 프로토타입이 생성되지 않는다. 1234567// 화살표 함수는 non-constructor이다.const Person = name =&gt; { this.name = name;};// non-constructor는 프로토타입이 생성되지 않는다.console.log(Person.prototype); // undefined 함수 선언문은 다른 코드가 실행되기 이전에 자바스크립트 엔진에 의해 먼저 실행된다. 따라서 함수 선언문으로 정의된 Person 생성자 함수는 어떤 코드보다 먼저 평가되어 함수 객체가 된다. 이때 프로토타입도 더불어 생성된다. 생성된 프로토타입은 Person 생성자 함수의 prototype 프로퍼티에 바인딩된다.Person 생성자 함수와 더불어 생성된 프로토타입의 내부를 살펴보자. 생성된 프로토타입은 constructor 프로퍼티만을 갖는 객체이다. 프로토타입도 객체이고 모든 객체는 프로토타입을 갖으므로 프로토타입도 자신의 프로토타입을 갖는다. 생성된 프로토타입의 프로토타입은 Object.prototype이다. 5.2. 빌트인 생성자 함수와 프로토타입 생성 시점Object, String, Number, Function, Array, RegExp, Date, Promise 등과 같은 빌트인 생성자 함수도 일반 함수와 마찬가지로 빌트인 생성자 함수가 생성되는 시점에 프로토타입이 생성된다. 모든 빌트인 생성자 함수는 전역 객체가 생성되는 시점에 생성된다. 전역 객체는 누구보다도 먼저 생성된다. 이때 빌트인 생성자 함수와 더불어 프로토타입이 생성된다. 생성된 프로토타입은 빌트인 생성자 함수의 prototype 프로퍼티에 바인딩된다. 123// 전역 객체 window는 브라우저에 종속적이므로 아래 코드는 브라우저 혼경에서 실행해야 한다.// 빌트인 객체인 Object는 전역 객체 window의 프로퍼티이다.window.Object === Object // true 객체가 생성되기 이전에 생성자 함수와 프로토타입은 이미 객체화되어 존재하고 있다. 이후 생성자 함수 또는 리터럴 표기법으로 객체를 생성하면 프로토타입은 생성된 객체의 [[prototype]] 내부 슬롯에 할당된다. 이로써 생성된 객체는 프로토타입을 상속받는다. 6.객체 생성 방식과 프로토타입의 결정 객체 리터럴 Object 생성자 함수 생성자 함수 Object.create 메소드 클래스 (ES6) 이와 같이 다양한 방식으로 생성된 모든 객체는 각각의 방식 마다 세부적인 객체 생성 방식의 차이는 있으나 추상 연산 ObjectCreate에 의해 생성된다는 공통점을 갖는다. 6.1.객체 리터럴에 의해 생성된 객체의 프로토타입자바스크립트 엔진은 객체 리터럴을 평가하여 객체를 생성할 때, 추상 연산 ObjectCreate를 호출한다. 이때 추상 연산 ObjectCreate에 전달되는 프로토타입은 Object.prototype이다. 즉, 객체 리터럴에 의해 생성되는 객체의 프로토타입은 Object.prototype이다. 아래 예제를 살펴보자. 1const obj = { x: 1 }; 위 객체 리터럴이 평가되면 추상 연산 ObjectCreate에 의해 아래와 같이 Object 생성자 함수와 Object.prototype과 생성된 객체 사이에 연결이 만들어 진다. 이처럼 객체 obj는 Object.prototype을 프로토타입으로 갖게 되며 이로써 Object.prototype을 상속받는다. obj 객체는 constructor 프로퍼티와 hasOwnProperty 메소드 등을 소유하지 않지만 자신의 프로토타입인 Object.prototype의 constructor 프로퍼티와 hasOwnProperty 메소드를 자신의 자산인 것처럼 자유롭게 사용할 수 있다. 이는 obj 객체가 자신의 프로토타입인 Object.prototype 객체를 상속받았기 때문이다. 12345const obj = { x: 1 };// 객체 obj는 Object.prototype을 상속받는다.console.log(obj.constructor === Object); // trueconsole.log(obj.hasOwnProperty('x')); // true 6.2. Object 생성자 함수에 의해 생성된 객체의 프로토타입명시적으로 Object 생성자 함수를 호출하여 객체를 생성하면 빈 객체가 생성된다. Object 생성자 함수를 호출하면 객체 리터럴과 마찬가지로 추상 연산 ObjectCreate를 호출한다. 12const obj = new Object();obj.x = 1; 추상 연산 ObjectCreate에 의해 아래와 같이 Object 생성자 함수와 Object.prototype과 생성된 객체 사이에 연결이 만들어 진다. 객체 리터럴에 의해 생성된 객체와 동일한 구조를 갖는 것을 알 수 있다. 이처럼 객체 obj는 Object.prototype을 프로토타입으로 갖게 되며 이로써 Object.prototype을 상속받는다. 123456const obj = new Object();obj.x = 1;// 객체 obj는 Object.prototype을 상속받는다.console.log(obj.constructor === Object); // trueconsole.log(obj.hasOwnProperty('x')); // true 객체 리터럴과 Object 생성자 함수에 의한 객체 생성 방식의 차이는 프로퍼티를 추가하는 방식에 있다. 객체 리터럴 방식은 객체 리터럴 내부에 프로퍼티를 추가하지만 Object 생성자 함수 방식은 일단 빈객체를 생성한 이후 프로퍼티를 추가해야 한다. 6.3.생성자 함수에 의해 생성된 객체의 프로토타입new 연산자와 함께 생성자 함수를 호출하여 인스턴스를 생성하면 다른 객체 방식과 마찬가지로 추상 연산 ObjectCreate를 호출한다. 이때 추상 연산 ObjectCreate에 전달되는 프로토타입은 생성자 함수의 prototype 프로퍼티에 바인딩되어 있는 객체이다. 즉, 생성자 함수에 의해 생성되는 객체의 프로토타입은 생성자 함수의 prototype 프로퍼티에 바인딩되어 있는 객체이다. 아래 예제를 살펴보자. 12345function Person(name) { this.name = name;}const me = new Person('Lee'); 위 코드가 실행되면 추상 연산 ObjectCreate에 의해 아래와 같이 생성자 함수와 생성자 함수의 prototype 프로퍼티에 바인딩되어 있는 객체와 생성된 객체 사이에 연결이 만들어 진다. 빌트인 객체인 Object 생성자 함수와 더불어 생성된 프로토타입 Object.prototype은 다양한 빌트인 메소드(hasOwnProperty, propertyIsEnumerable 등)를 갖고 있다. 하지만 사용자 정의 생성자 함수 Person과 더불어 생성된 프로토타입 Person.prototype의 프로퍼티는 constructor 뿐이다. 프로토타입 Person.prototype에 프로퍼티를 추가하여 하위(자식) 객체가 상속받을 수 있도록 구현해보자. 프로토타입은 객체이다. 따라서 일반 객체와 같이 프로토타입에도 프로퍼티를 추가/삭제할 수 있다. 그리고 이렇게 추가/삭제된 프로퍼티는 프로토타입 체인에 즉각 반영된다. 1234567891011121314function Person(name) { this.name = name;}// 프로토타입 메소드Person.prototype.sayHello = function () { console.log(`Hi! My name is ${this.name}`);};const me = new Person('Lee');const you = new Person('Kim');me.sayHello(); // Hi! My name is Leeyou.sayHello(); // Hi! My name is Kim Person 생성자 함수를 통해 생성된 모든 객체는 프로토타입에 추가된 sayHello 메소드를 상속받아 자신의 메소드처럼 사용할 수 있다. 7. 프로토타입 체인아래 예제를 살펴보자. 12345678910111213function Person(name) { this.name = name;}// 프로토타입 메소드Person.prototype.sayHello = function () { console.log(`Hi! My name is ${this.name}`);};const me = new Person('Lee');// hasOwnProperty는 Object.prototype의 메소드이다.console.log(me.hasOwnProperty('name')); // true Person 생성자 함수에 의해 생성된 me 객체는 Object.prototype의 메소드인 hasOwnProperty를 호출할 수 있다. 이것은 me 객체가 Person.prototype 뿐만 아니라 Object.prototype도 상속받았다는 의미이다. me 객체의 프로토타입은 Person.prototype이다. 1console.log(Object.getPrototypeOf(me) === Person.prototype); // true Person.prototype의 프로토타입은 Object.prototype이다. 프로토타입의 프로토타입은 언제나 Object.prototype이다. 1console.log(Object.getPrototypeOf(Person.prototype) === Object.prototype); // true 따라서 위 예제를 그림으로 표현하면 아래와 같다. 자바스크립트는 객체의 프로퍼티(메소드 포함)에 접근하려고 할 때 해당 객체에 접근하려는 프로퍼티가 없다면 proto 접근자 프로퍼티가 가리키는 링크를 따라 자신의 부모 역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색한다.이것을 프로토타입 체인이라 한다. 프로토타입 체인은 자바스크립트가 객체 지향 프로그래밍의 상속을 구현하는 메커니즘이다. 123// hasOwnProperty는 Object.prototype의 메소드이다.// me 객체는 프로토타입 체인을 따라 hasOwnProperty 메소드를 검색하여 사용한다.console.log(me.hasOwnProperty('name')); // true","link":"/2020/03/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/"},{"title":"함수와 일급 객체 | javaScript","text":"1. 일급 객체 아래와 같은 조건을 만족하는 객체를 일급 객체(first-class object)라 한다. 무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성이 가능하다. 변수나 자료구조(객체, 배열 등)에 저장할 수 있다. 함수의 매개 변수에게 전달할 수 있다. 함수의 결괏값으로 반환할 수 있다. 자바스크립트의 함수는 아래 예제와 같이 위의 조건을 모두 만족하므로 일급 객체이다. 123456789101112131415161718192021222324252627282930313233341. 함수는 무명의 리터럴로 생성할 수 있다.2. 함수는 변수에 저장할 수 있다.// 런타임(할당 단계)에 함수 리터럴이 평가되어 함수 객체가 생성되고 변수에 할당된다.const increase = function (num) { return ++num};const decrease = function (num) { return --num;};// 2. 함수는 객체에 저장할 수 있다.const predicates = { increase, decrease };// 3. 함수의 매개 변수에게 전달할 수 있다.// 4. 함수의 반환값으로 사용할 수 있다.function makeCounter(predicate) { let num = 0; return function () { num = predicate(num); return num; };}// 3. 함수는 매개 변수에게 함수를 전달할 수 있다.const increaser = makeCounter(predicates.increase);console.log(increaser()); // 1console.log(increaser()); // 2// 3. 함수는 매개 변수에게 함수를 전달할 수 있다.const decreaser = makeCounter(predicates.decrease);console.log(decreaser()); // -1console.log(decreaser()); // -2 함수가 일급 객체라는 것은 함수를 객체와 동일하게 사용할 수 있다는 의미다. 객체는 값이므로 함수는 값과 동일하게 취급할 수 있다. 따라서 함수는 값을 사용할 수 있는 곳(변수 할당문, 객체의 프로퍼티, 배열의 요소, 함수 호출의 인수, 함수 반환문)이라면 어디서든지 리터럴로 정의할 수 있으며 런타임(runtime)에 함수 객체로 평가된다. 함수 객체는 몇 가지 고유한 프로퍼티를 갖는 것을 제외하면 일반 객체와 동일하다. 따라서 함수 객체는 일반 객체와 같이 함수의 매개 변수에 전달할 수 있으며 함수의 결과값으로 반환할 수도 있다. 이는 함수형 프로그래밍을 가능케하는 자바스크립트의 장점 중에 하나이다. 함수형 프로그래밍 함수형 프로그래밍은 순수 함수(Pure function)와 보조 함수의 조합을 통해 외부 상태를 변경하는 부수 효과(side-effect)를 최소화하여 불변성(Immutability)을 지향하는 프로그래밍 패러다임이다. 로직 내에 존재하는 조건문과 반복문을 제거하여 복잡성을 해결하며, 변수 사용을 억제하거나 생명주기를 최소화하여 상태 변경을 피해 오류를 최소화하는 것을 목표로 한다. 조건문이나 반복문은 로직의 흐름을 이해하기 어렵게 하여 가독성을 해치고, 변수의 값은 누군가에 의해 언제든지 변경될 수 있어 오류 발생의 근본적 원인이 될 수 있기 때문이다. 함수형 프로그래밍 패러다임에서 매개 변수를 통해 함수를 전달받거나 반환값으로 함수를 반환하는 함수를 고차 함수(Higher-Order Function, HOF)라 한다. 고차 함수에 대해서는 “배열”에서 자세히 살펴볼 것이다.함수는 객체이지만 일반 객체와 차이가 있다. 일반 객체는 호출을 못하지만 함수객체는 호출이 가능하다. 2. 함수 객체의 프로퍼티함수는 객체이다. 따라서 함수도 프로퍼티를 가질 수 있다. 브라우저 콘솔에서 console.dir 메소드를 사용하여 함수 객체의 내부를 들여다 보자. 12345function square(number) { return number * number;}console.dir(square); 일반 객체에는 없는 arguments, caller, length, name, prototype 프로퍼티가 함수 객체에는 존재한다. 이 프로퍼티 들의 프로퍼티 어트리뷰트를 object,getOwnpropertyDescriptor 메소드로 확인해 보면 아래와 같다. 1234567891011121314151617181920212223242526272829303132function square(number) { return number * numer;}// arguments는 square 함수 객체의 데이터 프로퍼티이다.Object.getOwnpropertyDescriptor(square, 'arguments');// {value: null, writable: false, enumerable: false, configurable: false}// caller는 square 함수 객체의 데이터 프로퍼티이다.Object.getOwnpropertyDescriptor(square, 'caller');// {value: null, writable: flase, enumarable: false, configurable: false}// length는 square 함수 객체의 데이터 프로퍼티이다.Object.getOwnPropertyDescriptor(square, 'length');// {value: 1, writable: false, enumerable: false, configurable: true}// name은 square 함수 객체의 데이터 프로퍼티이다.Object.getOwnPropertyDescriptor(square, 'name');// {value: \"square\", writable: false, enumerable: false, configurable: true}// prototype은 square 함수 객체의 데이터 프로퍼티이다.Object.getOwnPropertyDescriptor(square, 'prototype');// {value: {…}, writable: true, enumerable: false, configurable: false}// __proto__는 square 함수 객체의 프로퍼티가 아니다.Object.getOwnPropertyDescriptor(square, '__proto__');// undefined// __proto__는 Object.prototype 객체의 접근자 프로퍼티이다.// square 함수 객체는 Object.prototype 객체로부터 __proto__ 접근자 프로퍼티를 상속받는다.Object.getOwnPropertyDescriptor(Object.prototype, '__proto__');// {get: ƒ, set: ƒ, enumerable: false, configurable: true} arguments, caller, length, name, prototype 프로퍼티는 모두 함수 객체의 데이터 프로퍼티이다.하지만 proto는 접근자 프로퍼티이며 함수 객체의 프로퍼티가 아닌 Object.prototype 객체의 프로퍼티를 상속받은 것을 알 수 있다. 2.1. arguments 프로퍼티함수 객체의 arguments 프로퍼티 값은 arguments 객체이다. arguments 객체는 함수 호출 시 전달된 인수(arguemnt)들의 정보를 담고 있는 순회 가능한(iterable)유사 배열 객체이며 함수 내부에서 지역 변수처럼 사용된다. 즉, 함수 외부에서는 사용할 수 없다. 자바스크립트는 함수 호출 시 함수 정의에 따라 인수를 전달하지 않아도 에러가 발생하지 않는다. 123456789function multiply(x, y) { console.log(arguments); return x * y;}console.log(multiply()); // NaNconsole.log(multiply(1)); // NaNconsole.log(multiply(1, 2)); // 2console.log(multiply(1, 2, 3)); // 2 함수를 정의할 떄 선언한 매개변수는 함수 몸체 내부에서 변수와 동일하게 취급된다. 즉, 함수가 호출되면 함수 몸체 내에서 암묵적으로 매개변수가 선언되고 undefined로 초기화된 이후 인수가 할당된다. 선언된 매개변수의 개수보다 인수를 적게 전달했을 경우 인수가 전달되지 않은 매개변수는 undefined로 초기화된 상태를 유지한다.매개변수의 개수보다 인수를 더 많이 전달한 경우(multiply(1, 2, 3)) 초과된 인수는 무시된다. 그렇다고 초과된 인수가 그냥 버려지는 것은 아니다.모든 인수는 암묵적으로 arguments 객체의 프로퍼티로 보관된다. arguments 객체는 인수를 프로퍼티 값으로 소유하며 프로퍼티 키는 인수의 순서를 나타낸다. arguments객체의 callee 프로퍼티는 호출되어 arguments 객체를 생성한 함수, 즉 함수 자신을 가리키고 arguments 객체의 length 프로퍼티는 인수의 개수를 가리킨다. 선언된 매개변수의 개수와 함수 호출 시에 전달하는 인수의 개수를 확인하지 않은 자바스크립트의 특성때문에 런타임 시에 호출된 함수의 인자 개수를 확인하고 이에 따라 함수의 동작을 달리 정의할 필요가 있을 수 있다. 이때 유용하게 사용되는 것이 arguments 객체이다. arguments 객체는 매개변수 개수를 확정할 수 없는 가변 인자 함수를 구현할 때 유용하게 사용된다. 1234567891011121314function sum() { let res = 0; // arguments 객체는 length 프로퍼티가 있는 유사 배열 객체이므로 for 문으로 순회할 수 있다. for (let i = 0; i &lt; arguments.length; i++) { res += arguments[i]; } return res;}console.log(sum()); // 0console.log(sum(1, 2)); // 3console.log(sum(1, 2, 3)); // 6 arguments 객체는 배열의 형태로 인자 정보를 담고 있지만 실제 배열이 아닌 유사배열객체(array-like object)이다. 유사배열객체란 length 프로퍼티를 가진 객체로 for 문으로 순회할 수 있는 객체를 말한다. 유사 배열 객체는 배열이 아니므로 메소드를 사용할 경우 에러가 발생하게 된다.따라서 배열 메소드를 사용하려면 Function.prototype.call, Function.prototype.apply를 사용해 간접 호출해야 하는 번거로움이 있다. 간접 호출과 배열에 대해 아직 살펴보지 않았으므로 지금은 참고로만 알아둡시다~ 123456789function sum() { const array = Array.prototype.slice.call(arguments); return array.reduce(function(pre, cur) { return pre + cur; }, 0);}console.log(sum(1, 2)); // 3console.log(sum(1, 2, 3, 4, 5)); // 15 이러한 번거로움을 해결하기 위해 ES6에서는 Rest 파라미터를 도입했다. 1234567// ES6 Rest parameterfunction sum(...args) { return args.reduce((pre, cur) =&gt; pre + cur, 0);}console.log(sum(1, 2)); // 3console.log(sum(1, 2, 3, 4, 5)); // 15 2.2. length 프로퍼티함수 객체의 length 프로퍼티는 함수 정의 시 선언한 매개변수의 개수를 가리킨다. 12345678910111213function foo() { console.log(foo.length); // 0}function bar(x) { return x;}console.log(bar.length); // 1function baz(x, y, z) { return x * y * z;}console.log(baz.length); // 3 arguments 객체의 length 프로퍼티와 함수 객체의 length 프로퍼티의 값은 다를 수 있으므로 주의하여야 한다.arguments 객체의 length 프로퍼티는 인자(argument)의 개수를 가리키고, 함수 객체의 length 프로퍼티는 매개변수(parameter)의 개수를 가리킨다. 2.3. name 프로퍼티함수 객체의 name 프로퍼티는 함수 이름을 나타낸다.name 프로퍼티는 ES5와 ES6에서 동작을 달리 하므로 주의하기 바란다. 익명 함수 표현식의 경우, ES5에서 name 프로퍼티는 빈 문자열을 값으로 갖는다. 하지만 ES6에서는 함수 객체를 가리키는 변수 이름을 값으로 갖는다. 12345678910111213// 기명 함수 표현식var namedFunc = function foo () {};console.log(namedFunc.name); // foo// 익명 함수 표현식var anoymusFunc = function() {};// ES5: name 프로퍼티는 빈 문자열을 값으로 갖는다.// ES6: name 프로퍼티는 함수 객체를 가리키는 변수 이름을 값으로 갖는다.console.log(anonymousFunc.name); // anonymousFunc// 함수 선언문(Function declaration)function bar() {}console.log(bar.name); // bar 2.5. proto 접근자 프로퍼티모든 객체는[[prototype]]이라는 내부 슬롯을 갖는다. [[prototype]]내부 슬롯은 객체 지향 프로그래밍의 상속을 구현하는 프로토타입 객체를 가리킨다. proto프로퍼티는 [[Prototype]]내부 슬롯이 가리키는 프로토타입 객체에 접근하기 위해 사용하는 접근자 프로퍼티이다. 내부 슬롯에는 직접 접근할 수 없고 간접적인 접근 방법을 제공하는 경우에 한하여 접근할 수 있다. 123456789const obj = { a: 1 };// 객체 리터럴 방식으로 생성한 객체의 프로토타입 객체는 Object.prototype이다.console.log(obj.__proto__ === Object.prototype); // true// 객체 리터럴 방식으로 생성한 객체는 프로토타입 객체인 Object.prototype의 프로퍼티를 상속받는다.// hasOwnProperty 메소드는 Object.prototype의 메소드이다.console.log(obj.hasOwnProperty('a')); // trueconsole.log(obj.hasOwnProperty('__proto__')); // false 2.6. prototype 프로퍼티prototype 프로퍼티는 함수 객체만이 소유하는 프로퍼티이다. 일반 객체에는 prototype 프로퍼티가 없다. 12345// 함수 객체는 prototype 프로퍼티를 소유한다.console.log((function() {}).hasOwnproperty('prototype')); // true// 일반 객체는 prototype 프로퍼티를 소유하지 않는다.console.log(({}).hasOwnProperty('prototype')); // false prototype 프로퍼티는 함수가 객체를 생성하는 생성자 함수로 사용될 때, 생성자 함수가 생성할 인스턴스의 프로토타입 객체를 가리킨다.","link":"/2020/03/%ED%95%A8%EC%88%98%EC%99%80%20%EC%9D%BC%EA%B8%89%20%EA%B0%9D%EC%B2%B4/"}],"tags":[{"name":"javaScript","slug":"javaScript","link":"/tags/javaScript/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"TypeScript","slug":"TypeScript","link":"/tags/TypeScript/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"prototype","slug":"prototype","link":"/tags/prototype/"},{"name":"operator","slug":"operator","link":"/tags/operator/"},{"name":"attribute","slug":"attribute","link":"/tags/attribute/"},{"name":"property","slug":"property","link":"/tags/property/"},{"name":"scope","slug":"scope","link":"/tags/scope/"},{"name":"scopechain","slug":"scopechain","link":"/tags/scopechain/"},{"name":"present","slug":"present","link":"/tags/present/"},{"name":"statement","slug":"statement","link":"/tags/statement/"},{"name":"let","slug":"let","link":"/tags/let/"},{"name":"const","slug":"const","link":"/tags/const/"},{"name":"var","slug":"var","link":"/tags/var/"},{"name":"ES6","slug":"ES6","link":"/tags/ES6/"},{"name":"variable","slug":"variable","link":"/tags/variable/"},{"name":"React","slug":"React","link":"/tags/React/"},{"name":"object","slug":"object","link":"/tags/object/"},{"name":"algorism","slug":"algorism","link":"/tags/algorism/"},{"name":"search","slug":"search","link":"/tags/search/"},{"name":"array","slug":"array","link":"/tags/array/"},{"name":"function","slug":"function","link":"/tags/function/"},{"name":"firstclass","slug":"firstclass","link":"/tags/firstclass/"}],"categories":[{"name":"develop","slug":"develop","link":"/categories/develop/"},{"name":"JavaScript","slug":"develop/JavaScript","link":"/categories/develop/JavaScript/"},{"name":"git","slug":"develop/git","link":"/categories/develop/git/"},{"name":"React","slug":"develop/React","link":"/categories/develop/React/"},{"name":"algorism","slug":"algorism","link":"/categories/algorism/"},{"name":"With Js","slug":"algorism/With-Js","link":"/categories/algorism/With-Js/"}]}